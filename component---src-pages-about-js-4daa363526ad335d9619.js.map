{"version":3,"file":"component---src-pages-about-js-4daa363526ad335d9619.js","mappings":"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","sources":["webpack://atharv-kulkarni/./src/pages/about.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-NEK3OOAM.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-Z6RXEUPO.mjs"],"sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable react/display-name */\nimport React, { useState, useRef } from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport {\n  Box,\n  Flex,\n  Heading,\n  Text,\n  List,\n  ListIcon,\n  ListItem,\n  Button,\n  SimpleGrid,\n  Badge,\n  Icon,\n  Grid,\n} from '@chakra-ui/react'\nimport {\n  SiJavascript,\n  SiReact,\n  SiNodedotjs,\n  SiExpress,\n  SiMongodb,\n  SiGraphql,\n  SiGit,\n  SiPython,\n  SiMysql,\n  SiMicrosoftazure,\n  SiSolidity,\n  SiWeb3Dotjs,\n  SiHyperledger,\n} from 'react-icons/si'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { StaticImage } from 'gatsby-plugin-image'\nimport { ChevronRightIcon } from '@chakra-ui/icons'\n\nimport Layout from '../components/Layout'\n// import TimelineItem from '../components/Timeline/TimelineItem'\n\nimport * as styles from '../styles/about.module.scss'\nimport aboutMeData from '../data/aboutme.json'\n\n// Data for the components\nconst sections = [\n  { id: 'about', title: 'About' },\n  { id: 'professional-journey', title: 'Professional Journey' },\n  {\n    id: 'key-skills',\n    title: 'Key Skills',\n  },\n  {\n    id: 'certifications',\n    title: 'Certifications',\n  },\n  { id: 'education', title: 'Education' },\n  { id: 'notable-projects', title: 'Notable Projects' },\n  { id: 'accolades', title: 'Accolades' },\n]\n\n/// ////////////////////////////////////////////////////////////////////////\n\nconst SkillIcon = ({ icon, label }) => (\n  <Flex\n    py={4}\n    px={2}\n    flexDirection=\"column\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    borderWidth=\"1px\"\n    borderRadius=\"lg\"\n    boxShadow=\"md\"\n  >\n    <Icon as={icon} w={10} h={10} m={2} />\n    {label}\n  </Flex>\n)\n\n// Create a mapping of string names to icon components\nconst ICONS_MAP = {\n  JavaScript: SiJavascript,\n  'React.js': SiReact,\n  'Node.js': SiNodedotjs,\n  'Express.js': SiExpress,\n  MongoDB: SiMongodb,\n  GraphQL: SiGraphql,\n  Git: SiGit,\n  Python: SiPython,\n  SQL: SiMysql,\n  Azure: SiMicrosoftazure,\n  Solidity: SiSolidity,\n  'Web3.js': SiWeb3Dotjs,\n  'Hyperledger Fabric': SiHyperledger,\n}\n\nconst SectionComponent = React.forwardRef(\n  ({ section, isActive, onScroll, onWheel }, ref) => {\n    const AWSCertData = useStaticQuery(graphql`\n      query {\n        pdfs: file(\n          relativePath: {\n            eq: \"AWS Certified Cloud Practitioner certificate - Atharv Kulkarni.pdf\"\n          }\n        ) {\n          publicURL\n        }\n      }\n    `)\n\n    const AWSCertPDF = AWSCertData.pdfs.publicURL\n\n    return isActive ? (\n      <motion.div\n        ref={ref}\n        key={section.id}\n        onScroll={onScroll} // Handle scroll events for overflow\n        onWheel={onWheel} // Handle wheel events when there is no overflow\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.5 }}\n        style={{\n          height: '100%', // Full height of the container\n          overflowY: 'auto', // Scrollable if content overflows\n          width: '100%',\n        }}\n      >\n        {section.id === 'about' && (\n          <SimpleGrid\n            gridTemplateColumns={{ sm: '1fr', md: '2fr 1fr' }}\n            spacing={5}\n            placeItems=\"center\"\n          >\n            <Flex flexDirection=\"column\" pl={4} justifyContent=\"center\">\n              <Text mb={3}>Hello!</Text>\n              <Text mb={3}>\n                I'm <strong>Atharv Kulkarni</strong>, a dynamic and\n                forward-thinking <strong>Consultant at IBM</strong>, currently\n                immersed in the realms of Workday integration and AI-driven\n                application development.\n              </Text>\n              <Text>\n                With a solid foundation in both technology and business, I bring\n                over a year of comprehensive experience in consulting, paired\n                with an{' '}\n                <strong>\n                  expertise in Workday and application development.\n                </strong>\n              </Text>\n            </Flex>\n            <Flex\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              maxWidth=\"350px\"\n              mb={10}\n            >\n              {/* <GatsbyImage image={landingPageImg} alt=\"Profile Photo\" /> */}\n              <StaticImage\n                src=\"../assets/images/landingPageImg.png\"\n                alt=\"Profile Photo\"\n              />\n            </Flex>\n          </SimpleGrid>\n        )}\n\n        {section.id === 'professional-journey' && (\n          <Box flex=\"1\" id=\"professional-journey\">\n            {/* <Timeline /> */}\n            <Heading as=\"h2\" size=\"xl\">\n              Professional Journey\n            </Heading>\n            {aboutMeData.workExperience.map((experience, index) => (\n              <TimelineItem key={index} {...experience} />\n            ))}\n          </Box>\n        )}\n\n        {section.id === 'key-skills' && (\n          <Flex id=\"key-skills\" flexDirection=\"column\">\n            <Heading as=\"h1\" size=\"lg\">\n              Key Skills\n            </Heading>\n            <SimpleGrid columns={{ sm: 1, md: 2 }} spacing={5} m={4}>\n              {/*  columns={{ sm: 1, md: 2, lg: 3 }} */}\n              {Object.keys(aboutMeData.skills).map((entry, index) => (\n                <Flex\n                  flexDirection=\"column\"\n                  alignItems=\"center\"\n                  p={5}\n                  key={index}\n                  borderWidth=\"1px\"\n                  borderRadius=\"lg\"\n                  boxShadow=\"md\"\n                >\n                  <Text fontSize=\"xl\" mb={8}>\n                    <strong>{aboutMeData.skills[entry].title}</strong>\n                  </Text>\n\n                  <SimpleGrid columns={{ base: 2, lg: 3 }} spacing={6} p={6}>\n                    {aboutMeData.skills[entry].skills.map(skill => (\n                      <SkillIcon icon={ICONS_MAP[skill]} label={`${skill}`} />\n                    ))}\n                  </SimpleGrid>\n                </Flex>\n              ))}\n            </SimpleGrid>\n          </Flex>\n        )}\n\n        {section.id === 'certifications' && (\n          <Box flex=\"1\" id=\"certifications\">\n            {/* <Timeline /> */}\n            <Heading as=\"h2\" size=\"xl\">\n              Certifications\n            </Heading>\n            <SimpleGrid columns={{ sm: 1, md: 2, lg: 3 }} spacing={5} my=\"5\">\n              {aboutMeData.certifications.map((entry, index) => (\n                <Box\n                  key={index}\n                  borderWidth=\"1px\"\n                  p={4}\n                  borderRadius=\"lg\"\n                  boxShadow=\"md\"\n                >\n                  <Badge colorScheme=\"blue\" mb={2}>\n                    {entry.badge}\n                  </Badge>\n                  <Text fontWeight=\"bold\">{entry.name}</Text>\n                  <Text fontSize=\"sm\">{entry.validity}</Text>\n                  {entry.verificationURL !== '' ? (\n                    <Button colorScheme=\"purple\" variant=\"outline\">\n                      <ChakraLink\n                        href={\n                          entry.badge === 'AWS'\n                            ? AWSCertPDF\n                            : entry.verificationURL\n                        }\n                        target=\"_blank\"\n                        style={{ textDecoration: 'none' }}\n                      >\n                        Verify\n                      </ChakraLink>\n                    </Button>\n                  ) : null}\n                </Box>\n              ))}\n            </SimpleGrid>\n            {/* <Flex flexDirection=\"row\" flex=\"1\">\n              {aboutMeData.certifications.map(cert => (\n                // console.log(cert)\n                <Flex\n                  flexDirection=\"column\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Box>\n                    <Icon\n                      as={cert.icon === 'FaAws' ? FaAws : FaMicrosoft}\n                      width=\"50px\"\n                      height=\"auto\"\n                    />\n                  </Box>\n                  <Box>{cert.name}</Box>\n                </Flex>\n              ))}\n            </Flex> */}\n          </Box>\n        )}\n\n        {section.id === 'education' && (\n          <Box my={10} id=\"education\">\n            <Heading as=\"h2\" size=\"lg\">\n              Education\n            </Heading>\n\n            <Flex>\n              <Flex flexDirection=\"column\" alignItems=\"center\">\n                <Box\n                  width=\"2px\"\n                  height=\"90%\"\n                  bg=\"blue.500\"\n                  left=\"10px\" // top=\"0\" bottom=\"2\"\n                />\n              </Flex>\n              <Flex flexDirection=\"column\" p={4}>\n                {aboutMeData.education.map(entry => (\n                  <>\n                    <Heading as=\"h3\" size=\"md\">\n                      {entry.degree}\n                    </Heading>\n                    <Text fontSize=\"md\" mt=\"2\">\n                      <i>\n                        <a\n                          href={entry.instituteWebPageLink}\n                          target=\"_blank\"\n                          style={{ textDecoration: 'none' }}\n                          rel=\"noreferrer\"\n                        >\n                          {entry.institute}\n                        </a>\n                      </i>\n                      <Text fontSize=\"sm\">{entry.timeline}</Text>\n                    </Text>\n                    {/* <Text fontSize=\"sm\">\n                      <strong>Grade:</strong> {entry.grade}\n                    </Text> */}\n                    <Text fontWeight=\"bold\" fontSize=\"sm\">\n                      Extracurricular Leadership:\n                    </Text>\n                    <Text fontSize=\"sm\">\n                      {entry.extracurricular.map(item => (\n                        <List spacing={2} mt={2}>\n                          <ListItem>\n                            <ListIcon\n                              as={ChevronRightIcon}\n                              color=\"arrowColor\"\n                            />\n                            {item}\n                          </ListItem>\n                        </List>\n                      ))}\n                    </Text>\n                  </>\n                ))}\n              </Flex>\n            </Flex>\n          </Box>\n        )}\n\n        {section.id === 'notable-projects' && (\n          <Box flex=\"1\" my={10} id=\"notable-projects\">\n            <Heading as=\"h2\" size=\"lg\">\n              Notable Projects\n            </Heading>\n            {/* Projects Details */}\n            <List spacing={2} mt={2}>\n              <SimpleGrid columns={{ sm: 1, md: 2, lg: 3 }} spacing={5}>\n                {aboutMeData.projects.map((project, index) => (\n                  <Box\n                    key={index}\n                    borderWidth=\"1px\"\n                    p={4}\n                    borderRadius=\"lg\"\n                    boxShadow=\"md\"\n                  >\n                    <Badge colorScheme=\"green\" mb={2}>\n                      {project.badge}\n                    </Badge>\n                    <Text fontWeight=\"bold\">{project.name}</Text>\n                    <Text fontSize=\"sm\">{project.description}</Text>\n                  </Box>\n                ))}\n              </SimpleGrid>\n            </List>\n          </Box>\n        )}\n\n        {section.id === 'accolades' && (\n          <Box flex=\"1\" my={10} id=\"accolades\">\n            <Heading as=\"h2\" size=\"lg\" mt={10}>\n              Accolades\n            </Heading>\n            {/* Certifications Details */}\n\n            <Flex>\n              <Flex flexDirection=\"column\" alignItems=\"center\">\n                <Box\n                  width=\"2px\"\n                  height=\"100%\"\n                  bg=\"blue.500\"\n                  left=\"10px\" // top=\"0\" bottom=\"2\"\n                />\n              </Flex>\n              <Flex px={4}>\n                <List spacing={2} mt={2}>\n                  {aboutMeData.accolades.map(item => (\n                    <ListItem>\n                      <ListIcon as={ChevronRightIcon} color=\"arrowColor\" />\n                      {item}\n                    </ListItem>\n                  ))}\n                </List>\n              </Flex>\n            </Flex>\n          </Box>\n        )}\n      </motion.div>\n    ) : null\n  }\n)\n\nconst TimelineItem = ({ company, role, duration, points }) => (\n  <Flex mb={8}>\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Box\n        width=\"20px\"\n        height=\"20px\"\n        bg=\"blue.500\"\n        borderRadius=\"full\"\n        // position=\"absolute\"\n        // left=\"1px\"\n        // top=\"0\"\n      />\n      <Box\n        width=\"2px\"\n        height=\"100%\"\n        bg=\"blue.500\"\n        left=\"10px\" // top=\"0\" bottom=\"2\"\n      />\n    </Flex>\n    <Box pl={4}>\n      <Heading size=\"lg\" as=\"h3\" mb={2}>\n        {role}\n      </Heading>\n      <Text fontSize=\"md\" mb={1}>\n        <strong>{company}</strong>\n      </Text>\n      <Text fontSize=\"sm\" color=\"gray.600\" mb={4}>\n        {duration}\n      </Text>\n      <List spacing={3} mt={6}>\n        {points.map((point, index) => (\n          <ListItem key={index} fontSize=\"sm\">\n            <ListIcon as={ChevronRightIcon} color=\"arrowColor\" />\n            {point}\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  </Flex>\n)\n\nconst About = () => {\n  const [activeSection, setActiveSection] = useState(0)\n  const sectionRefs = useRef(sections.map(() => React.createRef()))\n  const scrollDelta = useRef(0) // To track cumulative scroll delta\n  const scrollThreshold = 200 // Adjust this value to control sensitivity\n\n  const isSectionActive = sectionIndex => sectionIndex === activeSection\n\n  // Handle scroll events\n  const handleScroll = e => {\n    const { scrollTop, scrollHeight, clientHeight } = e.target\n    const atBottom = scrollTop + clientHeight >= scrollHeight\n    const atTop = scrollTop === 0\n\n    if (atBottom && activeSection < sections.length - 1) {\n      setActiveSection(prevActiveSection => prevActiveSection + 1)\n    } else if (atTop && activeSection > 0) {\n      setActiveSection(prevActiveSection => prevActiveSection - 1)\n    }\n  }\n\n  const handleWheel = e => {\n    const currentSectionRef = sectionRefs.current[activeSection].current\n    if (!currentSectionRef) return\n\n    const { scrollTop, scrollHeight, clientHeight } = currentSectionRef\n    const atBottom = scrollTop + clientHeight >= scrollHeight\n    const atTop = scrollTop === 0\n\n    scrollDelta.current += e.deltaY // Accumulate scroll delta\n\n    // Check if we've exceeded our scroll threshold\n    if (Math.abs(scrollDelta.current) > scrollThreshold) {\n      if (atBottom && e.deltaY > 0 && activeSection < sections.length - 1) {\n        setActiveSection(prevActiveSection => prevActiveSection + 1)\n      } else if (atTop && e.deltaY < 0 && activeSection > 0) {\n        setActiveSection(prevActiveSection => prevActiveSection - 1)\n      }\n      scrollDelta.current = 0 // Reset the scroll delta after changing sections\n    }\n  }\n\n  // const debouncedHandleWheel = debounce(handleWheel, 200) // Adjust the 200ms delay as needed\n\n  return (\n    <Layout>\n      <Box maxW=\"1500px\" m=\"0 auto\" p={5}>\n        <Grid\n          templateColumns={['repeat(1, 1fr)', '1fr 3fr']} // 1 column on small screens, 3 columns on larger screens\n          gap={4} // Space between grid items\n        >\n          {/* <Box className={styles.toc}> */}\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n            {/* Table of Contents */}\n            {sections.map((section, index) => (\n              <Button\n                key={section.id}\n                variant={index === activeSection ? 'solid' : 'ghost'}\n                // colorScheme={index === activeSection ? 'purple' : 'blue'}\n                colorScheme=\"gray\"\n                _hover={{ bg: 'gray.700', color: 'white' }}\n                w=\"100%\"\n                maxWidth=\"280px\"\n                justifyContent=\"center\"\n                textAlign=\"center\"\n                textDecoration=\"none\"\n                isActive={index === activeSection}\n                onClick={() => setActiveSection(index)}\n                style={{\n                  opacity: isSectionActive(index) ? 1 : 0.9,\n                  transform:\n                    index === activeSection ? 'scale(1.0)' : 'scale(0.9)',\n                  backgroundColor: index === activeSection ? 'gray.900' : '',\n                }}\n                transition=\"transform 0.2s ease-in-out, filter 0.2s ease-in-out\"\n                size=\"lg\"\n                mb={3}\n              >\n                {section.title}\n              </Button>\n            ))}\n          </Box>\n\n          {/* <Box px={10} mx={10} className={styles.content}> */}\n          <Box display=\"flex\">\n            <AnimatePresence>\n              {sections.map((section, index) => (\n                <SectionComponent\n                  key={section.id}\n                  section={section}\n                  isActive={index === activeSection}\n                  // onScroll={handleScroll}\n                  onWheel={handleWheel}\n                  ref={sectionRefs.current[index]} // Pass the ref for the section\n                />\n              ))}\n            </AnimatePresence>\n          </Box>\n        </Grid>\n      </Box>\n\n      {/* <Flex m={10} className={styles.aboutPage}>\n        <Box className={styles.toc}>\n          {/* Table of Contents \n          {sections.map((section, index) => (\n            <Button\n              key={section.id}\n              variant={index === activeSection ? 'solid' : 'ghost'}\n              // colorScheme={index === activeSection ? 'purple' : 'blue'}\n              colorScheme=\"gray\"\n              _hover={{ bg: 'gray.700', color: 'white' }}\n              w=\"100%\"\n              maxWidth=\"280px\"\n              justifyContent=\"center\"\n              textAlign=\"center\"\n              textDecoration=\"none\"\n              isActive={index === activeSection}\n              onClick={() => setActiveSection(index)}\n              style={{\n                opacity: isSectionActive(index) ? 1 : 0.9,\n                transform:\n                  index === activeSection ? 'scale(1.0)' : 'scale(0.9)',\n                backgroundColor: index === activeSection ? 'gray.900' : '',\n              }}\n              transition=\"transform 0.2s ease-in-out, filter 0.2s ease-in-out\"\n              size=\"lg\"\n              mb={3}\n            >\n              {section.title}\n            </Button>\n          ))}\n        </Box>\n\n        <Box px={10} mx={10} className={styles.content}>\n          <AnimatePresence>\n            {sections.map((section, index) => (\n              <SectionComponent\n                key={section.id}\n                section={section}\n                isActive={index === activeSection}\n                // onScroll={handleScroll}\n                onWheel={handleWheel}\n                ref={sectionRefs.current[index]} // Pass the ref for the section\n              />\n            ))}\n          </AnimatePresence>\n        </Box>\n      </Flex> */}\n    </Layout>\n  )\n}\n\nexport default About\n","'use client'\nimport {\n  Grid\n} from \"./chunk-JARCRF6W.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n//# sourceMappingURL=chunk-NEK3OOAM.mjs.map","'use client'\n\n// src/badge.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Badge = forwardRef(function Badge2(props, ref) {\n  const styles = useStyleConfig(\"Badge\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      ref,\n      className: cx(\"chakra-badge\", props.className),\n      ...rest,\n      __css: {\n        display: \"inline-block\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        ...styles\n      }\n    }\n  );\n});\nBadge.displayName = \"Badge\";\n\nexport {\n  Badge\n};\n//# sourceMappingURL=chunk-Z6RXEUPO.mjs.map"],"names":["sections","id","title","SkillIcon","_ref","icon","label","React","Flex","py","px","flexDirection","alignItems","justifyContent","borderWidth","borderRadius","boxShadow","Icon","as","w","h","m","ICONS_MAP","JavaScript","SiJavascript","SiReact","SiNodedotjs","SiExpress","MongoDB","SiMongodb","GraphQL","SiGraphql","Git","SiGit","Python","SiPython","SQL","SiMysql","Azure","SiMicrosoftazure","Solidity","SiSolidity","SiWeb3Dotjs","SiHyperledger","SectionComponent","_ref2","ref","section","isActive","onScroll","onWheel","AWSCertPDF","useStaticQuery","pdfs","publicURL","motion","div","key","initial","opacity","animate","exit","transition","duration","style","height","overflowY","width","SimpleGrid","gridTemplateColumns","sm","md","spacing","placeItems","pl","Text","mb","maxWidth","StaticImage","src","alt","__imageData","require","Box","flex","Heading","size","aboutMeData","map","experience","index","TimelineItem","Object","assign","columns","keys","entry","p","fontSize","base","lg","skills","skill","my","Badge","colorScheme","badge","fontWeight","name","validity","verificationURL","Button","variant","ChakraLink","href","target","textDecoration","bg","left","degree","mt","instituteWebPageLink","rel","institute","timeline","extracurricular","item","List","ListItem","ListIcon","ChevronRightIcon","color","project","description","_ref3","company","role","points","point","About","activeSection","setActiveSection","useState","sectionRefs","useRef","scrollDelta","handleWheel","e","currentSectionRef","current","scrollTop","scrollHeight","clientHeight","atBottom","atTop","deltaY","Math","abs","length","prevActiveSection","Layout","maxW","Grid","templateColumns","gap","display","_hover","textAlign","onClick","sectionIndex","transform","backgroundColor","AnimatePresence","props","spacingX","spacingY","minChildWidth","rest","theme","value","_value","n","widthToColumns","count","jsx","columnGap","rowGap","displayName","styles","className","span","cx","__css","whiteSpace","verticalAlign"],"sourceRoot":""}