{"version":3,"file":"component---src-templates-project-js-be6ccc23fe19611fc046.js","mappings":"mHAEA,IAAIA,EAASC,OAAOC,UAAUC,eAC1BC,EAAQH,OAAOC,UAAUG,SACzBC,EAAiBL,OAAOK,eACxBC,EAAON,OAAOO,yBAEdC,EAAU,SAAiBC,GAC9B,MAA6B,mBAAlBC,MAAMF,QACTE,MAAMF,QAAQC,GAGK,mBAApBN,EAAMQ,KAAKF,EACnB,EAEIG,EAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBV,EAAMQ,KAAKE,GACtB,OAAO,EAGR,IASIC,EATAC,EAAoBhB,EAAOY,KAAKE,EAAK,eACrCG,EAAmBH,EAAII,aAAeJ,EAAII,YAAYhB,WAAaF,EAAOY,KAAKE,EAAII,YAAYhB,UAAW,iBAE9G,GAAIY,EAAII,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAOD,GAEZ,YAAsB,IAARC,GAAuBf,EAAOY,KAAKE,EAAKC,EACvD,EAGII,EAAc,SAAqBC,EAAQC,GAC1Cf,GAAmC,cAAjBe,EAAQC,KAC7BhB,EAAec,EAAQC,EAAQC,KAAM,CACpCC,YAAY,EACZC,cAAc,EACdC,MAAOJ,EAAQK,SACfC,UAAU,IAGXP,EAAOC,EAAQC,MAAQD,EAAQK,QAEjC,EAGIE,EAAc,SAAqBd,EAAKQ,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKtB,EAAOY,KAAKE,EAAKQ,GACrB,OACM,GAAIf,EAGV,OAAOA,EAAKO,EAAKQ,GAAMG,KAEzB,CAEA,OAAOX,EAAIQ,EACZ,EAEAO,EAAOC,QAAU,SAASC,IACzB,IAAIV,EAASC,EAAMU,EAAKC,EAAMC,EAAaC,EACvCf,EAASgB,UAAU,GACnBC,EAAI,EACJC,EAASF,UAAUE,OACnBC,GAAO,EAaX,IAVsB,kBAAXnB,IACVmB,EAAOnB,EACPA,EAASgB,UAAU,IAAM,CAAC,EAE1BC,EAAI,IAES,MAAVjB,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAC,GAGJiB,EAAIC,IAAUD,EAGpB,GAAe,OAFfhB,EAAUe,UAAUC,IAInB,IAAKf,KAAQD,EACZW,EAAMJ,EAAYR,EAAQE,GAItBF,KAHJa,EAAOL,EAAYP,EAASC,MAKvBiB,GAAQN,IAASpB,EAAcoB,KAAUC,EAAczB,EAAQwB,MAC9DC,GACHA,GAAc,EACdC,EAAQH,GAAOvB,EAAQuB,GAAOA,EAAM,IAEpCG,EAAQH,GAAOnB,EAAcmB,GAAOA,EAAM,CAAC,EAI5Cb,EAAYC,EAAQ,CAAEE,KAAMA,EAAMI,SAAUK,EAAOQ,EAAMJ,EAAOF,WAGtC,IAATA,GACjBd,EAAYC,EAAQ,CAAEE,KAAMA,EAAMI,SAAUO,KAQjD,OAAOb,CACR,C,6pBClHA,MAAMoB,GAAgB,E,QAAA,GAAW,CAC/BC,YAAa,gBACbC,QAAS,YACTC,EAAG,4O,+DCML,MAAOC,EAAuBC,IAAoB,SAC5CC,EAAe,CACnBC,MAAO,CAAEC,IAAK,OAAQC,IAAK,SAC3BC,IAAK,CAAEF,IAAK,QAASC,IAAK,SAO5B,SAASE,EAAOC,GACd,MAAM,OACJC,EAAM,QACNC,EACAC,UAAWC,EAAgB,QAAO,SAClCC,KACGC,GACDN,EACEO,GAAQ,SACRC,EAAoBD,EAAME,YAAYV,OACtCI,EAfR,SAA4BA,EAAWO,GACrC,GAAKP,EAEL,OAAOT,EAAaS,KAAaO,IAAQP,CAC3C,CAWoBQ,CAAmBP,EAAeG,EAAMK,WAC1D,OAAuB,IAAAC,KAAIrB,EAAuB,CAAEnB,MAAO,CAAE8B,aAAaE,UAA0B,IAAAQ,KAClG,KACA,CACEZ,SACAC,UACAY,YAAaN,KACVF,EACHD,cAGN,C,0ECnCA,MAAMU,EAAoB,CACxBC,KAAM,CACJC,SAAU,IACVC,KAAM,KAAmBC,WAE3BC,MAAO,CACLC,KAAM,SACNC,QAAS,GACTC,UAAW,MAGTC,EAAW,CACfR,KAAM,EAAGJ,YAAWa,aAAYC,gBAAeC,YAC7C,MAAQX,KAAMY,IAAe,QAAmB,CAAEhB,cAClD,MAAO,IACFgB,EACHH,WAAYA,GAAYT,MAAQ,KAAUA,KAAKD,EAAkBC,KAAMW,GACvED,cAAeA,GAAeV,KAC/B,EAEHI,MAAO,EAAGR,YAAWc,gBAAeD,aAAYE,YAC9C,MAAQP,MAAOS,IAAgB,QAAmB,CAAEjB,cACpD,MAAO,IACFiB,EACHJ,WAAYA,GAAYL,OAAS,KAAUA,MAAML,EAAkBK,MAAOO,GAC1ED,cAAeA,GAAeN,MAC/B,GAGCU,GAAQ,IAAAC,aACZ,SAAgB/B,EAAOgC,GACrB,MAAM,UACJpB,EAAY,QAAO,MACnBqB,EAAK,cACLC,EACAC,GAAIlC,EAAM,UACVmC,EAAS,WACTX,EAAU,cACVC,EAAa,MACbC,EAAK,YACLU,EAAW,qBACXC,KACGhC,GACDN,EACEuC,GAAmB,QAAmB,CAAE3B,cACxC4B,EAAgB3F,OAAO4F,OAC3B,CAAEC,SAAU,SACZH,EAAiBG,SACjBT,GAEIU,GAAOT,GAAgBjC,GAAUiC,EACjCU,EAAU3C,GAAUiC,EAAgB,QAAU,OAC9CW,EAAS,CAAEnB,gBAAeD,aAAYb,YAAWe,SACvD,OAAuB,IAAAd,KAAIiC,EAAA,EAAiB,IAAKR,EAAsBO,SAAQxC,SAAUsC,IAAwB,IAAA9B,KAC/G,IAAOkC,IACP,IACKzC,EACH0B,MACAgB,QAAS,OACTZ,WAAW,EAAAa,EAAAA,IAAG,eAAgBb,GAC9BQ,UACA5B,KAAM,OACN6B,SACArB,WACAS,MAAOO,KACJH,KAGT,IAEFP,EAAMzC,YAAc,Q,uBCnEpB,MAAM6D,GAAY,OAAOpB,GACnBqB,GAAgB,QACpB,CAACnD,EAAOgC,KACN,MAAM,UACJI,EAAS,SACT/B,EAAQ,YACRgC,EACAe,eAAgBC,KACb/C,GACDN,GACE,eAAEsD,EAAc,wBAAEC,EAAuB,OAAEtD,IAAW,UACtDuD,EAAcF,EAAehD,EAAM0B,GACnCoB,EAAiBG,EAAwBF,GACzCI,GAAa,EAAAR,EAAAA,IAAG,wBAAyBb,GACzCsB,GAAS,UACTC,EAAe,CACnBC,QAAS,OACTC,cAAe,SACfnB,SAAU,WACVoB,MAAO,OACPC,QAAS,KACNL,EAAOM,QAENC,EAAwB,CAC5BL,QAAS,OACTE,MAAO,QACPI,OAAQ,SACRxB,SAAU,QACVyB,KAAM,EACNC,IAAK,KACFV,EAAOW,kBAEN,UAAElE,GAAcV,IACtB,OAAuB,IAAAoB,KAAI,IAAiB,CAAER,UAA0B,IAAAQ,KACtE,IAAOkC,IACP,IACKK,EACHhB,UAAW,kCACXkC,MAAOL,EACP5D,UAA0B,IAAAQ,KACxBqC,EACA,CACEb,cACAzB,UAAWT,EACXgC,GAAIlC,EACJmC,UAAWqB,KACRD,EACHc,MAAOX,EACPtD,gBAIJ,IAGR8C,EAAc9D,YAAc,gB,+IC1D5B,MAGMkF,EAAS,0DACTC,EAAY,2DAGZC,EAAe,CAAC,EA0Cf,SAAS,EAAKvG,EAAMD,GAGzB,QAFiBA,GAAWwG,GACR5D,IAAM2D,EAAYD,GAC5BG,KAAKxG,EACjB,CCtDA,MAAMyG,EAAK,eAyBX,SAASC,EAAMvG,GACb,MAAiC,KAA1BA,EAAMwG,QAAQF,EAAI,GAC3B,CC3BO,MAAMG,EAOX,WAAAhH,CAAYiH,EAAUC,EAAQC,GAC5BC,KAAKH,SAAWA,EAChBG,KAAKF,OAASA,EACVC,IACFC,KAAKD,MAAQA,EAEjB,ECPK,SAASE,EAAMC,EAAaH,GAEjC,MAAMF,EAAW,CAAC,EAEZC,EAAS,CAAC,EAChB,IAAIK,GAAS,EAEb,OAASA,EAAQD,EAAYlG,QAC3BrC,OAAO4F,OAAOsC,EAAUK,EAAYC,GAAON,UAC3ClI,OAAO4F,OAAOuC,EAAQI,EAAYC,GAAOL,QAG3C,OAAO,IAAIF,EAAOC,EAAUC,EAAQC,EACtC,CCrBO,SAASK,EAAUjH,GACxB,OAAOA,EAAMkH,aACf,CFiBAT,EAAOhI,UAAUiI,SAAW,CAAC,EAE7BD,EAAOhI,UAAUkI,OAAS,CAAC,EAE3BF,EAAOhI,UAAUmI,MAAQ,KG3BlB,MAAMO,EAMX,WAAA1H,CAAYiH,EAAUU,GAEpBP,KAAKH,SAAWA,EAEhBG,KAAKO,UAAYA,CACnB,EAIFD,EAAK1I,UAAUmI,MAAQ,KACvBO,EAAK1I,UAAU4I,SAAU,EACzBF,EAAK1I,UAAU6I,YAAa,EAC5BH,EAAK1I,UAAU8I,mBAAoB,EACnCJ,EAAK1I,UAAU+I,QAAS,EACxBL,EAAK1I,UAAUgJ,gBAAiB,EAChCN,EAAK1I,UAAUiJ,gBAAiB,EAChCP,EAAK1I,UAAUkJ,uBAAwB,EACvCR,EAAK1I,UAAUmJ,iBAAkB,EACjCT,EAAK1I,UAAUoJ,SAAU,ECxBzB,IAAIC,GAAS,EAEN,MAAM,GAAUC,KACVT,GAAaS,KACbR,GAAoBQ,KACpBP,GAASO,KACTL,GAAiBK,KACjBN,GAAiBM,KACjBJ,GAAwBI,KAErC,SAASA,KACP,OAAO,KAAOD,EAChB,CCPA,MAAME,GAASxJ,OAAOyJ,KAAK,GAEpB,MAAMC,WAAoBf,EAQ/B,WAAA1H,CAAYiH,EAAUU,EAAWe,EAAMvB,GACrC,IAAII,GAAS,EAMb,GAJAoB,MAAM1B,EAAUU,GAEhBiB,GAAKxB,KAAM,QAASD,GAEA,iBAATuB,EACT,OAASnB,EAAQgB,GAAOnH,QAAQ,CAC9B,MAAMyH,EAAQN,GAAOhB,GACrBqB,GAAKxB,KAAMmB,GAAOhB,IAASmB,EAAO,EAAMG,MAAY,EAAMA,GAC5D,CAEJ,EAUF,SAASD,GAAKE,EAAQjJ,EAAKU,GACrBA,IAEFuI,EAAOjJ,GAAOU,EAElB,CAZAkI,GAAYzJ,UAAUoJ,SAAU,ECbhC,MAAMW,GAAM,CAAC,EAAE9J,eAMR,SAAS+J,GAAOC,GAErB,MAAMhC,EAAW,CAAC,EAEZC,EAAS,CAAC,EAEhB,IAAIgC,EAEJ,IAAKA,KAAQD,EAAWE,WACtB,GAAIJ,GAAIrJ,KAAKuJ,EAAWE,WAAYD,GAAO,CACzC,MAAM3I,EAAQ0I,EAAWE,WAAWD,GAC9BE,EAAO,IAAIX,GACfS,EACAD,EAAWI,UAAUJ,EAAWK,YAAc,CAAC,EAAGJ,GAClD3I,EACA0I,EAAW9B,OAIX8B,EAAWd,iBACXc,EAAWd,gBAAgBoB,SAASL,KAEpCE,EAAKjB,iBAAkB,GAGzBlB,EAASiC,GAAQE,EAEjBlC,EAAOM,EAAU0B,IAASA,EAC1BhC,EAAOM,EAAU4B,EAAKzB,YAAcuB,CACtC,CAGF,OAAO,IAAIlC,EAAOC,EAAUC,EAAQ+B,EAAW9B,MACjD,CCvDO,MAAMqC,GAAQR,GAAO,CAC1B7B,MAAO,QACP,SAAAkC,CAAUI,EAAGP,GACX,MAAO,SAAWA,EAAKQ,MAAM,GAAGjC,aAClC,EACA0B,WAAY,CACVQ,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,QCZFC,GAAMlB,GAAO,CACxB7B,MAAO,MACP,SAAAkC,CAAUI,EAAGP,GACX,MAAO,OAASA,EAAKQ,MAAM,GAAGjC,aAChC,EACA0B,WAAY,CAACgB,QAAS,KAAMC,QAAS,KAAMC,SAAU,QCFhD,SAASC,GAAuBhB,EAAY3B,GACjD,OAAOA,KAAa2B,EAAaA,EAAW3B,GAAaA,CAC3D,CCAO,SAAS4C,GAAyBjB,EAAYrC,GACnD,OAAOqD,GAAuBhB,EAAYrC,EAASQ,cACrD,CCNO,MAAM+C,GAAQxB,GAAO,CAC1B7B,MAAO,QACPmC,WAAY,CAACmB,WAAY,eACzBpB,UAAWkB,GACXpB,WAAY,CAACqB,MAAO,KAAME,WAAY,QCJ3BC,GAAO3B,GAAO,CACzB,SAAAK,CAAUI,EAAGP,GACX,MAAgB,SAATA,EAAkBA,EAAO,QAAUA,EAAKQ,MAAM,GAAGjC,aAC1D,EACA0B,WAAY,CACVyB,qBAAsB,KACtBC,WAAYhD,GACZiD,iBAAkB,KAClBC,SAAUlD,GACVmD,YAAanD,GACboD,aAAclD,GACdmD,aAAcnD,GACdoD,YAAapD,GACbqD,aAAcnD,GACdoD,YAAa,KACbC,gBAAiBrD,GACjBsD,YAAa,KACbC,aAAc3D,GACd4D,eAAgBxD,GAChByD,iBAAkB,KAClBC,aAAc9D,GACd+D,WAAY3D,GACZ4D,YAAahE,GACbiE,aAAc,KACdC,WAAYlE,GACZmE,YAAa,KACbC,iBAAkB,KAClBC,UAAW,KACXC,eAAgBlE,GAChBmE,UAAWrE,GACXsE,SAAU,KACVC,UAAWzE,GACX0E,cAAe1E,GACf2E,oBAAqB3E,GACrB4E,gBAAiB,KACjBC,SAAUzE,GACV0E,gBAAiB,KACjBC,aAAc7E,GACd8E,YAAahF,GACbiF,aAAcjF,GACdkF,aAAc,KACdC,aAAcnF,GACdoF,oBAAqBhF,GACrBiF,aAAcnF,GACdoF,aAAcpF,GACdqF,YAAarF,GACbsF,aAAcxF,GACdyF,YAAavF,GACbwF,SAAU,KACVC,aAAczF,GACd0F,aAAc1F,GACd2F,aAAc3F,GACd4F,cAAe,KACfC,KAAM,QC7CGC,GAAO7E,GAAO,CACzB7B,MAAO,OACPmC,WAAY,CACVwE,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEb5E,UAAWkB,GACXpC,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClDgB,WAAY,CAEV+E,KAAM,KACNC,OAAQnG,GACRoG,cAAenG,GACfoG,UAAWpG,GACXqG,OAAQ,KACRC,MAAO,KACPC,gBAAiB,GACjBC,oBAAqB,GACrBC,eAAgB,GAChBC,IAAK,KACLC,GAAI,KACJC,MAAO,GACPC,eAAgB,KAChBC,aAAc9G,GACd+G,UAAW,GACXC,SAAU,GACVC,SAAUjH,GACVkH,QAAS,KACTC,QAAS,KACTC,QAAS,GACTC,KAAM,KACNhL,UAAW2D,GACXsH,KAAMxH,GACNyH,QAAS,KACTC,QAAS,KACTC,gBAAiB7H,GACjB8H,SAAU,GACVC,aAAc3H,GACd4H,OAAQ9H,GAASC,GACjB8H,YAAa,KACbC,KAAM,KACNC,SAAU,KACVC,SAAU,KACVC,QAAS,GACTC,MAAO,GACPvN,IAAK,KACLwN,QAAS,KACTC,SAAU,GACVC,SAAUxI,GACVyI,UAAW1I,GACX2I,QAAS,KACTC,aAAc,KACdC,cAAe,KACfC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgB,GAChBC,WAAY,KACZC,QAAShJ,GACT7B,OAAQ2B,GACRmJ,OAAQ,GACRC,KAAMpJ,GACNqJ,KAAM,KACNC,SAAU,KACVC,QAASrJ,GACTsJ,UAAWtJ,GACXuJ,GAAI,KACJC,WAAY,KACZC,YAAa,KACbC,MAAO,GACPC,UAAW,KACXC,UAAW,KACXC,GAAI,KACJC,MAAO,GACPC,OAAQ,KACRC,SAAUhK,GACViK,QAASjK,GACTkK,UAAW,GACXC,SAAUnK,GACVoK,KAAM,KACNC,MAAO,KACPC,KAAM,KACNC,SAAU,KACVC,KAAM,KACNC,QAAS,KACTC,KAAM,GACNC,IAAK7K,GACL8K,SAAU,KACVC,IAAK,KACLC,UAAWhL,GACXiL,MAAO,KACPC,OAAQ,KACRC,IAAK,KACLC,UAAWpL,GACXqL,SAAU,GACVC,MAAO,GACPjT,KAAM,KACNkT,MAAO,KACPC,SAAU,GACVC,WAAY,GACZC,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChBC,eAAgB,KAChBC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTjS,QAAS,KACTkS,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACTC,KAAM,GACNC,QAASlR,GACTmR,QAAS,KACTC,KAAMlR,GACNmR,YAAa,KACbC,YAAa,GACbC,QAAS,KACTC,cAAe,KACfC,oBAAqB,KACrBC,OAAQ,KACRC,QAAS,KACTC,SAAU,GACVC,eAAgB,KAChBC,IAAK5R,GACL6R,SAAU,GACVC,SAAU,GACVC,KAAMjS,GACNkS,QAASlS,GACTmS,QAASjS,GACTkS,MAAO,KACPC,OAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,mBAAoB,GACpBC,yBAA0B,GAC1BC,eAAgB,KAChBC,MAAO,KACPC,KAAM5S,GACN6S,MAAO,KACPC,KAAM,KACNC,KAAM/S,GACNgT,WAAYlT,GACZ/G,IAAK,KACLka,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRrZ,MAAOkG,GACPoT,KAAM,KACNhX,MAAO,KACPiX,SAAUrT,GACV7H,OAAQ,KACRmb,MAAO,KACPC,UAAW,KACX/X,KAAM,KACNgY,cAAe,GACfC,OAAQ,KACRjb,MAAOsH,GACP7B,MAAO+B,GACP0T,KAAM,KACNC,mBAAoB,KAIpBC,MAAO,KACPC,MAAO,KACPC,QAAS5T,GACT6T,KAAM,KACNC,WAAY,KACZC,QAAS,KACTC,OAAQlU,GACRmU,YAAa,KACbC,aAAcpU,GACdqU,YAAa,KACbC,YAAa,KACbC,KAAM,KACNC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,KAAM,KACNC,SAAU,KACVC,SAAU,KACVC,MAAO,KACPC,QAAS,GACTC,QAAS,GACTC,MAAO,KACPC,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQrV,GACRsV,WAAYtV,GACZuV,KAAM,KACNC,SAAU,KACVC,OAAQ,KACRC,aAAc1V,GACd2V,YAAa3V,GACb4V,SAAU,GACVC,OAAQ,GACRC,QAAS,GACTC,OAAQ,GACRC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAapW,GACbqW,MAAO,KACPC,OAAQ,KACRC,UAAWzW,GACX0W,QAAS,KACTC,QAAS,KACTC,KAAM,KACNC,UAAW3W,GACX4W,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQhX,GAGRiX,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyB,GACzBC,sBAAuB,GACvBC,OAAQ,KACRpY,SAAU,KACVqY,QAASvX,GACTwX,SAAU,KACVC,aAAc,QCrTLC,GAAMzW,GAAO,CACxB7B,MAAO,MACPmC,WAAY,CACVoW,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACXxb,UAAW,QACXyb,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChBtQ,YAAa,cACbuQ,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1BhQ,SAAU,WACViQ,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZ/O,QAAS,UACTgP,WAAY,aACZ/O,aAAc,eACdG,cAAe,gBACf6O,QAAS,UACTzO,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTjS,QAAS,UACTqS,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACXqN,MAAO,QACPpN,QAAS,UACTC,QAAS,UACTC,QAAS,UACTmN,UAAW,YACXC,WAAY,aACZlN,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACX+L,aAAc,eACd9L,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACdqL,SAAU,WACVnL,QAAS,UACTC,SAAU,WACVC,SAAU,WACVG,SAAU,WACVC,UAAW,YACXC,SAAU,WACV6K,OAAQ,SACR3K,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACXmK,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTC,cAAe,iBACf1J,eAAgB,iBAChB2J,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACb/I,SAAU,WACVgJ,WAAY,cACZC,eAAgB,kBAChBC,cAAe,iBACfC,gBAAiB,mBACjBC,OAAQ,SACRC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjBrc,UAAWiB,GACXnB,WAAY,CACVwc,MAAOzd,GACPwX,aAAc3X,GACd6d,WAAY,KACZC,SAAU,KACVlG,kBAAmB,KACnBmG,WAAY/d,GACZge,UAAWhe,GACX6X,WAAY,KACZoG,OAAQje,GACRke,cAAe,KACfC,cAAe,KACfC,QAASpe,GACTqe,UAAW,KACXvG,cAAe,KACfwG,cAAe,KACfC,YAAa,KACbC,KAAM,KACNC,MAAO,KACPC,KAAM1e,GACN2e,GAAI,KACJC,SAAU,KACV7G,UAAW/X,GACXzD,UAAW2D,GACX2e,KAAM,KACN7G,SAAU,KACV8G,cAAe,KACf7G,SAAU,KACVnD,MAAO,KACPoD,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChB3Q,QAAS,KACTqX,kBAAmB,KACnBC,iBAAkB,KAClBjX,YAAa,KACbkX,OAAQ,KACR7hB,GAAI,KACJ8hB,GAAI,KACJxlB,EAAG,KACH4e,SAAU,KACV6G,cAAe,KACfC,QAASpf,GACTqf,gBAAiBrf,GACjBjF,UAAW,KACXgD,QAAS,KACTuhB,IAAK,KACLC,QAASvf,GACTuY,iBAAkB,KAClBhQ,SAAU,GACViX,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAW5f,GACXwY,iBAAkB,KAClBve,IAAK,KACLgb,MAAO,KACP4K,SAAU7f,GACV8f,0BAA2B,KAC3BC,KAAM,KACNtH,YAAazY,GACb0Y,SAAU,KACVsH,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbvH,WAAY,KACZC,aAAc,KACduH,UAAW,KACXC,eAAgB,KAChBvH,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZkH,OAAQ,KACRC,GAAI,KACJC,KAAM,KACNC,GAAI,KACJC,GAAI,KACJC,GAAIzgB,GACJ0gB,GAAI1gB,GACJmZ,UAAWnZ,GACXoZ,2BAA4B,KAC5BC,yBAA0B,KAC1BsH,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACfC,QAAS,KACTC,QAAShhB,GACTihB,kBAAmB,KACnBC,WAAY,KACZ7iB,OAAQ,KACRgL,KAAM,KACNC,SAAU,KACViQ,UAAWvZ,GACXwZ,aAAcxZ,GACdyZ,aAAczZ,GACdyJ,GAAI,KACJ0X,YAAanhB,GACb0Z,eAAgB,KAChB0H,kBAAmB,KACnB9kB,GAAI,KACJ+kB,IAAK,KACLC,UAAWthB,GACXuhB,EAAGvhB,GACHwhB,GAAIxhB,GACJyhB,GAAIzhB,GACJ0hB,GAAI1hB,GACJ2hB,GAAI3hB,GACJ4hB,aAAczhB,GACd0hB,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTzX,KAAM,KACN0X,aAAc,KACdvI,cAAe,KACfC,cAAe,KACfuI,kBAAmBniB,GACnBoiB,MAAO,KACPvI,UAAW,KACXC,UAAW,KACXC,YAAa,KACbsI,aAAc,KACdC,YAAa,KACbC,YAAa,KACb5hB,KAAM,KACN6hB,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACd3X,IAAK,KACLE,MAAO,KACP0X,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAW7iB,GACX8iB,UAAW,KACX5X,OAAQ,KACRC,IAAK,KACL4X,KAAM,KACN1qB,KAAM,KACN2hB,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZuI,WAAY,KACZC,SAAU,KACVC,OAAQ,KACRxX,QAAS,KACTgP,WAAY,KACZ/O,aAAc,KACdG,cAAe,KACf6O,QAAS,KACTzO,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTjS,QAAS,KACTqS,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXqN,MAAO,KACPpN,QAAS,KACTC,QAAS,KACTC,QAAS,KACTmN,UAAW,KACXC,WAAY,KACZlN,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACX+L,aAAc,KACd9L,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdqL,SAAU,KACVnL,QAAS,KACTC,SAAU,KACVC,SAAU,KACVG,SAAU,KACVC,UAAW,KACXC,SAAU,KACV6K,OAAQ,KACR3K,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXmK,OAAQ,KACRiI,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,OAAQ,KACRC,YAAa,KACbC,OAAQ,KACRC,SAAU,KACVC,QAAS,KACTvI,iBAAkBnb,GAClBob,kBAAmBpb,GACnBqb,WAAY,KACZC,QAAS,KACTqI,KAAM,KACNC,WAAY5jB,GACZ6jB,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACP5S,KAAMlR,GACN+jB,MAAO,KACPvG,cAAe,KACfnC,cAAe,KACf2I,OAAQ,KACRC,UAAWnkB,GACXokB,UAAWpkB,GACXqkB,UAAWrkB,GACXskB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACXvlB,SAAUiB,GACVukB,EAAG,KACHC,OAAQ,KACR9S,eAAgB,KAChB+S,KAAM,KACNC,KAAM,KACN/S,IAAK3R,GACLgW,IAAKhW,GACLqb,gBAAiB,KACjBsJ,YAAa,KACbC,UAAW,KACXC,mBAAoB7kB,GACpB8kB,iBAAkB9kB,GAClB+kB,cAAe/kB,GACfglB,gBAAiBhlB,GACjBilB,SAAU,KACVC,QAAS,KACTC,OAAQ,KACRC,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACNlK,eAAgB,KAChBmK,KAAM,KACNC,MAAO,KACPC,aAAc,KACdC,iBAAkB/lB,GAClBgmB,iBAAkBhmB,GAClBimB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACb7K,UAAW,KACXC,YAAa,KACbC,sBAAuB5b,GACvB6b,uBAAwB7b,GACxBwmB,OAAQ,KACRC,OAAQ,KACR3K,gBAAiB3b,GACjB4b,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkBlc,GAClBmc,cAAenc,GACfoc,YAAa,KACbhgB,MAAO,KACPsqB,aAAc1mB,GACd2mB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgB7mB,GAChBkT,SAAUrT,GACVinB,YAAa,KACb9uB,OAAQ,KACR+uB,QAASlnB,GACTmnB,QAASnnB,GACTqc,WAAY,KACZC,eAAgB,KAChBC,cAAe,KACf6K,WAAY,KACZzJ,cAAe,KACfrK,MAAO,KACP+T,kBAAmB,KACnB7rB,KAAM,KACNihB,OAAQtc,GACRmnB,GAAI,KACJhmB,UAAW,KACXkb,gBAAiB,KACjB+K,GAAI,KACJC,GAAI,KACJ9K,kBAAmB1c,GACnB2c,mBAAoB3c,GACpBynB,QAAS,KACT7K,YAAa,KACbC,aAAc,KACdC,WAAY9c,GACZe,OAAQ,KACRgc,YAAa/c,GACbkd,cAAeld,GACfmd,aAAc,KACdH,SAAUhd,GACVid,aAAcjd,GACd6W,QAAS,KACTuG,SAAUpd,GACVqd,YAAard,GACbsd,YAAatd,GACbvG,QAAS,KACTiuB,WAAY,KACZC,WAAY,KACZ1pB,MAAO,KACP2pB,OAAQ,KACRrK,YAAa,KACbC,YAAa,KACbqK,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBvK,QAASzd,GACTioB,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBC,EAAG,KACHC,WAAY,QCpiBH,GAAOhpB,EAAM,CAAC6C,GAAKV,GAAOgB,GAAOG,GAAMkD,IAAW,QAClD,GAAMxG,EAAM,CAAC6C,GAAKV,GAAOgB,GAAOG,GAAM8U,IAAU,OCTvD6Q,GAAQ,kBACRC,GAAO,UACPC,GAAM,SA+CZ,SAASC,GAAMC,GACb,MAAO,IAAMA,EAAGjpB,aAClB,CAMA,SAASkpB,GAAUD,GACjB,OAAOA,EAAGE,OAAO,GAAGC,aACtB,CC1DO,MAAMC,GAAc,CACzBtU,QAAS,UACT6D,SAAU,WACVrO,OAAQ,SACR6R,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClBO,OAAQ,SACR7a,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXS,WAAY,c,eCvBd,GAAe,YAAyB,GC0BhBqmB,GAAM,OAAvB,MAUMC,GAAaD,GAAM,SAUhC,SAASA,GAAMxtB,GACb,OAQA,SAAe0tB,GACb,MAAMF,EAASE,GAAQA,EAAKrsB,UAAYqsB,EAAKrsB,SAASrB,IAAU,CAAC,EAEjE,GACwB,iBAAfwtB,EAAMG,MACbH,EAAMG,KAAO,GACW,iBAAjBH,EAAMI,QACbJ,EAAMI,OAAS,EAEf,MAAO,CACLD,KAAMH,EAAMG,KACZC,OAAQJ,EAAMI,OACdlG,OAC0B,iBAAjB8F,EAAM9F,QAAuB8F,EAAM9F,QAAU,EAChD8F,EAAM9F,YACNmG,EAGZ,CACF,CCzCO,SAASC,GAAkB9wB,GAEhC,OAAKA,GAA0B,iBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5B,GAASA,EAAMqE,UAIpB,UAAWrE,GAAS,QAASA,EACxB,GAASA,GAId,SAAUA,GAAS,WAAYA,EAC1B,GAAMA,GAIR,GAnBE,EAoBX,CAMA,SAAS,GAAMwwB,GACb,OAAOxpB,GAAMwpB,GAASA,EAAMG,MAAQ,IAAM3pB,GAAMwpB,GAASA,EAAMI,OACjE,CAMA,SAAS,GAASG,GAChB,OAAO,GAAMA,GAAOA,EAAIzvB,OAAS,IAAM,GAAMyvB,GAAOA,EAAItvB,IAC1D,CAMA,SAASuF,GAAMhH,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCvDO,MAAMgxB,WAAqBC,MAwDhC,WAAAxxB,CAAYyxB,EAAeC,EAAwBnG,GACjD5iB,QAEsC,iBAA3B+oB,IACTnG,EAASmG,EACTA,OAAyBN,GAI3B,IAAIO,EAAS,GAETxxB,EAAU,CAAC,EACXyxB,GAAc,EAwClB,GAtCIF,IAMAvxB,EAHA,SAAUuxB,GACV,WAAYA,GAMZ,UAAWA,GACX,QAASA,EALC,CAACG,MAAOH,GAUX,SAAUA,EACP,CACRI,UAAW,CAACJ,GACZG,MAAOH,EAAuB9sB,UAKtB,IAAI8sB,IAIW,iBAAlBD,EACTE,EAASF,GAGDtxB,EAAQ4xB,OAASN,IACzBG,GAAc,EACdD,EAASF,EAAcO,QACvB7xB,EAAQ4xB,MAAQN,IAGbtxB,EAAQ8xB,SAAW9xB,EAAQ+xB,QAA4B,iBAAX3G,EAAqB,CACpE,MAAMhkB,EAAQgkB,EAAO4G,QAAQ,MAEd,IAAX5qB,EACFpH,EAAQ8xB,OAAS1G,GAEjBprB,EAAQ+xB,OAAS3G,EAAO7hB,MAAM,EAAGnC,GACjCpH,EAAQ8xB,OAAS1G,EAAO7hB,MAAMnC,EAAQ,GAE1C,CAEA,IAAKpH,EAAQ0xB,OAAS1xB,EAAQ2xB,WAAa3xB,EAAQ2xB,UAAW,CAC5D,MAAMM,EAASjyB,EAAQ2xB,UAAU3xB,EAAQ2xB,UAAU1wB,OAAS,GAExDgxB,IACFjyB,EAAQ0xB,MAAQO,EAAOxtB,SAE3B,CAEA,MAAM/C,EACJ1B,EAAQ0xB,OAAS,UAAW1xB,EAAQ0xB,MAChC1xB,EAAQ0xB,MAAMhwB,MACd1B,EAAQ0xB,MAQdzqB,KAAK0qB,UAAY3xB,EAAQ2xB,gBAAaV,EAOtChqB,KAAK2qB,MAAQ5xB,EAAQ4xB,YAASX,EAO9BhqB,KAAK+pB,OAAStvB,EAAQA,EAAMsvB,YAASC,EAWrChqB,KAAKirB,WAAQjB,EAObhqB,KAAKkrB,KAQLlrB,KAAK4qB,QAAUL,EAOfvqB,KAAK8pB,KAAOrvB,EAAQA,EAAMqvB,UAAOE,EASjChqB,KAAKhH,KAAOixB,GAAkBlxB,EAAQ0xB,QAAU,MAOhDzqB,KAAKyqB,MAAQ1xB,EAAQ0xB,YAAST,EAO9BhqB,KAAKuqB,OAASvqB,KAAK4qB,QAOnB5qB,KAAK6qB,OAAS9xB,EAAQ8xB,aAAUb,EAOhChqB,KAAK8qB,OAAS/xB,EAAQ+xB,aAAUd,EAWhChqB,KAAKmrB,MACHX,GAAezxB,EAAQ4xB,OAAwC,iBAAxB5xB,EAAQ4xB,MAAMQ,MACjDpyB,EAAQ4xB,MAAMQ,MACd,GAYNnrB,KAAKorB,OAOLprB,KAAKqrB,SAOLrrB,KAAKsrB,KAULtrB,KAAKurB,GAEP,EAGFpB,GAAavyB,UAAUszB,KAAO,GAC9Bf,GAAavyB,UAAUoB,KAAO,GAC9BmxB,GAAavyB,UAAU2yB,OAAS,GAChCJ,GAAavyB,UAAUgzB,QAAU,GACjCT,GAAavyB,UAAUuzB,MAAQ,GAC/BhB,GAAavyB,UAAUmyB,YAASC,EAChCG,GAAavyB,UAAUkyB,UAAOE,EAC9BG,GAAavyB,UAAU8yB,eAAYV,EACnCG,GAAavyB,UAAU+yB,WAAQX,EAC/BG,GAAavyB,UAAUqzB,WAAQjB,EAC/BG,GAAavyB,UAAU6yB,WAAQT,EAC/BG,GAAavyB,UAAUizB,YAASb,EAChCG,GAAavyB,UAAUkzB,YAASd,ECvShC,MAAM,GAAM,CAAC,EAAEnyB,eAGT2zB,GAAW,IAAIC,IAEf,GAAM,SACNC,GAAgB,YAahBC,GAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAE7DC,GAAmB,IAAID,IAAI,CAAC,KAAM,OAElCE,GAAO,0DAcN,SAASC,GAAaC,EAAMjzB,GACjC,IAAKA,QAAgCixB,IAArBjxB,EAAQkzB,SACtB,MAAM,IAAIC,UAAU,kCAGtB,MAAMC,EAAWpzB,EAAQozB,eAAYnC,EAErC,IAAIpoB,EAEJ,GAAI7I,EAAQqzB,YAAa,CACvB,GAA8B,mBAAnBrzB,EAAQszB,OACjB,MAAM,IAAIH,UACR,yDAIJtqB,EA8TJ,SAA2BuqB,EAAUE,GACnC,OAAOzqB,EAEP,SAASA,EAAOioB,EAAM1tB,EAAMrB,EAAOrC,GAEjC,MAAM6zB,EAAmBj0B,MAAMF,QAAQ2C,EAAMK,UACvCwuB,EAAQC,GAAWC,GACzB,OAAOwC,EACLlwB,EACArB,EACArC,EACA6zB,EACA,CACEC,aAAc5C,EAAQA,EAAMI,OAAS,OAAIC,EACzCwC,SAAUL,EACVM,WAAY9C,EAAQA,EAAMG,UAAOE,QAEnCA,EAEJ,CACF,CAlVa0C,CAAkBP,EAAUpzB,EAAQszB,OAC/C,KAAO,CACL,GAA2B,mBAAhBtzB,EAAQ4C,IACjB,MAAM,IAAIuwB,UAAU,wCAGtB,GAA4B,mBAAjBnzB,EAAQ4zB,KACjB,MAAM,IAAIT,UAAU,yCAGtBtqB,EAiSJ,SAA0BS,EAAG1G,EAAKgxB,GAChC,OAAO/qB,EAEP,SAASA,EAAOS,EAAGlG,EAAMrB,EAAOrC,GAE9B,MACMm0B,EADmBv0B,MAAMF,QAAQ2C,EAAMK,UACfwxB,EAAOhxB,EACrC,OAAOlD,EAAMm0B,EAAGzwB,EAAMrB,EAAOrC,GAAOm0B,EAAGzwB,EAAMrB,EAC/C,CACF,CA1Sa+xB,CAAiBV,EAAUpzB,EAAQ4C,IAAK5C,EAAQ4zB,KAC3D,CAGA,MAAMG,EAAQ,CACZb,SAAUlzB,EAAQkzB,SAClBvB,UAAW,GACXnvB,WAAYxC,EAAQwC,YAAc,CAAC,EACnCqG,SACAmrB,yBAA0Bh0B,EAAQg0B,0BAA4B,QAC9DC,UAAWj0B,EAAQk0B,gBAAkBl0B,EAAQk0B,uBAAoBjD,EACjEmC,WACAe,mBAAoBn0B,EAAQm0B,qBAAsB,EAClDC,UAA+B,IAArBp0B,EAAQo0B,SAClBC,SAAUr0B,EAAQq0B,WAAY,EAC9BC,OAA0B,QAAlBt0B,EAAQgH,MAAkB,GAAM,GACxCutB,sBAAuBv0B,EAAQu0B,uBAAyB,MACxDC,uBAAyD,IAAlCx0B,EAAQw0B,uBAG3BtH,EAASuH,GAAIV,EAAOd,OAAMhC,GAGhC,OAAI/D,GAA4B,iBAAXA,EACZA,EAIF6G,EAAMlrB,OACXoqB,EACAc,EAAMb,SACN,CAAC9wB,SAAU8qB,QAAU+D,QACrBA,EAEJ,CAcA,SAASwD,GAAIV,EAAOjD,EAAMpxB,GACxB,MAAkB,YAAdoxB,EAAK1tB,KAqCX,SAAiB2wB,EAAOjD,EAAMpxB,GAC5B,MAAMg1B,EAAeX,EAAMO,OAC3B,IAAIA,EAASI,EAEsB,QAA/B5D,EAAK6D,QAAQrtB,eAAkD,SAAvBotB,EAAa1tB,QACvDstB,EAAS,GACTP,EAAMO,OAASA,GAGjBP,EAAMpC,UAAUiD,KAAK9D,GAErB,MAAM1tB,EAAOyxB,GAAsBd,EAAOjD,EAAK6D,SAAS,GAClD5yB,EAkPR,SAA4BgyB,EAAOjD,GAEjC,MAAM/uB,EAAQ,CAAC,EAEf,IAAI+yB,EAEA/rB,EAEJ,IAAKA,KAAQ+nB,EAAK9nB,WAChB,GAAa,aAATD,GAAuB,GAAIxJ,KAAKuxB,EAAK9nB,WAAYD,GAAO,CAC1D,MAAMmkB,EAAS6H,GAAehB,EAAOhrB,EAAM+nB,EAAK9nB,WAAWD,IAE3D,GAAImkB,EAAQ,CACV,MAAOxtB,EAAKU,GAAS8sB,EAGnB6G,EAAMS,uBACE,UAAR90B,GACiB,iBAAVU,GACP0yB,GAAiBkC,IAAIlE,EAAK6D,SAE1BG,EAAa10B,EAEb2B,EAAMrC,GAAOU,CAEjB,CACF,CAGF,GAAI00B,EAAY,EAEsB/yB,EAAMiC,QAAUjC,EAAMiC,MAAQ,CAAC,IAC7B,QAAhC+vB,EAAMQ,sBAAkC,aAAe,aAC3DO,CACJ,CAEA,OAAO/yB,CACT,CAvRgBkzB,CAAmBlB,EAAOjD,GACxC,IAAI1uB,EAAW8yB,GAAenB,EAAOjD,GAEjC8B,GAAcoC,IAAIlE,EAAK6D,WACzBvyB,EAAWA,EAASwlB,QAAO,SAAUuN,GACnC,MAAwB,iBAAVA,KvBxKM,iBADCC,EuByK0BD,GvBvKhC,SAAfC,EAAMhyB,MACJuD,EAAMyuB,EAAMh1B,OAEduG,EAAMyuB,IALL,IAAoBA,CuB0KvB,KAUF,OAPAC,GAAQtB,EAAOhyB,EAAOqB,EAAM0tB,GAC5BwE,GAAYvzB,EAAOK,GAGnB2xB,EAAMpC,UAAU4D,MAChBxB,EAAMO,OAASI,EAERX,EAAMlrB,OAAOioB,EAAM1tB,EAAMrB,EAAOrC,EACzC,CAjEW,CAAQq0B,EAAOjD,EAAMpxB,GAGZ,sBAAdoxB,EAAK1tB,MAA8C,sBAAd0tB,EAAK1tB,KA0EhD,SAAuB2wB,EAAOjD,GAC5B,GAAIA,EAAKlhB,MAAQkhB,EAAKlhB,KAAK4lB,QAAUzB,EAAME,UAAW,CACpD,MACMwB,EADU3E,EAAKlhB,KAAK4lB,OACCE,KAAK,GAIhC,OAHOD,EAAWryB,KAIhB2wB,EAAME,UAAU0B,mBAAmBF,EAAWA,WAElD,CAEAG,GAAY7B,EAAOjD,EAAKrsB,SAC1B,CAtFWoxB,CAAc9B,EAAOjD,GAGZ,sBAAdA,EAAK1tB,MAA8C,sBAAd0tB,EAAK1tB,KAsHhD,SAAuB2wB,EAAOjD,EAAMpxB,GAClC,MAAMg1B,EAAeX,EAAMO,OAC3B,IAAIA,EAASI,EAEK,QAAd5D,EAAK7wB,MAAyC,SAAvBy0B,EAAa1tB,QACtCstB,EAAS,GACTP,EAAMO,OAASA,GAGjBP,EAAMpC,UAAUiD,KAAK9D,GAErB,MAAM1tB,EACU,OAAd0tB,EAAK7wB,KACD8zB,EAAMb,SACN2B,GAAsBd,EAAOjD,EAAK7wB,MAAM,GACxC8B,EAuMR,SAA+BgyB,EAAOjD,GAEpC,MAAM/uB,EAAQ,CAAC,EAEf,IAAK,MAAMyF,KAAaspB,EAAK3nB,WAC3B,GAAuB,8BAAnB3B,EAAUpE,KACZ,GAAIoE,EAAUoI,MAAQpI,EAAUoI,KAAK4lB,QAAUzB,EAAME,UAAW,CAC9D,MACMwB,EADUjuB,EAAUoI,KAAK4lB,OACJE,KAAK,GACzBD,EAAWryB,KAClB,MAAM0yB,EAAmBL,EAAWA,WAC7BK,EAAiB1yB,KACxB,MAAM0D,EAAWgvB,EAAiB9sB,WAAW,GACtClC,EAAS1D,KAEhBxE,OAAO4F,OACLzC,EACAgyB,EAAME,UAAU0B,mBAAmB7uB,EAASivB,UAEhD,MACEH,GAAY7B,EAAOjD,EAAKrsB,cAErB,CAEL,MAAMxE,EAAOuH,EAAUvH,KAEvB,IAAIG,EAEJ,GAAIoH,EAAUpH,OAAoC,iBAApBoH,EAAUpH,MACtC,GACEoH,EAAUpH,MAAMwP,MAChBpI,EAAUpH,MAAMwP,KAAK4lB,QACrBzB,EAAME,UACN,CACA,MACMwB,EADUjuB,EAAUpH,MAAMwP,KAAK4lB,OACVE,KAAK,GACzBD,EAAWryB,KAClBhD,EAAQ2zB,EAAME,UAAU0B,mBAAmBF,EAAWA,WACxD,MACEG,GAAY7B,EAAOjD,EAAKrsB,eAG1BrE,EAA4B,OAApBoH,EAAUpH,OAAwBoH,EAAUpH,MAItD2B,EAAM9B,GAA0C,CAClD,CAGF,OAAO8B,CACT,CA1PgBi0B,CAAsBjC,EAAOjD,GACrC1uB,EAAW8yB,GAAenB,EAAOjD,GASvC,OAPAuE,GAAQtB,EAAOhyB,EAAOqB,EAAM0tB,GAC5BwE,GAAYvzB,EAAOK,GAGnB2xB,EAAMpC,UAAU4D,MAChBxB,EAAMO,OAASI,EAERX,EAAMlrB,OAAOioB,EAAM1tB,EAAMrB,EAAOrC,EACzC,CA/IWu2B,CAAclC,EAAOjD,EAAMpxB,GAGlB,aAAdoxB,EAAK1tB,KA2FX,SAAgB2wB,EAAOjD,GACrB,GAAIA,EAAKlhB,MAAQkhB,EAAKlhB,KAAK4lB,QAAUzB,EAAME,UAEzC,OACEF,EAAME,UAAUiC,gBAAgBpF,EAAKlhB,KAAK4lB,QAI9CI,GAAY7B,EAAOjD,EAAKrsB,SAC1B,CAnGW0xB,CAAOpC,EAAOjD,GAGL,SAAdA,EAAK1tB,KAsJX,SAAc2wB,EAAOjD,EAAMpxB,GAEzB,MAAMqC,EAAQ,CAAC,EAIf,OAFAuzB,GAAYvzB,EAAOmzB,GAAenB,EAAOjD,IAElCiD,EAAMlrB,OAAOioB,EAAMiD,EAAMb,SAAUnxB,EAAOrC,EACnD,CA5JW02B,CAAKrC,EAAOjD,EAAMpxB,GAGT,SAAdoxB,EAAK1tB,KAqKX,SAAckG,EAAGwnB,GACf,OAAOA,EAAK1wB,KACd,CAtKW,CAAK2zB,EAAOjD,QADrB,CAGF,CAoLA,SAASuE,GAAQtB,EAAOhyB,EAAOqB,EAAM0tB,GAEf,iBAAT1tB,GAAqBA,IAAS2wB,EAAMb,UAAYa,EAAMM,WAC/DtyB,EAAM+uB,KAAOA,EAEjB,CAYA,SAASwE,GAAYvzB,EAAOK,GAC1B,GAAIA,EAASnB,OAAS,EAAG,CACvB,MAAMb,EAAQgC,EAASnB,OAAS,EAAImB,EAAWA,EAAS,GAEpDhC,IACF2B,EAAMK,SAAWhC,EAErB,CACF,CA+KA,SAAS80B,GAAenB,EAAOjD,GAE7B,MAAM1uB,EAAW,GACjB,IAAIgF,GAAS,EAIb,MAAMivB,EAAetC,EAAMK,SAAW,IAAI1B,IAAQD,GAElD,OAASrrB,EAAQ0pB,EAAK1uB,SAASnB,QAAQ,CACrC,MAAMk0B,EAAQrE,EAAK1uB,SAASgF,GAE5B,IAAI1H,EAEJ,GAAIq0B,EAAMK,SAAU,CAClB,MAAMn0B,EACW,YAAfk1B,EAAM/xB,KACF+xB,EAAMR,QACS,sBAAfQ,EAAM/xB,MACW,sBAAf+xB,EAAM/xB,KACN+xB,EAAMl1B,UACNgxB,EAER,GAAIhxB,EAAM,CACR,MAAMq2B,EAAQD,EAAaE,IAAIt2B,IAAS,EACxCP,EAAMO,EAAO,IAAMq2B,EACnBD,EAAaG,IAAIv2B,EAAMq2B,EAAQ,EACjC,CACF,CAEA,MAAMpJ,EAASuH,GAAIV,EAAOoB,EAAOz1B,QAClBuxB,IAAX/D,GAAsB9qB,EAASwyB,KAAK1H,EAC1C,CAEA,OAAO9qB,CACT,CAcA,SAAS2yB,GAAehB,EAAOhrB,EAAM3I,GACnC,MAAM6I,EN1jBD,SAAcqrB,EAAQl0B,GAC3B,MAAM2G,EAASM,EAAUjH,GACzB,IAAI2I,EAAO3I,EACPq2B,EAAOlvB,EAEX,GAAIR,KAAUutB,EAAOvtB,OACnB,OAAOutB,EAAOxtB,SAASwtB,EAAOvtB,OAAOA,IAGvC,GAAIA,EAAO9F,OAAS,GAA4B,SAAvB8F,EAAOwC,MAAM,EAAG,IAAiB4mB,GAAM1pB,KAAKrG,GAAQ,CAE3E,GAAwB,MAApBA,EAAMqwB,OAAO,GAAY,CAE3B,MAAMpuB,EAAOjC,EAAMmJ,MAAM,GAAG3C,QAAQwpB,GAAMI,IAC1CznB,EAAO,OAAS1G,EAAKouB,OAAO,GAAGC,cAAgBruB,EAAKkH,MAAM,EAC5D,KAAO,CAEL,MAAMlH,EAAOjC,EAAMmJ,MAAM,GAEzB,IAAK6mB,GAAK3pB,KAAKpE,GAAO,CACpB,IAAIq0B,EAASr0B,EAAKuE,QAAQypB,GAAKC,IAEN,MAArBoG,EAAOjG,OAAO,KAChBiG,EAAS,IAAMA,GAGjBt2B,EAAQ,OAASs2B,CACnB,CACF,CAEAD,EAAOnuB,EACT,CAEA,OAAO,IAAImuB,EAAK1tB,EAAM3I,EACxB,CMwhBeu2B,CAAK5C,EAAMO,OAAQvrB,GAGhC,KACE3I,SAEkB,iBAAVA,GAAsBw2B,OAAOC,MAAMz2B,IAH7C,CAeA,GAPId,MAAMF,QAAQgB,KAGhBA,EAAQ6I,EAAKpB,eC7hBV,SAAmBc,EAAQ3I,GAChC,MAAM82B,EAAW92B,GAAW,CAAC,EAK7B,OAF4C,KAA9B2I,EAAOA,EAAO1H,OAAS,GAAY,IAAI0H,EAAQ,IAAMA,GAGhEouB,MACED,EAASE,SAAW,IAAM,IACzB,MACsB,IAArBF,EAASG,QAAoB,GAAK,MAEtCC,MACL,CDghBkC,CAAO92B,GAAgBA,EEnkBzC22B,KAAK,KAAKG,QFukBF,UAAlBjuB,EAAKnC,SAAsB,CAC7B,IAAIqwB,EACe,iBAAV/2B,EAAqBA,EA6BlC,SAAoB2zB,EAAO3zB,GAEzB,MAAM8sB,EAAS,CAAC,EAEhB,IACE,GAAc9sB,EAAOg3B,EACvB,CAAE,MAAOC,GACP,IAAKtD,EAAMI,mBAAoB,CAC7B,MAAMvC,EAA6B,EAC7BC,EAAU,IAAIT,GAAa,iCAAkC,CACjEO,UAAWoC,EAAMpC,UACjBC,QACAE,OAAQ,QACRC,OAAQ,6BAKV,MAHAF,EAAQM,KAAO4B,EAAMX,eAAYnC,EACjCY,EAAQW,IAAMO,GAAO,gCAEflB,CACR,CACF,CAEA,OAAO3E,EAaP,SAASkK,EAASn3B,EAAMG,GACtB,IAAIV,EAAMO,EAEc,OAApBP,EAAI6J,MAAM,EAAG,KACS,SAApB7J,EAAI6J,MAAM,EAAG,KAAe7J,EAAM,MAAQA,EAAI6J,MAAM,IACxD7J,EAAMA,EAAIkH,QAAQ+rB,GAAe2E,KAGnCpK,EAAOxtB,GAAOU,CAChB,CACF,CA1E0Cm3B,CAAWxD,EAAOyD,OAAOp3B,IAM/D,MAJoC,QAAhC2zB,EAAMQ,wBACR4C,EAqKN,SAAoCM,GAElC,MAAMC,EAAY,CAAC,EAEnB,IAAIvP,EAEJ,IAAKA,KAAQsP,EACP,GAAIl4B,KAAKk4B,EAAWtP,KACtBuP,EAAUC,GAA0BxP,IAASsP,EAAUtP,IAI3D,OAAOuP,CACT,CAlLoBE,CAA2BT,IAGpC,CAAC,QAASA,EACnB,CAEA,MAAO,CAC8B,UAAnCpD,EAAMC,0BAAwC/qB,EAAKjC,MAC/C2pB,GAAY1nB,EAAKnC,WAAamC,EAAKnC,SACnCmC,EAAKzB,UACTpH,EAxBF,CA0BF,CAyEA,SAASy0B,GAAsBd,EAAO9zB,EAAM43B,GAE1C,IAAI3K,EAEJ,GAAK2K,EAEE,GAAI53B,EAAKmJ,SAAS,KAAM,CAC7B,MAAM0uB,EAAc73B,EAAK83B,MAAM,KAC/B,IAEIjH,EAFA1pB,GAAS,EAIb,OAASA,EAAQ0wB,EAAY72B,QAAQ,CAEnC,MAAM8H,EAAO,EAAiB+uB,EAAY1wB,IACtC,CAAChE,KAAM,aAAcnD,KAAM63B,EAAY1wB,IACvC,CAAChE,KAAM,UAAWhD,MAAO03B,EAAY1wB,IACzC0pB,EAAOA,EACH,CACE1tB,KAAM,mBACNwa,OAAQkT,EACRhqB,SAAUiC,EACVivB,SAAUC,QAAQ7wB,GAAuB,YAAd2B,EAAK3F,MAChC80B,UAAU,GAEZnvB,CACN,CAGAmkB,EAAS4D,CACX,MACE5D,EACE,EAAiBjtB,KAAU,SAASwG,KAAKxG,GACrC,CAACmD,KAAM,aAAcnD,QACrB,CAACmD,KAAM,UAAWhD,MAAOH,QA7B/BitB,EAAS,CAAC9pB,KAAM,UAAWhD,MAAOH,GAkCpC,GAAoB,YAAhBitB,EAAO9pB,KAAoB,CAC7B,MAAMnD,EAAmDitB,EAAY,MAErE,OAAO,GAAI3tB,KAAKw0B,EAAMvxB,WAAYvC,GAAQ8zB,EAAMvxB,WAAWvC,GAAQA,CACrE,CAGA,GAAI8zB,EAAME,UACR,OAAOF,EAAME,UAAU0B,mBAAmBzI,GAG5C0I,GAAY7B,EACd,CAOA,SAAS6B,GAAY7B,EAAOrC,GAC1B,MAAMG,EAAU,IAAIT,GAClB,sDACA,CACEO,UAAWoC,EAAMpC,UACjBD,QACAI,OAAQ,aACRC,OAAQ,6BAMZ,MAHAF,EAAQM,KAAO4B,EAAMX,eAAYnC,EACjCY,EAAQW,IAAMO,GAAO,qDAEflB,CACR,CA6BA,SAAS8F,GAA0BxP,GACjC,IAAI+G,EAAK/G,EAAKvhB,QAAQ,GAAKuxB,IAG3B,MADuB,QAAnBjJ,EAAG3lB,MAAM,EAAG,KAAc2lB,EAAK,IAAMA,GAClCA,CACT,CAYA,SAASoI,GAAQhuB,EAAG8uB,GAClB,OAAOA,EAAG1H,aACZ,CAUA,SAASyH,GAAO5H,GACd,MAAO,IAAMA,EAAGjpB,aAClB,CGnzBO,MAAM+wB,GAAgB,CAC3BlqB,OAAQ,CAAC,QACTgB,KAAM,CAAC,aAAc,MAAO,MAAO,KACnCS,KAAM,CAAC,UACPa,WAAY,CAAC,SAAU,SACvBQ,KAAM,CAAC,IAAK,OAAQ,OAAQ,QAC5BqnB,KAAM,CAAC,YACPzmB,OAAQ,KACRa,SAAU,CAAC,QACXsG,KAAM,CAAC,IAAK,QACZM,OAAQ,CAAC,SACT3Y,IAAK,CACH,QACA,QACA,SACA,MACA,QACA,SACA,SACA,QACA,UChBE,GAAe,CAAC,EAuCtB,SAAS,GAAIP,EAAOm4B,EAAiBC,GACnC,GAqDF,SAAcp4B,GACZ,OAAO63B,QAAQ73B,GAA0B,iBAAVA,EACjC,CAvDM0wB,CAAK1wB,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMgD,MAAoBo1B,EAAmBp4B,EAAMA,MAAX,GAGjD,GAAIm4B,GAAmB,QAASn4B,GAASA,EAAMoO,IAC7C,OAAOpO,EAAMoO,IAGf,GAAI,aAAcpO,EAChB,OAAO,GAAIA,EAAMgC,SAAUm2B,EAAiBC,EAEhD,CAEA,OAAIl5B,MAAMF,QAAQgB,GACT,GAAIA,EAAOm4B,EAAiBC,GAG9B,EACT,CAcA,SAAS,GAAI7vB,EAAQ4vB,EAAiBC,GAEpC,MAAMtL,EAAS,GACf,IAAI9lB,GAAS,EAEb,OAASA,EAAQuB,EAAO1H,QACtBisB,EAAO9lB,GAAS,GAAIuB,EAAOvB,GAAQmxB,EAAiBC,GAGtD,OAAOtL,EAAO6J,KAAK,GACrB,CCzEO,SAAS0B,GAAOnmB,EAAM5Q,EAAOg3B,EAAQC,GAC1C,MAAM92B,EAAMyQ,EAAKrR,OACjB,IAEI23B,EAFAC,EAAa,EAajB,GAPEn3B,EADEA,EAAQ,GACDA,EAAQG,EAAM,EAAIA,EAAMH,EAEzBA,EAAQG,EAAMA,EAAMH,EAE9Bg3B,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAM13B,OAAS,IACjB23B,EAAat5B,MAAM6oB,KAAKwQ,GACxBC,EAAWE,QAAQp3B,EAAOg3B,GAE1BpmB,EAAKmmB,UAAUG,QAMf,IAHIF,GAAQpmB,EAAKmmB,OAAO/2B,EAAOg3B,GAGxBG,EAAaF,EAAM13B,QACxB23B,EAAaD,EAAMpvB,MAAMsvB,EAAYA,EAAa,KAClDD,EAAWE,QAAQp3B,EAAO,GAE1B4Q,EAAKmmB,UAAUG,GACfC,GAAc,IACdn3B,GAAS,GAGf,CAkBO,SAASkzB,GAAKtiB,EAAMqmB,GACzB,OAAIrmB,EAAKrR,OAAS,GAChBw3B,GAAOnmB,EAAMA,EAAKrR,OAAQ,EAAG03B,GACtBrmB,GAEFqmB,CACT,CCnDO,MAAMI,GAOX,WAAAl5B,CAAYkF,GAEVkC,KAAKf,KAAOnB,EAAU,IAAIA,GAAW,GAErCkC,KAAK+xB,MAAQ,EACf,CAWA,GAAAzC,CAAInvB,GACF,GAAIA,EAAQ,GAAKA,GAASH,KAAKf,KAAKjF,OAASgG,KAAK+xB,MAAM/3B,OACtD,MAAM,IAAIg4B,WAAW,wBAA0B7xB,EAAQ,kCAAoCH,KAAKf,KAAKjF,OAASgG,KAAK+xB,MAAM/3B,QAAU,KAErI,OAAImG,EAAQH,KAAKf,KAAKjF,OAAegG,KAAKf,KAAKkB,GACxCH,KAAK+xB,MAAM/xB,KAAK+xB,MAAM/3B,OAASmG,EAAQH,KAAKf,KAAKjF,OAAS,EACnE,CAMA,UAAIA,GACF,OAAOgG,KAAKf,KAAKjF,OAASgG,KAAK+xB,MAAM/3B,MACvC,CASA,KAAAi4B,GAEE,OADAjyB,KAAKkyB,UAAU,GACRlyB,KAAK+xB,MAAMzD,KACpB,CAaA,KAAAhsB,CAAM7H,EAAOG,GAEX,MAAMu3B,EAAOv3B,QAAoC+0B,OAAOyC,kBAAoBx3B,EAC5E,OAAIu3B,EAAOnyB,KAAKf,KAAKjF,OACZgG,KAAKf,KAAKqD,MAAM7H,EAAO03B,GAE5B13B,EAAQuF,KAAKf,KAAKjF,OACbgG,KAAK+xB,MAAMzvB,MAAMtC,KAAK+xB,MAAM/3B,OAASm4B,EAAOnyB,KAAKf,KAAKjF,OAAQgG,KAAK+xB,MAAM/3B,OAASS,EAAQuF,KAAKf,KAAKjF,QAAQq4B,UAE9GryB,KAAKf,KAAKqD,MAAM7H,GAAO63B,OAAOtyB,KAAK+xB,MAAMzvB,MAAMtC,KAAK+xB,MAAM/3B,OAASm4B,EAAOnyB,KAAKf,KAAKjF,QAAQq4B,UACrG,CAsBA,MAAAb,CAAO/2B,EAAO83B,EAAab,GAEzB,MAAMrC,EAAQkD,GAAe,EAC7BvyB,KAAKkyB,UAAUM,KAAKC,MAAMh4B,IAC1B,MAAMi4B,EAAU1yB,KAAK+xB,MAAMP,OAAOxxB,KAAK+xB,MAAM/3B,OAASq1B,EAAOM,OAAOyC,mBAEpE,OADIV,GAAOiB,GAAY3yB,KAAKf,KAAMyyB,GAC3BgB,EAAQL,SACjB,CAUA,GAAA/D,GAEE,OADAtuB,KAAKkyB,UAAUvC,OAAOyC,mBACfpyB,KAAKf,KAAKqvB,KACnB,CAWA,IAAAX,CAAKiF,GACH5yB,KAAKkyB,UAAUvC,OAAOyC,mBACtBpyB,KAAKf,KAAK0uB,KAAKiF,EACjB,CAWA,QAAAC,CAASnB,GACP1xB,KAAKkyB,UAAUvC,OAAOyC,mBACtBO,GAAY3yB,KAAKf,KAAMyyB,EACzB,CAWA,OAAAG,CAAQe,GACN5yB,KAAKkyB,UAAU,GACflyB,KAAK+xB,MAAMpE,KAAKiF,EAClB,CAWA,WAAAE,CAAYpB,GACV1xB,KAAKkyB,UAAU,GACfS,GAAY3yB,KAAK+xB,MAAOL,EAAMW,UAChC,CAcA,SAAAH,CAAUa,GACR,KAAIA,IAAM/yB,KAAKf,KAAKjF,QAAU+4B,EAAI/yB,KAAKf,KAAKjF,QAAgC,IAAtBgG,KAAK+xB,MAAM/3B,QAAgB+4B,EAAI,GAA0B,IAArB/yB,KAAKf,KAAKjF,QACpG,GAAI+4B,EAAI/yB,KAAKf,KAAKjF,OAAQ,CAExB,MAAM04B,EAAU1yB,KAAKf,KAAKuyB,OAAOuB,EAAGpD,OAAOyC,mBAC3CO,GAAY3yB,KAAK+xB,MAAOW,EAAQL,UAClC,KAAO,CAEL,MAAMK,EAAU1yB,KAAK+xB,MAAMP,OAAOxxB,KAAKf,KAAKjF,OAASgG,KAAK+xB,MAAM/3B,OAAS+4B,EAAGpD,OAAOyC,mBACnFO,GAAY3yB,KAAKf,KAAMyzB,EAAQL,UACjC,CACF,EAeF,SAASM,GAAYtnB,EAAM0mB,GAEzB,IAAIH,EAAa,EACjB,GAAIG,EAAM/3B,OAAS,IACjBqR,EAAKsiB,QAAQoE,QAEb,KAAOH,EAAaG,EAAM/3B,QACxBqR,EAAKsiB,QAAQoE,EAAMzvB,MAAMsvB,EAAYA,EAAa,MAClDA,GAAc,GAGpB,CCrOO,SAASoB,GAAYC,GAE1B,MAAMC,EAAQ,CAAC,EACf,IAEItd,EAEAud,EAEAC,EAEAC,EAEA1B,EAEA2B,EAEAC,EAdApzB,GAAS,EAeb,MAAMqzB,EAAS,IAAI1B,GAAamB,GAChC,OAAS9yB,EAAQqzB,EAAOx5B,QAAQ,CAC9B,KAAOmG,KAAS+yB,GACd/yB,EAAQ+yB,EAAM/yB,GAMhB,GAJAyV,EAAQ4d,EAAOlE,IAAInvB,GAIfA,GAA2B,cAAlByV,EAAM,GAAGzZ,MAA0D,mBAAlCq3B,EAAOlE,IAAInvB,EAAQ,GAAG,GAAGhE,OACrEm3B,EAAY1d,EAAM,GAAG6d,WAAWD,OAChCJ,EAAa,EACTA,EAAaE,EAAUt5B,QAA4C,oBAAlCs5B,EAAUF,GAAY,GAAGj3B,OAC5Di3B,GAAc,GAEZA,EAAaE,EAAUt5B,QAA4C,YAAlCs5B,EAAUF,GAAY,GAAGj3B,MAC5D,OAASi3B,EAAaE,EAAUt5B,QACQ,YAAlCs5B,EAAUF,GAAY,GAAGj3B,MAGS,cAAlCm3B,EAAUF,GAAY,GAAGj3B,OAC3Bm3B,EAAUF,GAAY,GAAGM,6BAA8B,EACvDN,KAOR,GAAiB,UAAbxd,EAAM,GACJA,EAAM,GAAG+d,cACXh8B,OAAO4F,OAAO21B,EAAOU,GAAWJ,EAAQrzB,IACxCA,EAAQ+yB,EAAM/yB,GACdozB,GAAO,QAIN,GAAI3d,EAAM,GAAGie,WAAY,CAG5B,IAFAT,EAAajzB,EACbgzB,OAAYnJ,EACLoJ,MACLC,EAAaG,EAAOlE,IAAI8D,GACG,eAAvBC,EAAW,GAAGl3B,MAAgD,oBAAvBk3B,EAAW,GAAGl3B,OACjC,UAAlBk3B,EAAW,KACTF,IACFK,EAAOlE,IAAI6D,GAAW,GAAGh3B,KAAO,mBAElCk3B,EAAW,GAAGl3B,KAAO,aACrBg3B,EAAYC,GAMdD,IAEFvd,EAAM,GAAGhb,IAAMjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOlE,IAAI6D,GAAW,GAAG14B,OAG1Dk3B,EAAa6B,EAAOlxB,MAAM6wB,EAAWhzB,GACrCwxB,EAAWE,QAAQjc,GACnB4d,EAAOhC,OAAO2B,EAAWhzB,EAAQgzB,EAAY,EAAGxB,GAEpD,CACF,CAIA,OADAH,GAAOyB,EAAa,EAAGtD,OAAOyC,kBAAmBoB,EAAOlxB,MAAM,KACtDixB,CACV,CASA,SAASK,GAAWJ,EAAQM,GAC1B,MAAMC,EAAQP,EAAOlE,IAAIwE,GAAY,GAC/BE,EAAUR,EAAOlE,IAAIwE,GAAY,GACvC,IAAIG,EAAgBH,EAAa,EAEjC,MAAMI,EAAiB,GACjBC,EAAYJ,EAAMN,YAAcO,EAAQI,OAAOL,EAAMJ,aAAaI,EAAMt5B,OACxE45B,EAAcF,EAAUX,OAExBN,EAAQ,GAERoB,EAAO,CAAC,EAEd,IAAIC,EAEAC,EACAr0B,GAAS,EAETs0B,EAAUV,EACVW,EAAS,EACTj6B,EAAQ,EACZ,MAAMk6B,EAAS,CAACl6B,GAIhB,KAAOg6B,GAAS,CAEd,KAAOjB,EAAOlE,MAAM2E,GAAe,KAAOQ,IAG1CP,EAAevG,KAAKsG,GACfQ,EAAQhB,aACXc,EAASP,EAAQY,YAAYH,GACxBA,EAAQI,MACXN,EAAO5G,KAAK,MAEV6G,GACFL,EAAUW,WAAWL,EAAQh6B,OAE3Bg6B,EAAQf,8BACVS,EAAUY,oCAAqC,GAEjDZ,EAAUa,MAAMT,GACZE,EAAQf,8BACVS,EAAUY,wCAAqC/K,IAKnDwK,EAAWC,EACXA,EAAUA,EAAQI,IACpB,CAKA,IADAJ,EAAUV,IACD5zB,EAAQk0B,EAAYr6B,QAGD,SAA1Bq6B,EAAYl0B,GAAO,IAA+C,UAA9Bk0B,EAAYl0B,EAAQ,GAAG,IAAkBk0B,EAAYl0B,GAAO,GAAGhE,OAASk4B,EAAYl0B,EAAQ,GAAG,GAAGhE,MAAQk4B,EAAYl0B,GAAO,GAAG1F,MAAMqvB,OAASuK,EAAYl0B,GAAO,GAAGvF,IAAIkvB,OAC3MrvB,EAAQ0F,EAAQ,EAChBw0B,EAAOhH,KAAKlzB,GAEZg6B,EAAQhB,gBAAazJ,EACrByK,EAAQD,cAAWxK,EACnByK,EAAUA,EAAQI,MAqBtB,IAhBAV,EAAUX,OAAS,GAKfiB,GAEFA,EAAQhB,gBAAazJ,EACrByK,EAAQD,cAAWxK,GAEnB2K,EAAOrG,MAKTnuB,EAAQw0B,EAAO36B,OACRmG,KAAS,CACd,MAAMmC,EAAQ+xB,EAAY/xB,MAAMqyB,EAAOx0B,GAAQw0B,EAAOx0B,EAAQ,IACxD1F,EAAQy5B,EAAe5F,MAC7B4E,EAAMvF,KAAK,CAAClzB,EAAOA,EAAQ6H,EAAMtI,OAAS,IAC1Cw5B,EAAOhC,OAAO/2B,EAAO,EAAG6H,EAC1B,CAGA,IAFA4wB,EAAMb,UACNlyB,GAAS,IACAA,EAAQ+yB,EAAMl5B,QACrBs6B,EAAKI,EAASxB,EAAM/yB,GAAO,IAAMu0B,EAASxB,EAAM/yB,GAAO,GACvDu0B,GAAUxB,EAAM/yB,GAAO,GAAK+yB,EAAM/yB,GAAO,GAAK,EAEhD,OAAOm0B,CACT,CC/MA,MAAM,GAAiB,CAAC,EAAEz8B,eAUnB,SAASo9B,GAAkBC,GAEhC,MAAMC,EAAM,CAAC,EACb,IAAIh1B,GAAS,EAEb,OAASA,EAAQ+0B,EAAWl7B,QAC1Bo7B,GAAgBD,EAAKD,EAAW/0B,IAGlC,OAAOg1B,CACT,CAWA,SAASC,GAAgBD,EAAKE,GAE5B,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CACtB,MAEMp2B,GAFQ,GAAe3G,KAAK68B,EAAKG,GAAQH,EAAIG,QAAQtL,KAEpCmL,EAAIG,GAAQ,CAAC,GAE9BvD,EAAQsD,EAAUC,GAExB,IAAIhgB,EAEJ,GAAIyc,EACF,IAAKzc,KAAQyc,EAAO,CACb,GAAez5B,KAAK2G,EAAMqW,KAAOrW,EAAKqW,GAAQ,IACnD,MAAMnc,EAAQ44B,EAAMzc,GACpBigB,GAEEt2B,EAAKqW,GACLjd,MAAMF,QAAQgB,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAErD,CAEJ,CACF,CAUA,SAASo8B,GAAWC,EAAUnqB,GAC5B,IAAIlL,GAAS,EAEb,MAAMs1B,EAAS,GAEf,OAASt1B,EAAQkL,EAAKrR,SAEE,UAApBqR,EAAKlL,GAAOu1B,IAAkBF,EAAWC,GAAQ9H,KAAKtiB,EAAKlL,IAG/DqxB,GAAOgE,EAAU,EAAG,EAAGC,EACzB,CCjEO,MAAME,GAAaC,GAAW,YAcxBC,GAAoBD,GAAW,cAuB/BE,GAAaF,GAAW,uBAa9B,SAASG,GAAazgB,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,MAAM0gB,GAAaJ,GAAW,MAoBxBK,GAAgBL,GAAW,cAe3BM,GAAmBN,GAAW,kBAiBpC,SAASO,GAAmB7gB,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAWO,SAAS8gB,GAA0B9gB,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAAS+gB,GAAc/gB,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAuBO,MAAMghB,GAAqBV,GAAW,gBAsBhCW,GAAoBX,GAAW,MAQ5C,SAASA,GAAWY,GAClB,OAUA,SAAelhB,GACb,OAAgB,OAATA,GAAiBA,GAAQ,GAAKkhB,EAAMh3B,KAAK+wB,OAAOkG,aAAanhB,GACtE,CACF,CCzMO,SAASohB,GAAaC,EAASC,EAAIz6B,EAAMuP,GAC9C,MAAMmrB,EAAQnrB,EAAMA,EAAM,EAAIikB,OAAOyC,kBACrC,IAAI7e,EAAO,EACX,OAGA,SAAe+B,GACb,GAAI+gB,GAAc/gB,GAEhB,OADAqhB,EAAQz6B,MAAMC,GACP8b,EAAO3C,GAEhB,OAAOshB,EAAGthB,EACZ,EAGA,SAAS2C,EAAO3C,GACd,OAAI+gB,GAAc/gB,IAAS/B,IAASsjB,GAClCF,EAAQG,QAAQxhB,GACT2C,IAET0e,EAAQ76B,KAAKK,GACNy6B,EAAGthB,GACZ,CACF,CCtDO,MAAMjN,GAAU,CACrB0uB,SAOF,SAA2BJ,GACzB,MAAMK,EAAeL,EAAQM,QAC3Bj3B,KAAKo0B,OAAOmB,WAAW2B,gBASzB,SAAoC5hB,GAClC,GAAa,OAATA,EAEF,YADAqhB,EAAQG,QAAQxhB,GAMlB,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN46B,GAAaC,EAASK,EAAc,aAC7C,IAGA,SAA0B1hB,GAExB,OADAqhB,EAAQz6B,MAAM,aACPi7B,EAAU7hB,EACnB,IAnBA,IAAIkf,EACJ,OAAOwC,EAqBP,SAASG,EAAU7hB,GACjB,MAAMye,EAAQ4C,EAAQz6B,MAAM,YAAa,CACvCy3B,YAAa,OACba,aAMF,OAJIA,IACFA,EAASK,KAAOd,GAElBS,EAAWT,EACJprB,EAAK2M,EACd,CAGA,SAAS3M,EAAK2M,GACZ,OAAa,OAATA,GACFqhB,EAAQ76B,KAAK,aACb66B,EAAQ76B,KAAK,kBACb66B,EAAQG,QAAQxhB,IAGd6gB,GAAmB7gB,IACrBqhB,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,aACNq7B,IAITR,EAAQG,QAAQxhB,GACT3M,EACT,CACF,GC1DO,MAAM,GAAW,CACtBouB,SAYF,SAA4BJ,GAC1B,MAAMS,EAAOp3B,KAEPmrB,EAAQ,GACd,IAEIkM,EAEAC,EAEAC,EANAC,EAAY,EAOhB,OAAO/8B,EAGP,SAASA,EAAM6a,GAWb,GAAIkiB,EAAYrM,EAAMnxB,OAAQ,CAC5B,MAAM44B,EAAOzH,EAAMqM,GAEnB,OADAJ,EAAKK,eAAiB7E,EAAK,GACpB+D,EAAQM,QACbrE,EAAK,GAAG8E,aACRC,EACAC,EAHKjB,CAILrhB,EACJ,CAGA,OAAOsiB,EAAmBtiB,EAC5B,CAGA,SAASqiB,EAAiBriB,GAMxB,GALAkiB,IAKIJ,EAAKK,eAAeI,WAAY,CAClCT,EAAKK,eAAeI,gBAAa7N,EAC7BqN,GACFS,IAKF,MAAMC,EAAmBX,EAAK5D,OAAOx5B,OACrC,IAEI2vB,EAFAqO,EAAkBD,EAKtB,KAAOC,KACL,GACsC,SAApCZ,EAAK5D,OAAOwE,GAAiB,IACY,cAAzCZ,EAAK5D,OAAOwE,GAAiB,GAAG77B,KAChC,CACAwtB,EAAQyN,EAAK5D,OAAOwE,GAAiB,GAAGp9B,IACxC,KACF,CAEFq9B,EAAeT,GAGf,IAAIr3B,EAAQ43B,EACZ,KAAO53B,EAAQi3B,EAAK5D,OAAOx5B,QACzBo9B,EAAK5D,OAAOrzB,GAAO,GAAGvF,IAAMjD,OAAO4F,OAAO,CAAC,EAAGosB,GAC9CxpB,IAaF,OATAqxB,GACE4F,EAAK5D,OACLwE,EAAkB,EAClB,EACAZ,EAAK5D,OAAOlxB,MAAMy1B,IAIpBX,EAAK5D,OAAOx5B,OAASmG,EACdy3B,EAAmBtiB,EAC5B,CACA,OAAO7a,EAAM6a,EACf,CAGA,SAASsiB,EAAmBtiB,GAM1B,GAAIkiB,IAAcrM,EAAMnxB,OAAQ,CAI9B,IAAKq9B,EACH,OAAOa,EAAkB5iB,GAM3B,GAAI+hB,EAAUc,kBAAoBd,EAAUc,iBAAiBC,SAC3D,OAAOC,EAAU/iB,GAQnB8hB,EAAKkB,UAAYtH,QACfqG,EAAUc,mBAAqBd,EAAUkB,8BAE7C,CAIA,OADAnB,EAAKK,eAAiB,CAAC,EAChBd,EAAQl1B,MACb+2B,GACAC,EACAC,EAHK/B,CAILrhB,EACJ,CAGA,SAASmjB,EAAqBnjB,GAG5B,OAFI+hB,GAAWS,IACfG,EAAeT,GACRU,EAAkB5iB,EAC3B,CAGA,SAASojB,EAAsBpjB,GAG7B,OAFA8hB,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MAAQ0N,IAAcrM,EAAMnxB,OACxDu9B,EAAkBH,EAAKwB,MAAM/U,OACtBwU,EAAU/iB,EACnB,CAGA,SAAS4iB,EAAkB5iB,GAGzB,OADA8hB,EAAKK,eAAiB,CAAC,EAChBd,EAAQM,QACbuB,GACAK,EACAR,EAHK1B,CAILrhB,EACJ,CAGA,SAASujB,EAAkBvjB,GAIzB,OAHAkiB,IACArM,EAAMwC,KAAK,CAACyJ,EAAKe,iBAAkBf,EAAKK,iBAEjCS,EAAkB5iB,EAC3B,CAGA,SAAS+iB,EAAU/iB,GACjB,OAAa,OAATA,GACE+hB,GAAWS,IACfG,EAAe,QACftB,EAAQG,QAAQxhB,KAGlB+hB,EAAYA,GAAaD,EAAKhD,OAAO0E,KAAK1B,EAAKwB,OAC/CjC,EAAQz6B,MAAM,YAAa,CACzBy3B,YAAa,OACba,SAAU8C,EACV7D,WAAY4D,IAEP0B,EAAazjB,GACtB,CAGA,SAASyjB,EAAazjB,GACpB,OAAa,OAATA,GACF0jB,EAAarC,EAAQ76B,KAAK,cAAc,GACxCm8B,EAAe,QACftB,EAAQG,QAAQxhB,IAGd6gB,GAAmB7gB,IACrBqhB,EAAQG,QAAQxhB,GAChB0jB,EAAarC,EAAQ76B,KAAK,cAE1B07B,EAAY,EACZJ,EAAKkB,eAAYtO,EACVvvB,IAETk8B,EAAQG,QAAQxhB,GACTyjB,EACT,CAOA,SAASC,EAAajF,EAAOkF,GAC3B,MAAM1E,EAAS6C,EAAKxC,YAAYb,GAyChC,GAxCIkF,GAAK1E,EAAO5G,KAAK,MACrBoG,EAAMS,SAAW8C,EACbA,IAAYA,EAAWzC,KAAOd,GAClCuD,EAAavD,EACbsD,EAAUvC,WAAWf,EAAMt5B,OAC3B48B,EAAUrC,MAAMT,GAmCZ6C,EAAKhD,OAAOuE,KAAK5E,EAAMt5B,MAAMqvB,MAAO,CACtC,IAAI3pB,EAAQk3B,EAAU7D,OAAOx5B,OAC7B,KAAOmG,KACL,GAEEk3B,EAAU7D,OAAOrzB,GAAO,GAAG1F,MAAMopB,OAAS0T,KAExCF,EAAU7D,OAAOrzB,GAAO,GAAGvF,KAE3By8B,EAAU7D,OAAOrzB,GAAO,GAAGvF,IAAIipB,OAAS0T,GAI1C,OAMJ,MAAMQ,EAAmBX,EAAK5D,OAAOx5B,OACrC,IAEIk/B,EAEAvP,EAJAqO,EAAkBD,EAOtB,KAAOC,KACL,GACsC,SAApCZ,EAAK5D,OAAOwE,GAAiB,IACY,cAAzCZ,EAAK5D,OAAOwE,GAAiB,GAAG77B,KAChC,CACA,GAAI+8B,EAAM,CACRvP,EAAQyN,EAAK5D,OAAOwE,GAAiB,GAAGp9B,IACxC,KACF,CACAs+B,GAAO,CACT,CAMF,IAJAjB,EAAeT,GAGfr3B,EAAQ43B,EACD53B,EAAQi3B,EAAK5D,OAAOx5B,QACzBo9B,EAAK5D,OAAOrzB,GAAO,GAAGvF,IAAMjD,OAAO4F,OAAO,CAAC,EAAGosB,GAC9CxpB,IAIFqxB,GACE4F,EAAK5D,OACLwE,EAAkB,EAClB,EACAZ,EAAK5D,OAAOlxB,MAAMy1B,IAIpBX,EAAK5D,OAAOx5B,OAASmG,CACvB,CACF,CAMA,SAAS83B,EAAe1kB,GACtB,IAAIpT,EAAQgrB,EAAMnxB,OAGlB,KAAOmG,KAAUoT,GAAM,CACrB,MAAM4lB,EAAQhO,EAAMhrB,GACpBi3B,EAAKK,eAAiB0B,EAAM,GAC5BA,EAAM,GAAGr9B,KAAKxD,KAAK8+B,EAAMT,EAC3B,CACAxL,EAAMnxB,OAASuZ,CACjB,CACA,SAASukB,IACPT,EAAUrC,MAAM,CAAC,OACjBsC,OAAatN,EACbqN,OAAYrN,EACZoN,EAAKK,eAAeI,gBAAa7N,CACnC,CACF,GArVMwO,GAAqB,CACzBzB,SA0VF,SAA2BJ,EAASC,EAAIwC,GAGtC,OAAO1C,GACLC,EACAA,EAAQM,QAAQj3B,KAAKo0B,OAAOmB,WAAW8D,SAAUzC,EAAIwC,GACrD,aACAp5B,KAAKo0B,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAE/E,GCnXO,MAAMwP,GAAY,CACvBzC,SAQF,SAA2BJ,EAASC,EAAIwC,GACtC,OAgBA,SAAe9jB,GACb,OAAO+gB,GAAc/gB,GAAQohB,GAAaC,EAAS8C,EAAO,aAA7B/C,CAA2CphB,GAAQmkB,EAAMnkB,EACxF,EAgBA,SAASmkB,EAAMnkB,GACb,OAAgB,OAATA,GAAiB6gB,GAAmB7gB,GAAQshB,EAAGthB,GAAQ8jB,EAAI9jB,EACpE,CACF,EA7CEokB,SAAS,GCIJ,MAAM,GAAU,CACrB3C,SAyBF,SAAyBJ,EAASC,GAEhC,IAAIpC,EACJ,OAYA,SAAoBlf,GAKlB,OAJAqhB,EAAQz6B,MAAM,WACds4B,EAAWmC,EAAQz6B,MAAM,eAAgB,CACvCy3B,YAAa,YAERgG,EAAYrkB,EACrB,EAYA,SAASqkB,EAAYrkB,GACnB,OAAa,OAATA,EACKskB,EAAWtkB,GAKhB6gB,GAAmB7gB,GACdqhB,EAAQl1B,MAAMo4B,GAAuBC,EAAiBF,EAAtDjD,CAAkErhB,IAI3EqhB,EAAQG,QAAQxhB,GACTqkB,EACT,CAOA,SAASC,EAAWtkB,GAGlB,OAFAqhB,EAAQ76B,KAAK,gBACb66B,EAAQ76B,KAAK,WACN86B,EAAGthB,EACZ,CAOA,SAASwkB,EAAgBxkB,GAQvB,OAPAqhB,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,gBACb04B,EAASK,KAAO8B,EAAQz6B,MAAM,eAAgB,CAC5Cy3B,YAAa,UACba,aAEFA,EAAWA,EAASK,KACb8E,CACT,CACF,EAnGEI,QAeF,SAAwBvG,GAEtB,OADAR,GAAYQ,GACLA,CACT,GAdMqG,GAAwB,CAC5B9C,SAoGF,SAA8BJ,EAASC,EAAIwC,GACzC,MAAMhC,EAAOp3B,KACb,OAOA,SAAwBsV,GAKtB,OAJAqhB,EAAQ76B,KAAK,gBACb66B,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN46B,GAAaC,EAASqD,EAAU,aACzC,EAOA,SAASA,EAAS1kB,GAChB,GAAa,OAATA,GAAiB6gB,GAAmB7gB,GACtC,OAAO8jB,EAAI9jB,GAKb,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,OAAKo9B,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,iBAAmB83B,GAAyB,eAAjBA,EAAK,GAAG99B,MAAyB89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,QAAU,EACrJ48B,EAAGthB,GAELqhB,EAAQ2B,UAAUlB,EAAKhD,OAAOmB,WAAWuD,KAAMM,EAAKxC,EAApDD,CAAwDrhB,EACjE,CACF,EAtIEokB,SAAS,GCbJ,MAAMZ,GAAO,CAClB/B,SAOF,SAAwBJ,GACtB,MAAMS,EAAOp3B,KACPlC,EAAU64B,EAAQM,QAEtBuC,IAoBF,SAAuBlkB,GACrB,GAAa,OAATA,EAEF,YADAqhB,EAAQG,QAAQxhB,GAOlB,OAJAqhB,EAAQz6B,MAAM,mBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,mBACbs7B,EAAKe,sBAAmBnO,EACjBlsB,CACT,GA3BE64B,EAAQM,QACNj3B,KAAKo0B,OAAOmB,WAAW4E,YACvBC,EACA1D,GACEC,EACAA,EAAQM,QACNj3B,KAAKo0B,OAAOmB,WAAWuD,KACvBsB,EACAzD,EAAQM,QAAQ,GAASmD,IAE3B,gBAIN,OAAOt8B,EAgBP,SAASs8B,EAAe9kB,GACtB,GAAa,OAATA,EAQJ,OAJAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACbs7B,EAAKe,sBAAmBnO,EACjBlsB,EAPL64B,EAAQG,QAAQxhB,EAQpB,CACF,GC1DO,MAAM+kB,GAAW,CACtBC,WAAYC,MAEDpT,GAASqT,GAAkB,UAC3B,GAAOA,GAAkB,QAMtC,SAASA,GAAkBC,GACzB,MAAO,CACL1D,SAUF,SAAwBJ,GACtB,MAAMS,EAAOp3B,KACPu1B,EAAav1B,KAAKo0B,OAAOmB,WAAWkF,GACpCpjB,EAAOsf,EAAQM,QAAQ1B,EAAY96B,EAAOigC,GAChD,OAAOjgC,EAGP,SAASA,EAAM6a,GACb,OAAOqlB,EAAQrlB,GAAQ+B,EAAK/B,GAAQolB,EAAQplB,EAC9C,CAGA,SAASolB,EAAQplB,GACf,GAAa,OAATA,EAMJ,OAFAqhB,EAAQz6B,MAAM,QACdy6B,EAAQG,QAAQxhB,GACT3M,EALLguB,EAAQG,QAAQxhB,EAMpB,CAGA,SAAS3M,EAAK2M,GACZ,OAAIqlB,EAAQrlB,IACVqhB,EAAQ76B,KAAK,QACNub,EAAK/B,KAIdqhB,EAAQG,QAAQxhB,GACT3M,EACT,CAMA,SAASgyB,EAAQrlB,GACf,GAAa,OAATA,EACF,OAAO,EAET,MAAMjK,EAAOkqB,EAAWjgB,GACxB,IAAInV,GAAS,EACb,GAAIkL,EAGF,OAASlL,EAAQkL,EAAKrR,QAAQ,CAC5B,MAAM44B,EAAOvnB,EAAKlL,GAClB,IAAKyyB,EAAK4B,UAAY5B,EAAK4B,SAASl8B,KAAK8+B,EAAMA,EAAK5C,UAClD,OAAO,CAEX,CAEF,OAAO,CACT,CACF,EAjEE8F,WAAYC,GACA,SAAVE,EAAmBG,QAAyB5Q,GAiElD,CAMA,SAASuQ,GAAeM,GACtB,OAGA,SAAwBrH,EAAQQ,GAC9B,IAEI93B,EAFAiE,GAAS,EAMb,OAASA,GAASqzB,EAAOx5B,aACTgwB,IAAV9tB,EACEs3B,EAAOrzB,IAAoC,SAA1BqzB,EAAOrzB,GAAO,GAAGhE,OACpCD,EAAQiE,EACRA,KAEQqzB,EAAOrzB,IAAoC,SAA1BqzB,EAAOrzB,GAAO,GAAGhE,OAExCgE,IAAUjE,EAAQ,IACpBs3B,EAAOt3B,GAAO,GAAGtB,IAAM44B,EAAOrzB,EAAQ,GAAG,GAAGvF,IAC5C44B,EAAOhC,OAAOt1B,EAAQ,EAAGiE,EAAQjE,EAAQ,GACzCiE,EAAQjE,EAAQ,GAElBA,OAAQ8tB,GAGZ,OAAO6Q,EAAgBA,EAAcrH,EAAQQ,GAAWR,CAC1D,CACF,CAaA,SAASoH,GAAuBpH,EAAQQ,GACtC,IAAIF,EAAa,EAEjB,OAASA,GAAcN,EAAOx5B,QAC5B,IACG85B,IAAeN,EAAOx5B,QACU,eAA/Bw5B,EAAOM,GAAY,GAAG33B,OACW,SAAnCq3B,EAAOM,EAAa,GAAG,GAAG33B,KAC1B,CACA,MAAMwM,EAAO6qB,EAAOM,EAAa,GAAG,GAC9BgH,EAAS9G,EAAQY,YAAYjsB,GACnC,IAIIoyB,EAJA56B,EAAQ26B,EAAO9gC,OACfghC,GAAe,EACfznB,EAAO,EAGX,KAAOpT,KAAS,CACd,MAAM86B,EAAQH,EAAO36B,GACrB,GAAqB,iBAAV86B,EAAoB,CAE7B,IADAD,EAAcC,EAAMjhC,OACyB,KAAtCihC,EAAMC,WAAWF,EAAc,IACpCznB,IACAynB,IAEF,GAAIA,EAAa,MACjBA,GAAe,CACjB,MAEK,IAAe,IAAXC,EACPF,GAAO,EACPxnB,SACK,IAAe,IAAX0nB,EAEJ,CAEL96B,IACA,KACF,CACF,CACA,GAAIoT,EAAM,CACR,MAAMwgB,EAAQ,CACZ53B,KACE23B,IAAeN,EAAOx5B,QAAU+gC,GAAQxnB,EAAO,EAC3C,aACA,oBACN9Y,MAAO,CACLqvB,KAAMnhB,EAAK/N,IAAIkvB,KACfC,OAAQphB,EAAK/N,IAAImvB,OAASxW,EAC1BsQ,OAAQlb,EAAK/N,IAAIipB,OAAStQ,EAC1B4nB,OAAQxyB,EAAKlO,MAAM0gC,OAASh7B,EAC5Bi7B,aAAcj7B,EACV66B,EACAryB,EAAKlO,MAAM2gC,aAAeJ,GAEhCpgC,IAAKjD,OAAO4F,OAAO,CAAC,EAAGoL,EAAK/N,MAE9B+N,EAAK/N,IAAMjD,OAAO4F,OAAO,CAAC,EAAGw2B,EAAMt5B,OAC/BkO,EAAKlO,MAAMopB,SAAWlb,EAAK/N,IAAIipB,OACjClsB,OAAO4F,OAAOoL,EAAMorB,IAEpBP,EAAOhC,OACLsC,EACA,EACA,CAAC,QAASC,EAAOC,GACjB,CAAC,OAAQD,EAAOC,IAElBF,GAAc,EAElB,CACAA,GACF,CAEF,OAAON,CACT,CC/LO,SAAS8G,GAAW/E,EAAY/B,EAAQQ,GAE7C,MAAMqH,EAAS,GACf,IAAIl7B,GAAS,EAEb,OAASA,EAAQo1B,EAAWv7B,QAAQ,CAClC,MAAM+/B,EAAUxE,EAAWp1B,GAAOm6B,WAE9BP,IAAYsB,EAAOl5B,SAAS43B,KAC9BvG,EAASuG,EAAQvG,EAAQQ,GACzBqH,EAAO1N,KAAKoM,GAEhB,CAEA,OAAOvG,CACT,CCcO,SAAS8H,GAAgBlH,EAAQmH,EAAYra,GAElD,IAAIyI,EAAQhyB,OAAO4F,OACjB2jB,EACIvpB,OAAO4F,OAAO,CAAC,EAAG2jB,GAClB,CACE4I,KAAM,EACNC,OAAQ,EACRlG,OAAQ,GAEd,CACEsX,OAAQ,EACRC,cAAe,IAInB,MAAMI,EAAc,CAAC,EAEfC,EAAuB,GAE7B,IAAIX,EAAS,GAET3P,EAAQ,GAERuQ,GAAW,EAOf,MAAM/E,EAAU,CACdG,QAkJF,SAAiBxhB,GACX6gB,GAAmB7gB,IACrBqU,EAAMG,OACNH,EAAMI,OAAS,EACfJ,EAAM9F,SAAoB,IAAVvO,EAAc,EAAI,EAClCqmB,MACmB,IAAVrmB,IACTqU,EAAMI,SACNJ,EAAM9F,UAIJ8F,EAAMyR,aAAe,EACvBzR,EAAMwR,UAENxR,EAAMyR,eAKFzR,EAAMyR,eAAiBN,EAAOnR,EAAMwR,QAAQnhC,SAC9C2vB,EAAMyR,cAAgB,EACtBzR,EAAMwR,WAKVnH,EAAQQ,SAAWlf,EAGnBomB,GAAW,CACb,EAhLEx/B,MAmLF,SAAeC,EAAMy/B,GAGnB,MAAM7H,EAAQ6H,GAAU,CAAC,EAKzB,OAJA7H,EAAM53B,KAAOA,EACb43B,EAAMt5B,MAAQm+B,IACd5E,EAAQR,OAAO7F,KAAK,CAAC,QAASoG,EAAOC,IACrC7I,EAAMwC,KAAKoG,GACJA,CACT,EA3LEj4B,KA8LF,SAAcK,GACZ,MAAM43B,EAAQ5I,EAAMmD,MAGpB,OAFAyF,EAAMn5B,IAAMg+B,IACZ5E,EAAQR,OAAO7F,KAAK,CAAC,OAAQoG,EAAOC,IAC7BD,CACT,EAlMEkD,QAAS4E,GAyMX,SAA+BC,EAAW95B,GACxC+5B,EAAUD,EAAW95B,EAAKkf,KAC5B,IA1MEzf,MAAOo6B,EAAiBG,GACxB1D,UAAWuD,EAAiBG,EAAmB,CAC7C1D,WAAW,KASTtE,EAAU,CACdQ,SAAU,KACVlf,KAAM,KACNmiB,eAAgB,CAAC,EACjBjE,OAAQ,GACRY,SACAQ,cACAsF,eA6CF,SAAwBnG,EAAOkI,GAC7B,OAsYJ,SAAyBnB,EAAQmB,GAC/B,IAAI97B,GAAS,EAEb,MAAM8lB,EAAS,GAEf,IAAIiW,EACJ,OAAS/7B,EAAQ26B,EAAO9gC,QAAQ,CAC9B,MAAMihC,EAAQH,EAAO36B,GAErB,IAAIhH,EACJ,GAAqB,iBAAV8hC,EACT9hC,EAAQ8hC,OAER,OAAQA,GACN,KAAM,EACJ9hC,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQ8iC,EAAa,IAAM,KAC3B,MAEF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1B/iC,EAAQ,IACR,MAEF,QAEEA,EAAQo3B,OAAOkG,aAAawE,GAGlCiB,GAAmB,IAAXjB,EACRhV,EAAO0H,KAAKx0B,EACd,CACA,OAAO8sB,EAAO6J,KAAK,GACrB,CAlbWqM,CAAgBvH,EAAYb,GAAQkI,EAC7C,EA9CErD,MACA9D,WAkEF,SAAoB37B,GAClBqiC,EAAYriC,EAAM2wB,MAAQ3wB,EAAM4wB,OAChC4R,GACF,EApEE3G,MAsBF,SAAe1yB,GAKb,GAJAw4B,EAASnN,GAAKmN,EAAQx4B,GACtB85B,IAGkC,OAA9BtB,EAAOA,EAAO9gC,OAAS,GACzB,MAAO,GAMT,OAJA+hC,EAAUR,EAAY,GAGtBvH,EAAQR,OAAS8G,GAAWmB,EAAsBzH,EAAQR,OAAQQ,GAC3DA,EAAQR,MACjB,GA3BA,IAOI6I,EAPAvP,EAAQyO,EAAWxE,SAASz+B,KAAK07B,EAAS2C,GAW9C,OAHI4E,EAAWjB,YACbmB,EAAqB9N,KAAK4N,GAErBvH,EA4BP,SAASY,EAAYb,GACnB,OA8VJ,SAAqB+G,EAAQ/G,GAC3B,MAAMuI,EAAavI,EAAMt5B,MAAM0gC,OACzBoB,EAAmBxI,EAAMt5B,MAAM2gC,aAC/BoB,EAAWzI,EAAMn5B,IAAIugC,OACrBsB,EAAiB1I,EAAMn5B,IAAIwgC,aAEjC,IAAIsB,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAAC5B,EAAOwB,GAAYh6B,MAAMi6B,EAAkBE,QAC9C,CAEL,GADAC,EAAO5B,EAAOx4B,MAAMg6B,EAAYE,GAC5BD,GAAoB,EAAG,CACzB,MAAMI,EAAOD,EAAK,GACE,iBAATC,EACTD,EAAK,GAAKC,EAAKr6B,MAAMi6B,GAErBG,EAAKzK,OAET,CACIwK,EAAiB,GAEnBC,EAAK/O,KAAKmN,EAAO0B,GAAUl6B,MAAM,EAAGm6B,GAExC,CACA,OAAOC,CACT,CAxXWE,CAAY9B,EAAQ/G,EAC7B,CAGA,SAAS6E,IAEP,MAAM,KAAC9O,EAAI,OAAEC,EAAM,OAAElG,EAAM,OAAEsX,EAAM,aAAEC,GAAgBzR,EACrD,MAAO,CACLG,OACAC,SACAlG,SACAsX,SACAC,eAEJ,CAsBA,SAASgB,IAEP,IAAIS,EACJ,KAAOlT,EAAMwR,OAASL,EAAO9gC,QAAQ,CACnC,MAAMihC,EAAQH,EAAOnR,EAAMwR,QAG3B,GAAqB,iBAAVF,EAKT,IAJA4B,EAAalT,EAAMwR,OACfxR,EAAMyR,aAAe,IACvBzR,EAAMyR,aAAe,GAGrBzR,EAAMwR,SAAW0B,GACjBlT,EAAMyR,aAAeH,EAAMjhC,QAE3B8iC,EAAG7B,EAAMC,WAAWvR,EAAMyR,oBAG5B0B,EAAG7B,EAEP,CACF,CAQA,SAAS6B,EAAGxnB,GACVomB,OAAW1R,EACXqS,EAAe/mB,EACfwX,EAAQA,EAAMxX,EAChB,CAsEA,SAAS0mB,EAAkB35B,EAAGL,GAC5BA,EAAK+6B,SACP,CAQA,SAASlB,EAAiBmB,EAAUpB,GAClC,OAWA,SAAcrG,EAAY0H,EAAaC,GAErC,IAAIC,EAEAC,EAEAjF,EAEAn2B,EACJ,OAAO3J,MAAMF,QAAQo9B,GACjB8H,EAAuB9H,GACvB,aAAcA,EAEd8H,EAAuB,CAAC9H,IAS5B,SAA+B+H,GAC7B,OAAO7iC,EAGP,SAASA,EAAM6a,GACb,MAAMioB,EAAe,OAATjoB,GAAiBgoB,EAAIhoB,GAC3B6f,EAAe,OAAT7f,GAAiBgoB,EAAI/D,KAOjC,OAAO8D,EANM,IAGPhlC,MAAMF,QAAQolC,GAAOA,EAAMA,EAAM,CAACA,GAAO,MACzCllC,MAAMF,QAAQg9B,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAExCkI,CAA6B/nB,EACtC,CACF,CAvBIkoB,CAAsBjI,GA+B1B,SAAS8H,EAAuBhyB,GAG9B,OAFA8xB,EAAmB9xB,EACnB+xB,EAAiB,EACG,IAAhB/xB,EAAKrR,OACAkjC,EAEFO,EAAgBpyB,EAAK+xB,GAC9B,CAQA,SAASK,EAAgB3B,GACvB,OAGA,SAAexmB,GAKbtT,EAwER,WACE,MAAM07B,EAAa9E,IACb+E,EAAgB3J,EAAQQ,SACxBoJ,EAAwB5J,EAAQmE,iBAChC0F,EAAmB7J,EAAQR,OAAOx5B,OAClC8jC,EAAazlC,MAAM6oB,KAAKiK,GAC9B,MAAO,CACL4R,UACA7b,KAAM2c,GAQR,SAASd,IACPpT,EAAQ+T,EACR1J,EAAQQ,SAAWmJ,EACnB3J,EAAQmE,iBAAmByF,EAC3B5J,EAAQR,OAAOx5B,OAAS6jC,EACxB1S,EAAQ2S,EACRnC,GACF,CACF,CAhGeoC,GACP5F,EAAmB2D,EACdA,EAAUpC,UACb1F,EAAQmE,iBAAmB2D,GAK7B,GACEA,EAAU9iC,MACVg7B,EAAQI,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS25B,EAAU9iC,MAE1D,OAAOogC,EAAI9jB,GAEb,OAAOwmB,EAAU/E,SAASz+B,KAIxBsjC,EAASjkC,OAAO4F,OAAO5F,OAAOiK,OAAOoyB,GAAU4H,GAAU5H,EACzD2C,EACAC,EACAwC,EAPK0C,CAQLxmB,EACJ,CACF,CAGA,SAASshB,EAAGthB,GAGV,OAFAomB,GAAW,EACXsB,EAAS7E,EAAkBn2B,GACpBi7B,CACT,CAGA,SAAS7D,EAAI9jB,GAGX,OAFAomB,GAAW,EACX15B,EAAK+6B,YACCK,EAAiBD,EAAiBnjC,OAC/ByjC,EAAgBN,EAAiBC,IAEnCF,CACT,CACF,CACF,CAOA,SAASnB,EAAUD,EAAW5a,GACxB4a,EAAUxB,aAAemB,EAAqBt5B,SAAS25B,IACzDL,EAAqB9N,KAAKmO,GAExBA,EAAU/B,SACZvI,GACEwC,EAAQR,OACRtS,EACA8S,EAAQR,OAAOx5B,OAASknB,EACxB4a,EAAU/B,QAAQ/F,EAAQR,OAAOlxB,MAAM4e,GAAO8S,IAG9C8H,EAAUkC,YACZhK,EAAQR,OAASsI,EAAUkC,UAAUhK,EAAQR,OAAQQ,GAEzD,CAuCA,SAAS2H,IACHhS,EAAMG,QAAQ0R,GAAe7R,EAAMI,OAAS,IAC9CJ,EAAMI,OAASyR,EAAY7R,EAAMG,MACjCH,EAAM9F,QAAU2X,EAAY7R,EAAMG,MAAQ,EAE9C,CACF,CCleO,MAAMmU,GAAgB,CAC3BjlC,KAAM,gBACN+9B,SAOF,SAA+BJ,EAASC,EAAIwC,GAC1C,IAEI8E,EAFA3qB,EAAO,EAGX,OAYA,SAAe+B,GAGb,OAFAqhB,EAAQz6B,MAAM,iBAehB,SAAgBoZ,GAEd,OADA4oB,EAAS5oB,EACFqlB,EAAQrlB,EACjB,CAhBSmgB,CAAOngB,EAChB,EA2BA,SAASqlB,EAAQrlB,GACf,OAAIA,IAAS4oB,GACXvH,EAAQz6B,MAAM,yBACPiiC,EAAS7oB,IAEd/B,GAAQ,IAAe,OAAT+B,GAAiB6gB,GAAmB7gB,KACpDqhB,EAAQ76B,KAAK,iBACN86B,EAAGthB,IAEL8jB,EAAI9jB,EACb,CAYA,SAAS6oB,EAAS7oB,GAChB,OAAIA,IAAS4oB,GACXvH,EAAQG,QAAQxhB,GAChB/B,IACO4qB,IAETxH,EAAQ76B,KAAK,yBACNu6B,GAAc/gB,GAAQohB,GAAaC,EAASgE,EAAS,aAA/BjE,CAA6CphB,GAAQqlB,EAAQrlB,GAC5F,CACF,GClFO,MAAM,GAAO,CAClBtc,KAAM,OACN+9B,SA0BF,SAA2BJ,EAASC,EAAIwC,GACtC,MAAMhC,EAAOp3B,KACPi6B,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,IAAIokC,EAAcnE,GAAyB,eAAjBA,EAAK,GAAG99B,KAAwB89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,OAAS,EACrGuZ,EAAO,EACX,OAGA,SAAe+B,GACb,MAAMrK,EAAOmsB,EAAKK,eAAet7B,OAAkB,KAATmZ,GAAwB,KAATA,GAAwB,KAATA,EAAc,gBAAkB,eACxG,GAAa,kBAATrK,GAA4BmsB,EAAKK,eAAeyG,QAAU5oB,IAAS8hB,EAAKK,eAAeyG,OAASlI,GAAW1gB,GAAO,CAOpH,GANK8hB,EAAKK,eAAet7B,OACvBi7B,EAAKK,eAAet7B,KAAO8O,EAC3B0rB,EAAQz6B,MAAM+O,EAAM,CAClB4oB,YAAY,KAGH,kBAAT5oB,EAEF,OADA0rB,EAAQz6B,MAAM,kBACE,KAAToZ,GAAwB,KAATA,EAAcqhB,EAAQl1B,MAAMw8B,GAAe7E,EAAKiF,EAAlC1H,CAA4CrhB,GAAQ+oB,EAAS/oB,GAEnG,IAAK8hB,EAAKkB,WAAsB,KAAThjB,EAGrB,OAFAqhB,EAAQz6B,MAAM,kBACdy6B,EAAQz6B,MAAM,iBACPoiC,EAAOhpB,EAElB,CACA,OAAO8jB,EAAI9jB,EACb,EAGA,SAASgpB,EAAOhpB,GACd,OAAI0gB,GAAW1gB,MAAW/B,EAAO,IAC/BojB,EAAQG,QAAQxhB,GACTgpB,KAEHlH,EAAKkB,WAAa/kB,EAAO,KAAO6jB,EAAKK,eAAeyG,OAAS5oB,IAAS8hB,EAAKK,eAAeyG,OAAkB,KAAT5oB,GAAwB,KAATA,IACtHqhB,EAAQ76B,KAAK,iBACNuiC,EAAS/oB,IAEX8jB,EAAI9jB,EACb,CAKA,SAAS+oB,EAAS/oB,GAKhB,OAJAqhB,EAAQz6B,MAAM,kBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,kBACbs7B,EAAKK,eAAeyG,OAAS9G,EAAKK,eAAeyG,QAAU5oB,EACpDqhB,EAAQl1B,MAAM+3B,GAErBpC,EAAKkB,UAAYc,EAAMmF,EAAS5H,EAAQM,QAAQuH,GAAmCC,EAAaC,GAClG,CAGA,SAASH,EAAQjpB,GAGf,OAFA8hB,EAAKK,eAAekH,kBAAmB,EACvCP,IACOK,EAAYnpB,EACrB,CAGA,SAASopB,EAAYppB,GACnB,OAAI+gB,GAAc/gB,IAChBqhB,EAAQz6B,MAAM,4BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,4BACN2iC,GAEFrF,EAAI9jB,EACb,CAGA,SAASmpB,EAAYnpB,GAEnB,OADA8hB,EAAKK,eAAelkB,KAAO6qB,EAAchH,EAAK8C,eAAevD,EAAQ76B,KAAK,mBAAmB,GAAM9B,OAC5F48B,EAAGthB,EACZ,CACF,EAxGEoiB,aAAc,CACZX,SA6GJ,SAAkCJ,EAASC,EAAIwC,GAC7C,MAAMhC,EAAOp3B,KAEb,OADAo3B,EAAKK,eAAeI,gBAAa7N,EAC1B2M,EAAQl1B,MAAM+3B,GAAW+E,EAASK,GAGzC,SAASL,EAAQjpB,GAKf,OAJA8hB,EAAKK,eAAeoH,kBAAoBzH,EAAKK,eAAeoH,mBAAqBzH,EAAKK,eAAekH,iBAI9FjI,GAAaC,EAASC,EAAI,iBAAkBQ,EAAKK,eAAelkB,KAAO,EAAvEmjB,CAA0EphB,EACnF,CAGA,SAASspB,EAAStpB,GAChB,OAAI8hB,EAAKK,eAAeoH,oBAAsBxI,GAAc/gB,IAC1D8hB,EAAKK,eAAeoH,uBAAoB7U,EACxCoN,EAAKK,eAAekH,sBAAmB3U,EAChC8U,EAAiBxpB,KAE1B8hB,EAAKK,eAAeoH,uBAAoB7U,EACxCoN,EAAKK,eAAekH,sBAAmB3U,EAChC2M,EAAQM,QAAQ8H,GAAiBnI,EAAIkI,EAArCnI,CAAuDrhB,GAChE,CAGA,SAASwpB,EAAiBxpB,GAOxB,OALA8hB,EAAKK,eAAeI,YAAa,EAEjCT,EAAKkB,eAAYtO,EAGV0M,GAAaC,EAASA,EAAQM,QAAQ,GAAML,EAAIwC,GAAM,aAAchC,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAA/I0M,CAAkJphB,EAC3J,CACF,GA/IExZ,KAoKF,SAAyB66B,GACvBA,EAAQ76B,KAAKkE,KAAKy3B,eAAet7B,KACnC,GAlKMqiC,GAAoC,CACxCzH,SAuKF,SAA0CJ,EAASC,EAAIwC,GACrD,MAAMhC,EAAOp3B,KAIb,OAAO02B,GAAaC,GAGpB,SAAqBrhB,GACnB,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,OAAQq8B,GAAc/gB,IAAS2kB,GAAyB,6BAAjBA,EAAK,GAAG99B,KAAsCy6B,EAAGthB,GAAQ8jB,EAAI9jB,EACtG,GAN0C,2BAA4B8hB,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAOnJ,EAlLE0P,SAAS,GAILqF,GAAkB,CACtBhI,SA0IF,SAAwBJ,EAASC,EAAIwC,GACnC,MAAMhC,EAAOp3B,KACb,OAAO02B,GAAaC,GAGpB,SAAqBrhB,GACnB,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,OAAOigC,GAAyB,mBAAjBA,EAAK,GAAG99B,MAA6B89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,SAAWo9B,EAAKK,eAAelkB,KAAOqjB,EAAGthB,GAAQ8jB,EAAI9jB,EACjJ,GAN0C,iBAAkB8hB,EAAKK,eAAelkB,KAAO,EAOzF,EAlJEmmB,SAAS,GCvBJ,MAAMsF,GAAa,CACxBhmC,KAAM,aACN+9B,SAWF,SAAiCJ,EAASC,EAAIwC,GAC5C,MAAMhC,EAAOp3B,KACb,OAYA,SAAesV,GACb,GAAa,KAATA,EAAa,CACf,MAAMwX,EAAQsK,EAAKK,eAWnB,OAVK3K,EAAMlb,OACT+kB,EAAQz6B,MAAM,aAAc,CAC1B23B,YAAY,IAEd/G,EAAMlb,MAAO,GAEf+kB,EAAQz6B,MAAM,oBACdy6B,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBACN29B,CACT,CACA,OAAOL,EAAI9jB,EACb,EAYA,SAASmkB,EAAMnkB,GACb,OAAI+gB,GAAc/gB,IAChBqhB,EAAQz6B,MAAM,8BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,8BACb66B,EAAQ76B,KAAK,oBACN86B,IAETD,EAAQ76B,KAAK,oBACN86B,EAAGthB,GACZ,CACF,EA/DEoiB,aAAc,CACZX,SA4EJ,SAAwCJ,EAASC,EAAIwC,GACnD,MAAMhC,EAAOp3B,KACb,OAeA,SAAmBsV,GACjB,GAAI+gB,GAAc/gB,GAGhB,OAAOohB,GAAaC,EAASsI,EAAY,aAAc7H,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAA3H0M,CAA8HphB,GAEvI,OAAO2pB,EAAW3pB,EACpB,EAeA,SAAS2pB,EAAW3pB,GAClB,OAAOqhB,EAAQM,QAAQ+H,GAAYpI,EAAIwC,EAAhCzC,CAAqCrhB,EAC9C,CACF,GApHExZ,KAuHF,SAAc66B,GACZA,EAAQ76B,KAAK,aACf,GC1FO,SAASojC,GACdvI,EACAC,EACAwC,EACAj9B,EACAgjC,EACAC,EACAC,EACAC,EACA5zB,GAEA,MAAMmrB,EAAQnrB,GAAOikB,OAAOyC,kBAC5B,IAAImN,EAAU,EACd,OAcA,SAAejqB,GACb,GAAa,KAATA,EAMF,OALAqhB,EAAQz6B,MAAMC,GACdw6B,EAAQz6B,MAAMijC,GACdxI,EAAQz6B,MAAMkjC,GACdzI,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAKsjC,GACNI,EAIT,GAAa,OAATlqB,GAA0B,KAATA,GAAwB,KAATA,GAAeygB,GAAazgB,GAC9D,OAAO8jB,EAAI9jB,GAQb,OANAqhB,EAAQz6B,MAAMC,GACdw6B,EAAQz6B,MAAMmjC,GACd1I,EAAQz6B,MAAMojC,GACd3I,EAAQz6B,MAAM,cAAe,CAC3By3B,YAAa,WAER8L,EAAInqB,EACb,EAYA,SAASkqB,EAAelqB,GACtB,OAAa,KAATA,GACFqhB,EAAQz6B,MAAMkjC,GACdzI,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAKsjC,GACbzI,EAAQ76B,KAAKqjC,GACbxI,EAAQ76B,KAAKK,GACNy6B,IAETD,EAAQz6B,MAAMojC,GACd3I,EAAQz6B,MAAM,cAAe,CAC3By3B,YAAa,WAER+L,EAASpqB,GAClB,CAYA,SAASoqB,EAASpqB,GAChB,OAAa,KAATA,GACFqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAKwjC,GACNE,EAAelqB,IAEX,OAATA,GAA0B,KAATA,GAAe6gB,GAAmB7gB,GAC9C8jB,EAAI9jB,IAEbqhB,EAAQG,QAAQxhB,GACA,KAATA,EAAcqqB,EAAiBD,EACxC,CAYA,SAASC,EAAerqB,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCqhB,EAAQG,QAAQxhB,GACToqB,GAEFA,EAASpqB,EAClB,CAYA,SAASmqB,EAAInqB,GACX,OACGiqB,GACS,OAATjqB,GAA0B,KAATA,IAAe8gB,GAA0B9gB,GAQzDiqB,EAAU1I,GAAkB,KAATvhB,GACrBqhB,EAAQG,QAAQxhB,GAChBiqB,IACOE,GAEI,KAATnqB,GACFqhB,EAAQG,QAAQxhB,GAChBiqB,IACOE,GAMI,OAATnqB,GAA0B,KAATA,GAAwB,KAATA,GAAeygB,GAAazgB,GACvD8jB,EAAI9jB,IAEbqhB,EAAQG,QAAQxhB,GACA,KAATA,EAAcsqB,EAAYH,IAxB/B9I,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAKwjC,GACb3I,EAAQ76B,KAAKujC,GACb1I,EAAQ76B,KAAKK,GACNy6B,EAAGthB,GAqBd,CAYA,SAASsqB,EAAUtqB,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCqhB,EAAQG,QAAQxhB,GACTmqB,GAEFA,EAAInqB,EACb,CACF,CCzLO,SAASuqB,GAAalJ,EAASC,EAAIwC,EAAKj9B,EAAM2jC,EAAYR,GAC/D,MAAMlI,EAAOp3B,KACb,IAEIk5B,EAFA3lB,EAAO,EAGX,OAYA,SAAe+B,GAMb,OALAqhB,EAAQz6B,MAAMC,GACdw6B,EAAQz6B,MAAM4jC,GACdnJ,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAKgkC,GACbnJ,EAAQz6B,MAAMojC,GACP3E,CACT,EAYA,SAASA,EAAQrlB,GACf,OACE/B,EAAO,KACE,OAAT+B,GACS,KAATA,GACU,KAATA,IAAgB4jB,GAMP,KAAT5jB,IACE/B,GACD,2BAA4B6jB,EAAKhD,OAAOmB,WAEnC6D,EAAI9jB,GAEA,KAATA,GACFqhB,EAAQ76B,KAAKwjC,GACb3I,EAAQz6B,MAAM4jC,GACdnJ,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAKgkC,GACbnJ,EAAQ76B,KAAKK,GACNy6B,GAILT,GAAmB7gB,IACrBqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN6+B,IAEThE,EAAQz6B,MAAM,cAAe,CAC3By3B,YAAa,WAERoM,EAAYzqB,GACrB,CAYA,SAASyqB,EAAYzqB,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACA6gB,GAAmB7gB,IACnB/B,IAAS,KAETojB,EAAQ76B,KAAK,eACN6+B,EAAQrlB,KAEjBqhB,EAAQG,QAAQxhB,GACX4jB,IAAMA,GAAQ7C,GAAc/gB,IACjB,KAATA,EAAc0qB,EAAcD,EACrC,CAYA,SAASC,EAAY1qB,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCqhB,EAAQG,QAAQxhB,GAChB/B,IACOwsB,GAEFA,EAAYzqB,EACrB,CACF,CCtHO,SAAS2qB,GAAatJ,EAASC,EAAIwC,EAAKj9B,EAAM2jC,EAAYR,GAE/D,IAAIpB,EACJ,OAYA,SAAe5oB,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMhC,OALAqhB,EAAQz6B,MAAMC,GACdw6B,EAAQz6B,MAAM4jC,GACdnJ,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAKgkC,GACb5B,EAAkB,KAAT5oB,EAAc,GAAKA,EACrB8J,EAET,OAAOga,EAAI9jB,EACb,EAcA,SAAS8J,EAAM9J,GACb,OAAIA,IAAS4oB,GACXvH,EAAQz6B,MAAM4jC,GACdnJ,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAKgkC,GACbnJ,EAAQ76B,KAAKK,GACNy6B,IAETD,EAAQz6B,MAAMojC,GACP3E,EAAQrlB,GACjB,CAYA,SAASqlB,EAAQrlB,GACf,OAAIA,IAAS4oB,GACXvH,EAAQ76B,KAAKwjC,GACNlgB,EAAM8e,IAEF,OAAT5oB,EACK8jB,EAAI9jB,GAIT6gB,GAAmB7gB,IAErBqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN46B,GAAaC,EAASgE,EAAS,gBAExChE,EAAQz6B,MAAM,cAAe,CAC3By3B,YAAa,WAER2K,EAAOhpB,GAChB,CAOA,SAASgpB,EAAOhpB,GACd,OAAIA,IAAS4oB,GAAmB,OAAT5oB,GAAiB6gB,GAAmB7gB,IACzDqhB,EAAQ76B,KAAK,eACN6+B,EAAQrlB,KAEjBqhB,EAAQG,QAAQxhB,GACA,KAATA,EAAc4qB,EAAS5B,EAChC,CAYA,SAAS4B,EAAO5qB,GACd,OAAIA,IAAS4oB,GAAmB,KAAT5oB,GACrBqhB,EAAQG,QAAQxhB,GACTgpB,GAEFA,EAAOhpB,EAChB,CACF,CClIO,SAAS6qB,GAAkBxJ,EAASC,GAEzC,IAAIsC,EACJ,OAGA,SAASz+B,EAAM6a,GACb,GAAI6gB,GAAmB7gB,GAKrB,OAJAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACbo9B,GAAO,EACAz+B,EAET,GAAI47B,GAAc/gB,GAChB,OAAOohB,GACLC,EACAl8B,EACAy+B,EAAO,aAAe,aAHjBxC,CAILphB,GAEJ,OAAOshB,EAAGthB,EACZ,CACF,CC7BO,SAAS8qB,GAAoBjnC,GAClC,OACEA,EAEGwG,QAAQ,cAAe,KAEvBA,QAAQ,SAAU,IAOlBU,cACAopB,aAEP,CCpBO,MAAM5nB,GAAa,CACxB7I,KAAM,aACN+9B,SAaF,SAA4BJ,EAASC,EAAIwC,GACvC,MAAMhC,EAAOp3B,KAEb,IAAIqgC,EACJ,OAYA,SAAe/qB,GAKb,OADAqhB,EAAQz6B,MAAM,cAchB,SAAgBoZ,GAGd,OAAOuqB,GAAavnC,KAAK8+B,EAAMT,EAAS2J,EAExClH,EAAK,kBAAmB,wBAAyB,wBAF1CyG,CAEmEvqB,EAC5E,CAnBSmgB,CAAOngB,EAChB,EA8BA,SAASgrB,EAAWhrB,GAElB,OADA+qB,EAAaD,GAAoBhJ,EAAK8C,eAAe9C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAAG,IAAIsI,MAAM,GAAI,IAC1F,KAATgT,GACFqhB,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBACNykC,GAEFnH,EAAI9jB,EACb,CAYA,SAASirB,EAAYjrB,GAEnB,OAAO8gB,GAA0B9gB,GAAQ6qB,GAAkBxJ,EAAS6J,EAA3BL,CAA8C7qB,GAAQkrB,EAAkBlrB,EACnH,CAYA,SAASkrB,EAAkBlrB,GACzB,OAAO4pB,GAAmBvI,EAAS8J,EAEnCrH,EAAK,wBAAyB,+BAAgC,qCAAsC,2BAA4B,8BAFzH8F,CAEwJ5pB,EACjK,CAYA,SAASmrB,EAAiBnrB,GACxB,OAAOqhB,EAAQM,QAAQyJ,GAAajH,EAAOA,EAApC9C,CAA2CrhB,EACpD,CAcA,SAASmkB,EAAMnkB,GACb,OAAO+gB,GAAc/gB,GAAQohB,GAAaC,EAASgK,EAAiB,aAAvCjK,CAAqDphB,GAAQqrB,EAAgBrrB,EAC5G,CAcA,SAASqrB,EAAgBrrB,GACvB,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,cAKbs7B,EAAKhD,OAAOpzB,QAAQ2sB,KAAK0S,GAKlBzJ,EAAGthB,IAEL8jB,EAAI9jB,EACb,CACF,GAjKMorB,GAAc,CAClB3J,SAsKF,SAA6BJ,EAASC,EAAIwC,GACxC,OAcA,SAAqB9jB,GACnB,OAAO8gB,GAA0B9gB,GAAQ6qB,GAAkBxJ,EAASiK,EAA3BT,CAAyC7qB,GAAQ8jB,EAAI9jB,EAChG,EAaA,SAASsrB,EAAatrB,GACpB,OAAO2qB,GAAatJ,EAASkK,EAAYzH,EAAK,kBAAmB,wBAAyB,wBAAnF6G,CAA4G3qB,EACrH,CAYA,SAASurB,EAAWvrB,GAClB,OAAO+gB,GAAc/gB,GAAQohB,GAAaC,EAASmK,EAA8B,aAApDpK,CAAkEphB,GAAQwrB,EAA6BxrB,EACtI,CAYA,SAASwrB,EAA6BxrB,GACpC,OAAgB,OAATA,GAAiB6gB,GAAmB7gB,GAAQshB,EAAGthB,GAAQ8jB,EAAI9jB,EACpE,CACF,EAlOEokB,SAAS,GCbJ,MAAMqH,GAAe,CAC1B/nC,KAAM,eACN+9B,SAaF,SAA8BJ,EAASC,EAAIwC,GACzC,MAAMhC,EAAOp3B,KACb,OAgBA,SAAesV,GAMb,OAHAqhB,EAAQz6B,MAAM,gBAGPw6B,GAAaC,EAASqK,EAAa,aAAc,EAAjDtK,CAAwDphB,EACjE,EAYA,SAAS0rB,EAAY1rB,GACnB,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,OAAOigC,GAAyB,eAAjBA,EAAK,GAAG99B,MAAyB89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,QAAU,EAAI2gC,EAAQrlB,GAAQ8jB,EAAI9jB,EAC1H,CAYA,SAASqlB,EAAQrlB,GACf,OAAa,OAATA,EACKmkB,EAAMnkB,GAEX6gB,GAAmB7gB,GACdqhB,EAAQM,QAAQgK,GAActG,EAASlB,EAAvC9C,CAA8CrhB,IAEvDqhB,EAAQz6B,MAAM,iBACPoiC,EAAOhpB,GAChB,CAYA,SAASgpB,EAAOhpB,GACd,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,iBACN6+B,EAAQrlB,KAEjBqhB,EAAQG,QAAQxhB,GACTgpB,EACT,CAGA,SAAS7E,EAAMnkB,GAKb,OAJAqhB,EAAQ76B,KAAK,gBAIN86B,EAAGthB,EACZ,CACF,GAnGM2rB,GAAe,CACnBlK,SAwGF,SAA8BJ,EAASC,EAAIwC,GACzC,MAAMhC,EAAOp3B,KACb,OAAOihC,EAaP,SAASA,EAAa3rB,GAGpB,OAAI8hB,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MACvBsP,EAAI9jB,GAET6gB,GAAmB7gB,IACrBqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACNmlC,GASFvK,GAAaC,EAASqK,EAAa,aAAc,EAAjDtK,CAAwDphB,EACjE,CAYA,SAAS0rB,EAAY1rB,GACnB,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,OAAOigC,GAAyB,eAAjBA,EAAK,GAAG99B,MAAyB89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,QAAU,EAAI48B,EAAGthB,GAAQ6gB,GAAmB7gB,GAAQ2rB,EAAa3rB,GAAQ8jB,EAAI9jB,EACrK,CACF,EA1JEokB,SAAS,GCLJ,MAAMwH,GAAa,CACxBloC,KAAM,aACN+9B,SA8CF,SAA4BJ,EAASC,EAAIwC,GACvC,IAAI7lB,EAAO,EACX,OAYA,SAAe+B,GAGb,OADAqhB,EAAQz6B,MAAM,cAchB,SAAgBoZ,GAEd,OADAqhB,EAAQz6B,MAAM,sBACPilC,EAAa7rB,EACtB,CAhBSmgB,CAAOngB,EAChB,EA2BA,SAAS6rB,EAAa7rB,GACpB,OAAa,KAATA,GAAe/B,IAAS,GAC1BojB,EAAQG,QAAQxhB,GACT6rB,GAII,OAAT7rB,GAAiB8gB,GAA0B9gB,IAC7CqhB,EAAQ76B,KAAK,sBACN6+B,EAAQrlB,IAEV8jB,EAAI9jB,EACb,CAYA,SAASqlB,EAAQrlB,GACf,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,sBACPklC,EAAgB9rB,IAEZ,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,cAIN86B,EAAGthB,IAER+gB,GAAc/gB,GACTohB,GAAaC,EAASgE,EAAS,aAA/BjE,CAA6CphB,IAKtDqhB,EAAQz6B,MAAM,kBACPyM,EAAK2M,GACd,CAcA,SAAS8rB,EAAgB9rB,GACvB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT8rB,IAETzK,EAAQ76B,KAAK,sBACN6+B,EAAQrlB,GACjB,CAYA,SAAS3M,EAAK2M,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAe8gB,GAA0B9gB,IAC5DqhB,EAAQ76B,KAAK,kBACN6+B,EAAQrlB,KAEjBqhB,EAAQG,QAAQxhB,GACT3M,EACT,CACF,EA/KEoxB,QAIF,SAA2BvG,EAAQQ,GACjC,IAGI3rB,EAEAgP,EALAuiB,EAAapG,EAAOx5B,OAAS,EAC7Bg9B,EAAe,EAOkB,eAAjCxD,EAAOwD,GAAc,GAAG76B,OAC1B66B,GAAgB,GAId4C,EAAa,EAAI5C,GAA+C,eAA/BxD,EAAOoG,GAAY,GAAGz9B,OACzDy9B,GAAc,GAEmB,uBAA/BpG,EAAOoG,GAAY,GAAGz9B,OAAkC66B,IAAiB4C,EAAa,GAAKA,EAAa,EAAI5C,GAAmD,eAAnCxD,EAAOoG,EAAa,GAAG,GAAGz9B,QACxJy9B,GAAc5C,EAAe,IAAM4C,EAAa,EAAI,GAElDA,EAAa5C,IACf3uB,EAAU,CACRlM,KAAM,iBACN1B,MAAO+4B,EAAOwD,GAAc,GAAGv8B,MAC/BG,IAAK44B,EAAOoG,GAAY,GAAGh/B,KAE7Byc,EAAO,CACLlb,KAAM,YACN1B,MAAO+4B,EAAOwD,GAAc,GAAGv8B,MAC/BG,IAAK44B,EAAOoG,GAAY,GAAGh/B,IAC3B+4B,YAAa,QAEfnC,GAAOgC,EAAQwD,EAAc4C,EAAa5C,EAAe,EAAG,CAAC,CAAC,QAAS3uB,EAAS2rB,GAAU,CAAC,QAAS3c,EAAM2c,GAAU,CAAC,OAAQ3c,EAAM2c,GAAU,CAAC,OAAQ3rB,EAAS2rB,MAEjK,OAAOR,CACT,GC3CO,MAAM6N,GAAkB,CAC7BroC,KAAM,kBACN+9B,SAkEF,SAAiCJ,EAASC,EAAIwC,GAC5C,MAAMhC,EAAOp3B,KAEb,IAAIk+B,EACJ,OAaA,SAAe5oB,GACb,IAEIgsB,EAFAnhC,EAAQi3B,EAAK5D,OAAOx5B,OAIxB,KAAOmG,KAGL,GAAmC,eAA/Bi3B,EAAK5D,OAAOrzB,GAAO,GAAGhE,MAAwD,eAA/Bi7B,EAAK5D,OAAOrzB,GAAO,GAAGhE,MAAwD,YAA/Bi7B,EAAK5D,OAAOrzB,GAAO,GAAGhE,KAAoB,CAC1ImlC,EAA2C,cAA/BlK,EAAK5D,OAAOrzB,GAAO,GAAGhE,KAClC,KACF,CAKF,IAAKi7B,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,QAAUsN,EAAKkB,WAAagJ,GAG3D,OAFA3K,EAAQz6B,MAAM,qBACdgiC,EAAS5oB,EAiBb,SAAgBA,GAEd,OADAqhB,EAAQz6B,MAAM,6BACPoiC,EAAOhpB,EAChB,CAnBWmgB,CAAOngB,GAEhB,OAAO8jB,EAAI9jB,EACb,EA6BA,SAASgpB,EAAOhpB,GACd,OAAIA,IAAS4oB,GACXvH,EAAQG,QAAQxhB,GACTgpB,IAET3H,EAAQ76B,KAAK,6BACNu6B,GAAc/gB,GAAQohB,GAAaC,EAAS8C,EAAO,aAA7B/C,CAA2CphB,GAAQmkB,EAAMnkB,GACxF,CAaA,SAASmkB,EAAMnkB,GACb,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,qBACN86B,EAAGthB,IAEL8jB,EAAI9jB,EACb,CACF,EAhKE0oB,UAIF,SAAkCxK,EAAQQ,GAExC,IAEI3rB,EAEAgP,EAEAxV,EANA1B,EAAQqzB,EAAOx5B,OAUnB,KAAOmG,KACL,GAAyB,UAArBqzB,EAAOrzB,GAAO,GAAgB,CAChC,GAA8B,YAA1BqzB,EAAOrzB,GAAO,GAAGhE,KAAoB,CACvCkM,EAAUlI,EACV,KACF,CAC8B,cAA1BqzB,EAAOrzB,GAAO,GAAGhE,OACnBkb,EAAOlX,EAEX,KAGgC,YAA1BqzB,EAAOrzB,GAAO,GAAGhE,MAEnBq3B,EAAOhC,OAAOrxB,EAAO,GAElB0B,GAAwC,eAA1B2xB,EAAOrzB,GAAO,GAAGhE,OAClC0F,EAAa1B,GAInB,MAAMohC,EAAU,CACdplC,KAAM,gBACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOnc,GAAM,GAAG5c,OACzCG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOA,EAAOx5B,OAAS,GAAG,GAAGY,MAItD44B,EAAOnc,GAAM,GAAGlb,KAAO,oBAInB0F,GACF2xB,EAAOhC,OAAOna,EAAM,EAAG,CAAC,QAASkqB,EAASvN,IAC1CR,EAAOhC,OAAO3vB,EAAa,EAAG,EAAG,CAAC,OAAQ2xB,EAAOnrB,GAAS,GAAI2rB,IAC9DR,EAAOnrB,GAAS,GAAGzN,IAAMjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO3xB,GAAY,GAAGjH,MAEjE44B,EAAOnrB,GAAS,GAAKk5B,EAKvB,OADA/N,EAAO7F,KAAK,CAAC,OAAQ4T,EAASvN,IACvBR,CACT,GC3DO,MAAMgO,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YC9E1CC,GAAW,CACtB1oC,KAAM,WACN+9B,SAsCF,SAA0BJ,EAASC,EAAIwC,GACrC,MAAMhC,EAAOp3B,KAEb,IAAIk+B,EAEAyD,EAEAC,EAEAzhC,EAEA0hC,EACJ,OAYA,SAAevsB,GAEb,OAaF,SAAgBA,GAId,OAHAqhB,EAAQz6B,MAAM,YACdy6B,EAAQz6B,MAAM,gBACdy6B,EAAQG,QAAQxhB,GACT1D,CACT,CAlBS6jB,CAAOngB,EAChB,EAiCA,SAAS1D,EAAK0D,GACZ,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTwsB,GAEI,KAATxsB,GACFqhB,EAAQG,QAAQxhB,GAChBqsB,GAAa,EACNI,GAEI,KAATzsB,GACFqhB,EAAQG,QAAQxhB,GAChB4oB,EAAS,EAMF9G,EAAKkB,UAAY1B,EAAKoL,GAI3BrM,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GAEhBssB,EAASrR,OAAOkG,aAAanhB,GACtBoY,GAEF0L,EAAI9jB,EACb,CAgBA,SAASwsB,EAAgBxsB,GACvB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChB4oB,EAAS,EACF+D,GAEI,KAAT3sB,GACFqhB,EAAQG,QAAQxhB,GAChB4oB,EAAS,EACT/9B,EAAQ,EACD+hC,GAILvM,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GAChB4oB,EAAS,EAGF9G,EAAKkB,UAAY1B,EAAKoL,GAExB5I,EAAI9jB,EACb,CAYA,SAAS2sB,EAAkB3sB,GACzB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAGT8hB,EAAKkB,UAAY1B,EAAKoL,GAExB5I,EAAI9jB,EACb,CAYA,SAAS4sB,EAAgB5sB,GACvB,MAAMnc,EAAQ,SACd,OAAImc,IAASnc,EAAM+hC,WAAW/6B,MAC5Bw2B,EAAQG,QAAQxhB,GACFnc,IAAVgH,EAGKi3B,EAAKkB,UAAY1B,EAAKc,EAExBwK,GAEF9I,EAAI9jB,EACb,CAYA,SAASysB,EAAczsB,GACrB,OAAIqgB,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GAEhBssB,EAASrR,OAAOkG,aAAanhB,GACtBoY,GAEF0L,EAAI9jB,EACb,CAcA,SAASoY,EAAQpY,GACf,GAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAe8gB,GAA0B9gB,GAAO,CAClF,MAAM6sB,EAAiB,KAAT7sB,EACRtc,EAAO4oC,EAAOvhC,cACpB,OAAK8hC,GAAUR,IAAcF,GAAat/B,SAASnJ,GAM/CwoC,GAAer/B,SAASy/B,EAAOvhC,gBACjC69B,EAAS,EACLiE,GACFxL,EAAQG,QAAQxhB,GACT8sB,GAKFhL,EAAKkB,UAAY1B,EAAGthB,GAAQoiB,EAAapiB,KAElD4oB,EAAS,EAEF9G,EAAKkB,YAAclB,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MAAQsP,EAAI9jB,GAAQqsB,EAAaU,EAAwB/sB,GAAQgtB,EAA4BhtB,KAlBjJ4oB,EAAS,EAGF9G,EAAKkB,UAAY1B,EAAGthB,GAAQoiB,EAAapiB,GAgBpD,CAGA,OAAa,KAATA,GAAeugB,GAAkBvgB,IACnCqhB,EAAQG,QAAQxhB,GAChBssB,GAAUrR,OAAOkG,aAAanhB,GACvBoY,GAEF0L,EAAI9jB,EACb,CAYA,SAAS8sB,EAAiB9sB,GACxB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAGT8hB,EAAKkB,UAAY1B,EAAKc,GAExB0B,EAAI9jB,EACb,CAYA,SAAS+sB,EAAwB/sB,GAC/B,OAAI+gB,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACT+sB,GAEFE,EAAYjtB,EACrB,CAyBA,SAASgtB,EAA4BhtB,GACnC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTitB,GAII,KAATjtB,GAAwB,KAATA,GAAeqgB,GAAWrgB,IAC3CqhB,EAAQG,QAAQxhB,GACTktB,GAELnM,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTgtB,GAEFC,EAAYjtB,EACrB,CAgBA,SAASktB,EAAsBltB,GAE7B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeugB,GAAkBvgB,IAChFqhB,EAAQG,QAAQxhB,GACTktB,GAEFC,EAA2BntB,EACpC,CAeA,SAASmtB,EAA2BntB,GAClC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTotB,GAELrM,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTmtB,GAEFH,EAA4BhtB,EACrC,CAeA,SAASotB,EAA6BptB,GACpC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzD8jB,EAAI9jB,GAEA,KAATA,GAAwB,KAATA,GACjBqhB,EAAQG,QAAQxhB,GAChBusB,EAAUvsB,EACHqtB,GAELtM,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTotB,GAEFE,EAA+BttB,EACxC,CAcA,SAASqtB,EAA6BrtB,GACpC,OAAIA,IAASusB,GACXlL,EAAQG,QAAQxhB,GAChBusB,EAAU,KACHgB,GAEI,OAATvtB,GAAiB6gB,GAAmB7gB,GAC/B8jB,EAAI9jB,IAEbqhB,EAAQG,QAAQxhB,GACTqtB,EACT,CAYA,SAASC,EAA+BttB,GACtC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAe8gB,GAA0B9gB,GAC/ImtB,EAA2BntB,IAEpCqhB,EAAQG,QAAQxhB,GACTstB,EACT,CAaA,SAASC,EAAkCvtB,GACzC,OAAa,KAATA,GAAwB,KAATA,GAAe+gB,GAAc/gB,GACvCgtB,EAA4BhtB,GAE9B8jB,EAAI9jB,EACb,CAYA,SAASitB,EAAYjtB,GACnB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTwtB,GAEF1J,EAAI9jB,EACb,CAYA,SAASwtB,EAAcxtB,GACrB,OAAa,OAATA,GAAiB6gB,GAAmB7gB,GAG/BoiB,EAAapiB,GAElB+gB,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTwtB,GAEF1J,EAAI9jB,EACb,CAYA,SAASoiB,EAAapiB,GACpB,OAAa,KAATA,GAA0B,IAAX4oB,GACjBvH,EAAQG,QAAQxhB,GACTytB,GAEI,KAATztB,GAA0B,IAAX4oB,GACjBvH,EAAQG,QAAQxhB,GACT0tB,GAEI,KAAT1tB,GAA0B,IAAX4oB,GACjBvH,EAAQG,QAAQxhB,GACT2tB,GAEI,KAAT3tB,GAA0B,IAAX4oB,GACjBvH,EAAQG,QAAQxhB,GACT0sB,GAEI,KAAT1sB,GAA0B,IAAX4oB,GACjBvH,EAAQG,QAAQxhB,GACT4tB,IAEL/M,GAAmB7gB,IAAqB,IAAX4oB,GAA2B,IAAXA,EAIpC,OAAT5oB,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,gBACNqnC,EAAkB7tB,KAE3BqhB,EAAQG,QAAQxhB,GACToiB,IARLf,EAAQ76B,KAAK,gBACN66B,EAAQl1B,MAAM2hC,GAAiBC,EAAmBF,EAAlDxM,CAAqErhB,GAQhF,CAaA,SAAS6tB,EAAkB7tB,GACzB,OAAOqhB,EAAQl1B,MAAM6hC,GAA0BC,EAA0BF,EAAlE1M,CAAqFrhB,EAC9F,CAaA,SAASiuB,EAAyBjuB,GAIhC,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN0nC,CACT,CAaA,SAASA,EAAmBluB,GAC1B,OAAa,OAATA,GAAiB6gB,GAAmB7gB,GAC/B6tB,EAAkB7tB,IAE3BqhB,EAAQz6B,MAAM,gBACPw7B,EAAapiB,GACtB,CAYA,SAASytB,EAA0BztB,GACjC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT0sB,GAEFtK,EAAapiB,EACtB,CAYA,SAAS0tB,EAAuB1tB,GAC9B,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChBssB,EAAS,GACF6B,GAEF/L,EAAapiB,EACtB,CAYA,SAASmuB,EAAsBnuB,GAC7B,GAAa,KAATA,EAAa,CACf,MAAMtc,EAAO4oC,EAAOvhC,cACpB,OAAIohC,GAAat/B,SAASnJ,IACxB29B,EAAQG,QAAQxhB,GACT2tB,GAEFvL,EAAapiB,EACtB,CACA,OAAIqgB,GAAWrgB,IAASssB,EAAO5nC,OAAS,GACtC28B,EAAQG,QAAQxhB,GAEhBssB,GAAUrR,OAAOkG,aAAanhB,GACvBmuB,GAEF/L,EAAapiB,EACtB,CAYA,SAAS4tB,EAAwB5tB,GAC/B,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT0sB,GAEFtK,EAAapiB,EACtB,CAoBA,SAAS0sB,EAA8B1sB,GACrC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT2tB,GAII,KAAT3tB,GAA0B,IAAX4oB,GACjBvH,EAAQG,QAAQxhB,GACT0sB,GAEFtK,EAAapiB,EACtB,CAYA,SAAS2tB,EAAkB3tB,GACzB,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,gBACNunC,EAAkB/tB,KAE3BqhB,EAAQG,QAAQxhB,GACT2tB,EACT,CAYA,SAASI,EAAkB/tB,GAMzB,OALAqhB,EAAQ76B,KAAK,YAKN86B,EAAGthB,EACZ,CACF,EA9wBE0oB,UAeF,SAA2BxK,GACzB,IAAIrzB,EAAQqzB,EAAOx5B,OACnB,KAAOmG,MACoB,UAArBqzB,EAAOrzB,GAAO,IAA4C,aAA1BqzB,EAAOrzB,GAAO,GAAGhE,QAInDgE,EAAQ,GAAmC,eAA9BqzB,EAAOrzB,EAAQ,GAAG,GAAGhE,OAEpCq3B,EAAOrzB,GAAO,GAAG1F,MAAQ+4B,EAAOrzB,EAAQ,GAAG,GAAG1F,MAE9C+4B,EAAOrzB,EAAQ,GAAG,GAAG1F,MAAQ+4B,EAAOrzB,EAAQ,GAAG,GAAG1F,MAElD+4B,EAAOhC,OAAOrxB,EAAQ,EAAG,IAE3B,OAAOqzB,CACT,EA9BE4E,UAAU,GAINgL,GAAkB,CACtBrM,SA2zBF,SAAiCJ,EAASC,EAAIwC,GAC5C,OAaA,SAAe9jB,GAIb,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN66B,EAAQM,QAAQuC,GAAW5C,EAAIwC,EACxC,CACF,EA90BEM,SAAS,GAEL4J,GAA2B,CAC/BvM,SA0wBF,SAA0CJ,EAASC,EAAIwC,GACrD,MAAMhC,EAAOp3B,KACb,OAaA,SAAesV,GACb,GAAI6gB,GAAmB7gB,GAIrB,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN29B,EAET,OAAOL,EAAI9jB,EACb,EAaA,SAASmkB,EAAMnkB,GACb,OAAO8hB,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MAAQsP,EAAI9jB,GAAQshB,EAAGthB,EAC5D,CACF,EAhzBEokB,SAAS,GCjBX,MAAMgK,GAAsB,CAC1B3M,SA+ZF,SAAqCJ,EAASC,EAAIwC,GAChD,MAAMhC,EAAOp3B,KACb,OAOA,SAAesV,GACb,GAAa,OAATA,EACF,OAAO8jB,EAAI9jB,GAKb,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACNq7B,CACT,EAOA,SAASA,EAAU7hB,GACjB,OAAO8hB,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MAAQsP,EAAI9jB,GAAQshB,EAAGthB,EAC5D,CACF,EAzbEokB,SAAS,GAIEiK,GAAa,CACxB3qC,KAAM,aACN+9B,SAQF,SAA4BJ,EAASC,EAAIwC,GACvC,MAAMhC,EAAOp3B,KAEP4jC,EAAa,CACjB7M,SAiSF,SAA4BJ,EAASC,EAAIwC,GACvC,IAAI7lB,EAAO,EACX,OAAOswB,EAOP,SAASA,EAAYvuB,GAInB,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACNrB,CACT,CAcA,SAASA,EAAM6a,GAKb,OADAqhB,EAAQz6B,MAAM,mBACPm6B,GAAc/gB,GAAQohB,GAAaC,EAASmN,EAAqB,aAAc1M,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAApI0M,CAAuIphB,GAAQwuB,EAAoBxuB,EAClM,CAcA,SAASwuB,EAAoBxuB,GAC3B,OAAIA,IAAS4oB,GACXvH,EAAQz6B,MAAM,2BACP6nC,EAAczuB,IAEhB8jB,EAAI9jB,EACb,CAcA,SAASyuB,EAAczuB,GACrB,OAAIA,IAAS4oB,GACX3qB,IACAojB,EAAQG,QAAQxhB,GACTyuB,GAELxwB,GAAQywB,GACVrN,EAAQ76B,KAAK,2BACNu6B,GAAc/gB,GAAQohB,GAAaC,EAASsN,EAAoB,aAA1CvN,CAAwDphB,GAAQ2uB,EAAmB3uB,IAE3G8jB,EAAI9jB,EACb,CAcA,SAAS2uB,EAAmB3uB,GAC1B,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,mBACN86B,EAAGthB,IAEL8jB,EAAI9jB,EACb,CACF,EApYEokB,SAAS,GAEX,IAGIwE,EAHAgG,EAAgB,EAChBF,EAAW,EAGf,OAcA,SAAe1uB,GAEb,OAeF,SAA4BA,GAC1B,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAM9C,OALAkqC,EAAgBjK,GAAyB,eAAjBA,EAAK,GAAG99B,KAAwB89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,OAAS,EACvGkkC,EAAS5oB,EACTqhB,EAAQz6B,MAAM,cACdy6B,EAAQz6B,MAAM,mBACdy6B,EAAQz6B,MAAM,2BACPilC,EAAa7rB,EACtB,CAvBS6uB,CAAmB7uB,EAC5B,EAoCA,SAAS6rB,EAAa7rB,GACpB,OAAIA,IAAS4oB,GACX8F,IACArN,EAAQG,QAAQxhB,GACT6rB,GAEL6C,EAAW,EACN5K,EAAI9jB,IAEbqhB,EAAQ76B,KAAK,2BACNu6B,GAAc/gB,GAAQohB,GAAaC,EAASyN,EAAY,aAAlC1N,CAAgDphB,GAAQ8uB,EAAW9uB,GAClG,CAcA,SAAS8uB,EAAW9uB,GAClB,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,mBACNs7B,EAAKkB,UAAY1B,EAAGthB,GAAQqhB,EAAQl1B,MAAMiiC,GAAqBW,EAAgB5K,EAAnD9C,CAA0DrhB,KAE/FqhB,EAAQz6B,MAAM,uBACdy6B,EAAQz6B,MAAM,cAAe,CAC3By3B,YAAa,WAER3xB,EAAKsT,GACd,CAcA,SAAStT,EAAKsT,GACZ,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAK,uBACNsoC,EAAW9uB,IAEhB+gB,GAAc/gB,IAChBqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAK,uBACN46B,GAAaC,EAAS2N,EAAY,aAAlC5N,CAAgDphB,IAE5C,KAATA,GAAeA,IAAS4oB,EACnB9E,EAAI9jB,IAEbqhB,EAAQG,QAAQxhB,GACTtT,EACT,CAcA,SAASsiC,EAAWhvB,GAClB,OAAa,OAATA,GAAiB6gB,GAAmB7gB,GAC/B8uB,EAAW9uB,IAEpBqhB,EAAQz6B,MAAM,uBACdy6B,EAAQz6B,MAAM,cAAe,CAC3By3B,YAAa,WAER4Q,EAAKjvB,GACd,CAcA,SAASivB,EAAKjvB,GACZ,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAK,uBACNsoC,EAAW9uB,IAEP,KAATA,GAAeA,IAAS4oB,EACnB9E,EAAI9jB,IAEbqhB,EAAQG,QAAQxhB,GACTivB,EACT,CAeA,SAASF,EAAe/uB,GACtB,OAAOqhB,EAAQM,QAAQ2M,EAAYnK,EAAO+K,EAAnC7N,CAAkDrhB,EAC3D,CAcA,SAASkvB,EAAclvB,GAIrB,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACNk7B,CACT,CAcA,SAASA,EAAa1hB,GACpB,OAAO4uB,EAAgB,GAAK7N,GAAc/gB,GAAQohB,GAAaC,EAAS8N,EAAoB,aAAcP,EAAgB,EAAxExN,CAA2EphB,GAAQmvB,EAAmBnvB,EAC1J,CAcA,SAASmvB,EAAmBnvB,GAC1B,OAAa,OAATA,GAAiB6gB,GAAmB7gB,GAC/BqhB,EAAQl1B,MAAMiiC,GAAqBW,EAAgB5K,EAAnD9C,CAA0DrhB,IAEnEqhB,EAAQz6B,MAAM,iBACPwoC,EAAapvB,GACtB,CAcA,SAASovB,EAAapvB,GACpB,OAAa,OAATA,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,iBACN2oC,EAAmBnvB,KAE5BqhB,EAAQG,QAAQxhB,GACTovB,EACT,CAcA,SAASjL,EAAMnkB,GAEb,OADAqhB,EAAQ76B,KAAK,cACN86B,EAAGthB,EACZ,CA2GF,EAjZE8iB,UAAU,GChBZ,MAAM,GAAUiB,SAASsL,cAAc,KAMhC,SAASC,GAA8BzrC,GAC5C,MAAM0rC,EAAqB,IAAM1rC,EAAQ,IACzC,GAAQ2rC,UAAYD,EACpB,MAAM3vB,EAAO,GAAQ6vB,YAUrB,OAAyC,KAArC7vB,EAAKgmB,WAAWhmB,EAAKlb,OAAS,IAAiC,SAAVb,KAQlD+b,IAAS2vB,GAA6B3vB,EAC/C,CCrBO,MAAM2vB,GAAqB,CAChC7rC,KAAM,qBACN+9B,SAOF,SAAoCJ,EAASC,EAAIwC,GAC/C,MAAMhC,EAAOp3B,KACb,IAEI0L,EAEAlM,EAJA+T,EAAO,EAKX,OAgBA,SAAe+B,GAKb,OAJAqhB,EAAQz6B,MAAM,sBACdy6B,EAAQz6B,MAAM,4BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,4BACN8V,CACT,EAiBA,SAASA,EAAK0D,GACZ,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,mCACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,mCACNkpC,IAETrO,EAAQz6B,MAAM,2BACdwP,EAAM,GACNlM,EAAOq2B,GACA18B,EAAMmc,GACf,CAcA,SAAS0vB,EAAQ1vB,GACf,OAAa,KAATA,GAAwB,MAATA,GACjBqhB,EAAQz6B,MAAM,uCACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,uCACb66B,EAAQz6B,MAAM,2BACdwP,EAAM,EACNlM,EAAOy2B,GACA98B,IAETw9B,EAAQz6B,MAAM,2BACdwP,EAAM,EACNlM,EAAOw2B,GACA78B,EAAMmc,GACf,CAmBA,SAASnc,EAAMmc,GACb,GAAa,KAATA,GAAe/B,EAAM,CACvB,MAAMwgB,EAAQ4C,EAAQ76B,KAAK,2BAC3B,OAAI0D,IAASq2B,IAAsB+O,GAA8BxN,EAAK8C,eAAenG,KAMrF4C,EAAQz6B,MAAM,4BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,4BACb66B,EAAQ76B,KAAK,sBACN86B,GATEwC,EAAI9jB,EAUf,CACA,OAAI9V,EAAK8V,IAAS/B,IAAS7H,GACzBirB,EAAQG,QAAQxhB,GACTnc,GAEFigC,EAAI9jB,EACb,CACF,GCxIO,MAAM2vB,GAAkB,CAC7BjsC,KAAM,kBACN+9B,SAOF,SAAiCJ,EAASC,EAAIwC,GAC5C,OAYA,SAAe9jB,GAKb,OAJAqhB,EAAQz6B,MAAM,mBACdy6B,EAAQz6B,MAAM,gBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,gBACNwiC,CACT,EAYA,SAASA,EAAOhpB,GAEd,OAAI4gB,GAAiB5gB,IACnBqhB,EAAQz6B,MAAM,wBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,wBACb66B,EAAQ76B,KAAK,mBACN86B,GAEFwC,EAAI9jB,EACb,CACF,GClDO,MAAM4vB,GAAa,CACxBlsC,KAAM,aACN+9B,SAOF,SAA4BJ,EAASC,GACnC,OAGA,SAAethB,GAIb,OAHAqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN46B,GAAaC,EAASC,EAAI,aACnC,CACF,GCVO,MAAMuO,GAAW,CACtBnsC,KAAM,WACN+9B,SAoHF,SAA0BJ,EAASC,EAAIwC,GACrC,MAAMhC,EAAOp3B,KACb,IAEIolC,EAEApkC,EAJAb,EAAQi3B,EAAK5D,OAAOx5B,OAOxB,KAAOmG,KACL,IAAoC,eAA/Bi3B,EAAK5D,OAAOrzB,GAAO,GAAGhE,MAAwD,cAA/Bi7B,EAAK5D,OAAOrzB,GAAO,GAAGhE,QAA0Bi7B,EAAK5D,OAAOrzB,GAAO,GAAGklC,UAAW,CACnID,EAAahO,EAAK5D,OAAOrzB,GAAO,GAChC,KACF,CAEF,OAiBA,SAAemV,GAEb,IAAK8vB,EACH,OAAOhM,EAAI9jB,GAYb,GAAI8vB,EAAWE,UACb,OAAOC,EAAYjwB,GAWrB,OATAtU,EAAUo2B,EAAKhD,OAAOpzB,QAAQmB,SAASi+B,GAAoBhJ,EAAK8C,eAAe,CAC7Ez/B,MAAO2qC,EAAWxqC,IAClBA,IAAKw8B,EAAKwB,UAEZjC,EAAQz6B,MAAM,YACdy6B,EAAQz6B,MAAM,eACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAK,YACN29B,CACT,EAkBA,SAASA,EAAMnkB,GAKb,OAAa,KAATA,EACKqhB,EAAQM,QAAQuO,GAAmBC,EAAYzkC,EAAUykC,EAAaF,EAAtE5O,CAAmFrhB,GAI/E,KAATA,EACKqhB,EAAQM,QAAQyO,GAAwBD,EAAYzkC,EAAU2kC,EAAmBJ,EAAjF5O,CAA8FrhB,GAIhGtU,EAAUykC,EAAWnwB,GAAQiwB,EAAYjwB,EAClD,CAgBA,SAASqwB,EAAiBrwB,GACxB,OAAOqhB,EAAQM,QAAQ2O,GAA6BH,EAAYF,EAAzD5O,CAAsErhB,EAC/E,CAkBA,SAASmwB,EAAWnwB,GAElB,OAAOshB,EAAGthB,EACZ,CAkBA,SAASiwB,EAAYjwB,GAEnB,OADA8vB,EAAWC,WAAY,EAChBjM,EAAI9jB,EACb,CACF,EA9QE0oB,UAiCF,SAA2BxK,EAAQQ,GACjC,IAGID,EAEAniB,EAEAi0B,EAEAj6B,EATAzL,EAAQqzB,EAAOx5B,OACf6pB,EAAS,EAWb,KAAO1jB,KAEL,GADA4zB,EAAQP,EAAOrzB,GAAO,GAClByR,EAAM,CAER,GAAmB,SAAfmiB,EAAM53B,MAAkC,cAAf43B,EAAM53B,MAAwB43B,EAAMuR,UAC/D,MAKuB,UAArB9R,EAAOrzB,GAAO,IAAiC,cAAf4zB,EAAM53B,OACxC43B,EAAMuR,WAAY,EAEtB,MAAO,GAAIO,GACT,GAAyB,UAArBrS,EAAOrzB,GAAO,KAAkC,eAAf4zB,EAAM53B,MAAwC,cAAf43B,EAAM53B,QAA0B43B,EAAMsR,YACxGzzB,EAAOzR,EACY,cAAf4zB,EAAM53B,MAAsB,CAC9B0nB,EAAS,EACT,KACF,MAEsB,aAAfkQ,EAAM53B,OACf0pC,EAAQ1lC,GAGZ,MAAM2lC,EAAQ,CACZ3pC,KAA+B,cAAzBq3B,EAAO5hB,GAAM,GAAGzV,KAAuB,OAAS,QACtD1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGnX,OACzCG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOA,EAAOx5B,OAAS,GAAG,GAAGY,MAEhDsQ,EAAQ,CACZ/O,KAAM,QACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGnX,OACzCG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOqS,GAAO,GAAGjrC,MAEpCyc,EAAO,CACXlb,KAAM,YACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,EAAOiS,EAAS,GAAG,GAAGjpB,KACtDA,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOqS,EAAQ,GAAG,GAAGprC,QAwB9C,OAtBAmR,EAAQ,CAAC,CAAC,QAASk6B,EAAO9R,GAAU,CAAC,QAAS9oB,EAAO8oB,IAGrDpoB,EAAQ+hB,GAAK/hB,EAAO4nB,EAAOlxB,MAAMsP,EAAO,EAAGA,EAAOiS,EAAS,IAG3DjY,EAAQ+hB,GAAK/hB,EAAO,CAAC,CAAC,QAASyL,EAAM2c,KAKrCpoB,EAAQ+hB,GAAK/hB,EAAO0uB,GAAWtG,EAAQI,OAAOmB,WAAWwQ,WAAWxM,KAAM/F,EAAOlxB,MAAMsP,EAAOiS,EAAS,EAAGgiB,EAAQ,GAAI7R,IAGtHpoB,EAAQ+hB,GAAK/hB,EAAO,CAAC,CAAC,OAAQyL,EAAM2c,GAAUR,EAAOqS,EAAQ,GAAIrS,EAAOqS,EAAQ,GAAI,CAAC,OAAQ36B,EAAO8oB,KAGpGpoB,EAAQ+hB,GAAK/hB,EAAO4nB,EAAOlxB,MAAMujC,EAAQ,IAGzCj6B,EAAQ+hB,GAAK/hB,EAAO,CAAC,CAAC,OAAQk6B,EAAO9R,KACrCxC,GAAOgC,EAAQ5hB,EAAM4hB,EAAOx5B,OAAQ4R,GAC7B4nB,CACT,EA5GE8G,WAiBF,SAA4B9G,GAC1B,IAAIrzB,GAAS,EACb,OAASA,EAAQqzB,EAAOx5B,QAAQ,CAC9B,MAAM+5B,EAAQP,EAAOrzB,GAAO,GACT,eAAf4zB,EAAM53B,MAAwC,cAAf43B,EAAM53B,MAAuC,aAAf43B,EAAM53B,OAErEq3B,EAAOhC,OAAOrxB,EAAQ,EAAkB,eAAf4zB,EAAM53B,KAAwB,EAAI,GAC3D43B,EAAM53B,KAAO,OACbgE,IAEJ,CACA,OAAOqzB,CACT,GAzBMgS,GAAoB,CACxBzO,SA8QF,SAA0BJ,EAASC,EAAIwC,GACrC,OAYA,SAAuB9jB,GAKrB,OAJAqhB,EAAQz6B,MAAM,YACdy6B,EAAQz6B,MAAM,kBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,kBACNkqC,CACT,EAYA,SAASA,EAAe1wB,GACtB,OAAO8gB,GAA0B9gB,GAAQ6qB,GAAkBxJ,EAASsP,EAA3B9F,CAAyC7qB,GAAQ2wB,EAAa3wB,EACzG,CAYA,SAAS2wB,EAAa3wB,GACpB,OAAa,KAATA,EACK4wB,EAAY5wB,GAEd4pB,GAAmBvI,EAASwP,EAA0BC,EAA4B,sBAAuB,6BAA8B,mCAAoC,yBAA0B,4BAA6B,GAAlOlH,CAAsO5pB,EAC/O,CAYA,SAAS6wB,EAAyB7wB,GAChC,OAAO8gB,GAA0B9gB,GAAQ6qB,GAAkBxJ,EAAS0P,EAA3BlG,CAA4C7qB,GAAQ4wB,EAAY5wB,EAC3G,CAYA,SAAS8wB,EAA2B9wB,GAClC,OAAO8jB,EAAI9jB,EACb,CAYA,SAAS+wB,EAAgB/wB,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzB2qB,GAAatJ,EAAS2P,EAAoBlN,EAAK,gBAAiB,sBAAuB,sBAAvF6G,CAA8G3qB,GAEhH4wB,EAAY5wB,EACrB,CAYA,SAASgxB,EAAmBhxB,GAC1B,OAAO8gB,GAA0B9gB,GAAQ6qB,GAAkBxJ,EAASuP,EAA3B/F,CAAwC7qB,GAAQ4wB,EAAY5wB,EACvG,CAYA,SAAS4wB,EAAY5wB,GACnB,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,kBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,kBACb66B,EAAQ76B,KAAK,YACN86B,GAEFwC,EAAI9jB,EACb,CACF,GA9YMowB,GAAyB,CAC7B3O,SAmZF,SAA+BJ,EAASC,EAAIwC,GAC1C,MAAMhC,EAAOp3B,KACb,OAYA,SAAuBsV,GACrB,OAAOuqB,GAAavnC,KAAK8+B,EAAMT,EAAS4P,EAAoBC,EAAsB,YAAa,kBAAmB,kBAA3G3G,CAA8HvqB,EACvI,EAYA,SAASixB,EAAmBjxB,GAC1B,OAAO8hB,EAAKhD,OAAOpzB,QAAQmB,SAASi+B,GAAoBhJ,EAAK8C,eAAe9C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAAG,IAAIsI,MAAM,GAAI,KAAOs0B,EAAGthB,GAAQ8jB,EAAI9jB,EACtJ,CAYA,SAASkxB,EAAqBlxB,GAC5B,OAAO8jB,EAAI9jB,EACb,CACF,GA7bMswB,GAA8B,CAClC7O,SAkcF,SAAoCJ,EAASC,EAAIwC,GAC/C,OAcA,SAAiC9jB,GAO/B,OAJAqhB,EAAQz6B,MAAM,aACdy6B,EAAQz6B,MAAM,mBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,mBACN2qC,CACT,EAcA,SAASA,EAAuBnxB,GAC9B,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,mBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,mBACb66B,EAAQ76B,KAAK,aACN86B,GAEFwC,EAAI9jB,EACb,CACF,GC3gBO,MAAMoxB,GAAkB,CAC7B1tC,KAAM,kBACN+9B,SAQF,SAAiCJ,EAASC,EAAIwC,GAC5C,MAAMhC,EAAOp3B,KACb,OAYA,SAAesV,GAKb,OAJAqhB,EAAQz6B,MAAM,cACdy6B,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBACN8V,CACT,EAYA,SAASA,EAAK0D,GACZ,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,eACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAK,cACN29B,GAEFL,EAAI9jB,EACb,CA6BA,SAASmkB,EAAMnkB,GAMb,OAAgB,KAATA,GAAe,2BAA4B8hB,EAAKhD,OAAOmB,WAAa6D,EAAI9jB,GAAQshB,EAAGthB,EAC5F,CACF,EArFEglB,WAAY6K,GAAS7K,YCUhB,SAASqM,GAAkBrxB,GAChC,OACW,OAATA,GACA8gB,GAA0B9gB,IAC1BihB,GAAkBjhB,GAEX,EAELghB,GAAmBhhB,GACd,OADT,CAGF,CClBO,MAAMsxB,GAAY,CACvB5tC,KAAM,YACN+9B,SA+HF,SAA2BJ,EAASC,GAClC,MAAMiQ,EAAmB7mC,KAAKo0B,OAAOmB,WAAWsR,iBAAiBtN,KAC3D/E,EAAWx0B,KAAKw0B,SAChBiB,EAASkR,GAAkBnS,GAGjC,IAAI0J,EACJ,OAYA,SAAe5oB,GAGb,OAFA4oB,EAAS5oB,EACTqhB,EAAQz6B,MAAM,qBACPoiC,EAAOhpB,EAChB,EAYA,SAASgpB,EAAOhpB,GACd,GAAIA,IAAS4oB,EAEX,OADAvH,EAAQG,QAAQxhB,GACTgpB,EAET,MAAMvK,EAAQ4C,EAAQ76B,KAAK,qBAGrB29B,EAAQkN,GAAkBrxB,GAI1B1D,GAAQ6nB,GAAmB,IAAVA,GAAehE,GAAUoR,EAAiB1kC,SAASmT,GACpEuwB,GAASpQ,GAAqB,IAAXA,GAAgBgE,GAASoN,EAAiB1kC,SAASqyB,GAG5E,OAFAT,EAAM+S,MAAQ9V,QAAmB,KAAXkN,EAAgBtsB,EAAOA,IAAS6jB,IAAWoQ,IACjE9R,EAAMgT,OAAS/V,QAAmB,KAAXkN,EAAgB2H,EAAQA,IAAUpM,IAAU7nB,IAC5DglB,EAAGthB,EACZ,CACF,EAnLEglB,WASF,SAA6B9G,EAAQQ,GACnC,IAEIpiB,EAEAk0B,EAEAzuB,EAEA2vB,EAEAC,EAEAC,EAEAC,EAEAtjB,EAhBA1jB,GAAS,EAsBb,OAASA,EAAQqzB,EAAOx5B,QAEtB,GAAyB,UAArBw5B,EAAOrzB,GAAO,IAA4C,sBAA1BqzB,EAAOrzB,GAAO,GAAGhE,MAAgCq3B,EAAOrzB,GAAO,GAAG4mC,OAIpG,IAHAn1B,EAAOzR,EAGAyR,KAEL,GAAwB,SAApB4hB,EAAO5hB,GAAM,IAA0C,sBAAzB4hB,EAAO5hB,GAAM,GAAGzV,MAAgCq3B,EAAO5hB,GAAM,GAAGk1B,OAElG9S,EAAQkG,eAAe1G,EAAO5hB,GAAM,IAAIspB,WAAW,KAAOlH,EAAQkG,eAAe1G,EAAOrzB,GAAO,IAAI+6B,WAAW,GAAI,CAKhH,IAAK1H,EAAO5hB,GAAM,GAAGm1B,QAAUvT,EAAOrzB,GAAO,GAAG2mC,SAAWtT,EAAOrzB,GAAO,GAAGvF,IAAIipB,OAAS2P,EAAOrzB,GAAO,GAAG1F,MAAMopB,QAAU,MAAQ2P,EAAO5hB,GAAM,GAAGhX,IAAIipB,OAAS2P,EAAO5hB,GAAM,GAAGnX,MAAMopB,OAAS2P,EAAOrzB,GAAO,GAAGvF,IAAIipB,OAAS2P,EAAOrzB,GAAO,GAAG1F,MAAMopB,QAAU,GAC3P,SAIFqjB,EAAM1T,EAAO5hB,GAAM,GAAGhX,IAAIipB,OAAS2P,EAAO5hB,GAAM,GAAGnX,MAAMopB,OAAS,GAAK2P,EAAOrzB,GAAO,GAAGvF,IAAIipB,OAAS2P,EAAOrzB,GAAO,GAAG1F,MAAMopB,OAAS,EAAI,EAAI,EAC7I,MAAMppB,EAAQ9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGhX,KAC1CA,EAAMjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,GAAO,GAAG1F,OAC/C2sC,GAAU3sC,GAAQysC,GAClBE,GAAUxsC,EAAKssC,GACfF,EAAkB,CAChB7qC,KAAM+qC,EAAM,EAAI,iBAAmB,mBACnCzsC,QACAG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGhX,MAEzCqsC,EAAkB,CAChB9qC,KAAM+qC,EAAM,EAAI,iBAAmB,mBACnCzsC,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,GAAO,GAAG1F,OAC1CG,OAEFyc,EAAO,CACLlb,KAAM+qC,EAAM,EAAI,aAAe,eAC/BzsC,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGhX,KACzCA,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,GAAO,GAAG1F,QAE1CqrC,EAAQ,CACN3pC,KAAM+qC,EAAM,EAAI,SAAW,WAC3BzsC,MAAO9C,OAAO4F,OAAO,CAAC,EAAGypC,EAAgBvsC,OACzCG,IAAKjD,OAAO4F,OAAO,CAAC,EAAG0pC,EAAgBrsC,MAEzC44B,EAAO5hB,GAAM,GAAGhX,IAAMjD,OAAO4F,OAAO,CAAC,EAAGypC,EAAgBvsC,OACxD+4B,EAAOrzB,GAAO,GAAG1F,MAAQ9C,OAAO4F,OAAO,CAAC,EAAG0pC,EAAgBrsC,KAC3DusC,EAAa,GAGT3T,EAAO5hB,GAAM,GAAGhX,IAAIipB,OAAS2P,EAAO5hB,GAAM,GAAGnX,MAAMopB,SACrDsjB,EAAaxZ,GAAKwZ,EAAY,CAAC,CAAC,QAAS3T,EAAO5hB,GAAM,GAAIoiB,GAAU,CAAC,OAAQR,EAAO5hB,GAAM,GAAIoiB,MAIhGmT,EAAaxZ,GAAKwZ,EAAY,CAAC,CAAC,QAASrB,EAAO9R,GAAU,CAAC,QAASgT,EAAiBhT,GAAU,CAAC,OAAQgT,EAAiBhT,GAAU,CAAC,QAAS3c,EAAM2c,KAKnJmT,EAAaxZ,GAAKwZ,EAAY7M,GAAWtG,EAAQI,OAAOmB,WAAWwQ,WAAWxM,KAAM/F,EAAOlxB,MAAMsP,EAAO,EAAGzR,GAAQ6zB,IAGnHmT,EAAaxZ,GAAKwZ,EAAY,CAAC,CAAC,OAAQ9vB,EAAM2c,GAAU,CAAC,QAASiT,EAAiBjT,GAAU,CAAC,OAAQiT,EAAiBjT,GAAU,CAAC,OAAQ8R,EAAO9R,KAG7IR,EAAOrzB,GAAO,GAAGvF,IAAIipB,OAAS2P,EAAOrzB,GAAO,GAAG1F,MAAMopB,QACvDA,EAAS,EACTsjB,EAAaxZ,GAAKwZ,EAAY,CAAC,CAAC,QAAS3T,EAAOrzB,GAAO,GAAI6zB,GAAU,CAAC,OAAQR,EAAOrzB,GAAO,GAAI6zB,MAEhGnQ,EAAS,EAEX2N,GAAOgC,EAAQ5hB,EAAO,EAAGzR,EAAQyR,EAAO,EAAGu1B,GAC3ChnC,EAAQyR,EAAOu1B,EAAWntC,OAAS6pB,EAAS,EAC5C,KACF,CAMN1jB,GAAS,EACT,OAASA,EAAQqzB,EAAOx5B,QACQ,sBAA1Bw5B,EAAOrzB,GAAO,GAAGhE,OACnBq3B,EAAOrzB,GAAO,GAAGhE,KAAO,QAG5B,OAAOq3B,CACT,GAuEA,SAAS4T,GAAUzd,EAAO9F,GACxB8F,EAAMI,QAAUlG,EAChB8F,EAAM9F,QAAUA,EAChB8F,EAAMyR,cAAgBvX,CACxB,CC7MO,MAAMwjB,GAAW,CACtBruC,KAAM,WACN+9B,SAOF,SAA0BJ,EAASC,EAAIwC,GACrC,IAAI7lB,EAAO,EACX,OAcA,SAAe+B,GAMb,OALAqhB,EAAQz6B,MAAM,YACdy6B,EAAQz6B,MAAM,kBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,kBACb66B,EAAQz6B,MAAM,oBACP0V,CACT,EAcA,SAASA,EAAK0D,GACZ,OAAIqgB,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GACTgyB,GAEI,KAAThyB,EACK8jB,EAAI9jB,GAENiyB,EAAWjyB,EACpB,CAcA,SAASgyB,EAAmBhyB,GAE1B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeugB,GAAkBvgB,IAEjE/B,EAAO,EACAi0B,EAAyBlyB,IAE3BiyB,EAAWjyB,EACpB,CAcA,SAASkyB,EAAyBlyB,GAChC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChB/B,EAAO,EACAk0B,IAIK,KAATnyB,GAAwB,KAATA,GAAwB,KAATA,GAAeugB,GAAkBvgB,KAAU/B,IAAS,IACrFojB,EAAQG,QAAQxhB,GACTkyB,IAETj0B,EAAO,EACAg0B,EAAWjyB,GACpB,CAYA,SAASmyB,EAAUnyB,GACjB,OAAa,KAATA,GACFqhB,EAAQ76B,KAAK,oBACb66B,EAAQz6B,MAAM,kBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,kBACb66B,EAAQ76B,KAAK,YACN86B,GAII,OAATthB,GAA0B,KAATA,GAAwB,KAATA,GAAeygB,GAAazgB,GACvD8jB,EAAI9jB,IAEbqhB,EAAQG,QAAQxhB,GACTmyB,EACT,CAYA,SAASF,EAAWjyB,GAClB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACToyB,GAEL5R,GAAWxgB,IACbqhB,EAAQG,QAAQxhB,GACTiyB,GAEFnO,EAAI9jB,EACb,CAYA,SAASoyB,EAAiBpyB,GACxB,OAAOugB,GAAkBvgB,GAAQqyB,EAAWryB,GAAQ8jB,EAAI9jB,EAC1D,CAYA,SAASqyB,EAAWryB,GAClB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChB/B,EAAO,EACAm0B,GAEI,KAATpyB,GAEFqhB,EAAQ76B,KAAK,oBAAoBK,KAAO,gBACxCw6B,EAAQz6B,MAAM,kBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,kBACb66B,EAAQ76B,KAAK,YACN86B,GAEFgR,EAAWtyB,EACpB,CAcA,SAASsyB,EAAWtyB,GAElB,IAAc,KAATA,GAAeugB,GAAkBvgB,KAAU/B,IAAS,GAAI,CAC3D,MAAMshB,EAAgB,KAATvf,EAAcsyB,EAAaD,EAExC,OADAhR,EAAQG,QAAQxhB,GACTuf,CACT,CACA,OAAOuE,EAAI9jB,EACb,CACF,GC1NO,MAAMuyB,GAAW,CACtB7uC,KAAM,WACN+9B,SAOF,SAA0BJ,EAASC,EAAIwC,GACrC,MAAMhC,EAAOp3B,KAEb,IAAIk+B,EAEA/9B,EAEA88B,EACJ,OAYA,SAAe3nB,GAIb,OAHAqhB,EAAQz6B,MAAM,YACdy6B,EAAQz6B,MAAM,gBACdy6B,EAAQG,QAAQxhB,GACT1D,CACT,EAgBA,SAASA,EAAK0D,GACZ,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTwsB,GAEI,KAATxsB,GACFqhB,EAAQG,QAAQxhB,GACTysB,GAEI,KAATzsB,GACFqhB,EAAQG,QAAQxhB,GACTwyB,GAILnS,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GACTyyB,GAEF3O,EAAI9jB,EACb,CAgBA,SAASwsB,EAAgBxsB,GACvB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT2sB,GAEI,KAAT3sB,GACFqhB,EAAQG,QAAQxhB,GAChBnV,EAAQ,EACD+hC,GAELvM,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GACT0yB,GAEF5O,EAAI9jB,EACb,CAYA,SAAS2sB,EAAkB3sB,GACzB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT2yB,GAEF7O,EAAI9jB,EACb,CAYA,SAAS4yB,EAAQ5yB,GACf,OAAa,OAATA,EACK8jB,EAAI9jB,GAEA,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT6yB,GAELhS,GAAmB7gB,IACrB2nB,EAAciL,EACPE,EAAiB9yB,KAE1BqhB,EAAQG,QAAQxhB,GACT4yB,EACT,CAYA,SAASC,EAAa7yB,GACpB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT2yB,GAEFC,EAAQ5yB,EACjB,CAYA,SAAS2yB,EAAW3yB,GAClB,OAAgB,KAATA,EAAc1a,EAAI0a,GAAiB,KAATA,EAAc6yB,EAAa7yB,GAAQ4yB,EAAQ5yB,EAC9E,CAYA,SAAS4sB,EAAgB5sB,GACvB,MAAMnc,EAAQ,SACd,OAAImc,IAASnc,EAAM+hC,WAAW/6B,MAC5Bw2B,EAAQG,QAAQxhB,GACCnc,IAAVgH,EAAyBkoC,EAAQnG,GAEnC9I,EAAI9jB,EACb,CAYA,SAAS+yB,EAAM/yB,GACb,OAAa,OAATA,EACK8jB,EAAI9jB,GAEA,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTgzB,GAELnS,GAAmB7gB,IACrB2nB,EAAcoL,EACPD,EAAiB9yB,KAE1BqhB,EAAQG,QAAQxhB,GACT+yB,EACT,CAYA,SAASC,EAAWhzB,GAClB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTizB,GAEFF,EAAM/yB,EACf,CAYA,SAASizB,EAASjzB,GAChB,OAAa,KAATA,EACK1a,EAAI0a,GAEA,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTizB,GAEFF,EAAM/yB,EACf,CAYA,SAAS0yB,EAAY1yB,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZ1a,EAAI0a,GAET6gB,GAAmB7gB,IACrB2nB,EAAc+K,EACPI,EAAiB9yB,KAE1BqhB,EAAQG,QAAQxhB,GACT0yB,EACT,CAYA,SAASF,EAAYxyB,GACnB,OAAa,OAATA,EACK8jB,EAAI9jB,GAEA,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTkzB,GAELrS,GAAmB7gB,IACrB2nB,EAAc6K,EACPM,EAAiB9yB,KAE1BqhB,EAAQG,QAAQxhB,GACTwyB,EACT,CAYA,SAASU,EAAiBlzB,GACxB,OAAgB,KAATA,EAAc1a,EAAI0a,GAAQwyB,EAAYxyB,EAC/C,CAYA,SAASysB,EAAczsB,GAErB,OAAIqgB,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GACTmzB,GAEFrP,EAAI9jB,EACb,CAYA,SAASmzB,EAASnzB,GAEhB,OAAa,KAATA,GAAeugB,GAAkBvgB,IACnCqhB,EAAQG,QAAQxhB,GACTmzB,GAEFC,EAAgBpzB,EACzB,CAYA,SAASozB,EAAgBpzB,GACvB,OAAI6gB,GAAmB7gB,IACrB2nB,EAAcyL,EACPN,EAAiB9yB,IAEtB+gB,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTozB,GAEF9tC,EAAI0a,EACb,CAYA,SAASyyB,EAAQzyB,GAEf,OAAa,KAATA,GAAeugB,GAAkBvgB,IACnCqhB,EAAQG,QAAQxhB,GACTyyB,GAEI,KAATzyB,GAAwB,KAATA,GAAe8gB,GAA0B9gB,GACnDqzB,EAAerzB,GAEjB8jB,EAAI9jB,EACb,CAYA,SAASqzB,EAAerzB,GACtB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACT1a,GAII,KAAT0a,GAAwB,KAATA,GAAeqgB,GAAWrgB,IAC3CqhB,EAAQG,QAAQxhB,GACTszB,GAELzS,GAAmB7gB,IACrB2nB,EAAc0L,EACPP,EAAiB9yB,IAEtB+gB,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTqzB,GAEF/tC,EAAI0a,EACb,CAYA,SAASszB,EAAqBtzB,GAE5B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeugB,GAAkBvgB,IAChFqhB,EAAQG,QAAQxhB,GACTszB,GAEFC,EAA0BvzB,EACnC,CAaA,SAASuzB,EAA0BvzB,GACjC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTwzB,GAEL3S,GAAmB7gB,IACrB2nB,EAAc4L,EACPT,EAAiB9yB,IAEtB+gB,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTuzB,GAEFF,EAAerzB,EACxB,CAaA,SAASwzB,EAA4BxzB,GACnC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzD8jB,EAAI9jB,GAEA,KAATA,GAAwB,KAATA,GACjBqhB,EAAQG,QAAQxhB,GAChB4oB,EAAS5oB,EACFyzB,GAEL5S,GAAmB7gB,IACrB2nB,EAAc6L,EACPV,EAAiB9yB,IAEtB+gB,GAAc/gB,IAChBqhB,EAAQG,QAAQxhB,GACTwzB,IAETnS,EAAQG,QAAQxhB,GACT0zB,EACT,CAYA,SAASD,EAA4BzzB,GACnC,OAAIA,IAAS4oB,GACXvH,EAAQG,QAAQxhB,GAChB4oB,OAASlU,EACFif,GAEI,OAAT3zB,EACK8jB,EAAI9jB,GAET6gB,GAAmB7gB,IACrB2nB,EAAc8L,EACPX,EAAiB9yB,KAE1BqhB,EAAQG,QAAQxhB,GACTyzB,EACT,CAYA,SAASC,EAA8B1zB,GACrC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACxE8jB,EAAI9jB,GAEA,KAATA,GAAwB,KAATA,GAAe8gB,GAA0B9gB,GACnDqzB,EAAerzB,IAExBqhB,EAAQG,QAAQxhB,GACT0zB,EACT,CAaA,SAASC,EAAiC3zB,GACxC,OAAa,KAATA,GAAwB,KAATA,GAAe8gB,GAA0B9gB,GACnDqzB,EAAerzB,GAEjB8jB,EAAI9jB,EACb,CAYA,SAAS1a,EAAI0a,GACX,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,gBACb66B,EAAQ76B,KAAK,YACN86B,GAEFwC,EAAI9jB,EACb,CAgBA,SAAS8yB,EAAiB9yB,GAKxB,OAJAqhB,EAAQ76B,KAAK,gBACb66B,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACNotC,CACT,CAgBA,SAASA,EAAgB5zB,GAGvB,OAAO+gB,GAAc/gB,GAAQohB,GAAaC,EAASwS,EAAuB,aAAc/R,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAAtI0M,CAAyIphB,GAAQ6zB,EAAsB7zB,EACtM,CAgBA,SAAS6zB,EAAsB7zB,GAE7B,OADAqhB,EAAQz6B,MAAM,gBACP+gC,EAAY3nB,EACrB,CACF,GCxpBO,MAAM8zB,GAAiB,CAC5BpwC,KAAM,iBACN+9B,SAQF,SAAgCJ,EAASC,EAAIwC,GAC3C,MAAMhC,EAAOp3B,KACb,OAYA,SAAesV,GAMb,OALAqhB,EAAQz6B,MAAM,aACdy6B,EAAQz6B,MAAM,eACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,eACb66B,EAAQ76B,KAAK,aACN29B,CACT,EAGA,SAASA,EAAMnkB,GAKb,OAAgB,KAATA,GAAe,2BAA4B8hB,EAAKhD,OAAOmB,WAAa6D,EAAI9jB,GAAQshB,EAAGthB,EAC5F,CACF,EAtCEglB,WAAY6K,GAAS7K,YCJhB,MAAM+O,GAAkB,CAC7BrwC,KAAM,kBACN+9B,SAOF,SAAiCJ,EAASC,EAAIwC,GAC5C,OAaA,SAAe9jB,GAGb,OAFAqhB,EAAQz6B,MAAM,mBACdy6B,EAAQG,QAAQxhB,GACTmkB,CACT,EAaA,SAASA,EAAMnkB,GACb,OAAI6gB,GAAmB7gB,IACrBqhB,EAAQ76B,KAAK,mBACN86B,EAAGthB,IAEL8jB,EAAI9jB,EACb,CACF,GC5CO,MAAMg0B,GAAW,CACtBtwC,KAAM,WACN+9B,SAmEF,SAA0BJ,EAASC,EAAIwC,GAErC,IAEI7lB,EAEAwgB,EAJAiQ,EAAW,EAKf,OAcA,SAAe1uB,GAGb,OAFAqhB,EAAQz6B,MAAM,YACdy6B,EAAQz6B,MAAM,oBACPilC,EAAa7rB,EACtB,EAYA,SAAS6rB,EAAa7rB,GACpB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChB0uB,IACO7C,IAETxK,EAAQ76B,KAAK,oBACNytC,EAAQj0B,GACjB,CAYA,SAASi0B,EAAQj0B,GAEf,OAAa,OAATA,EACK8jB,EAAI9jB,GAMA,KAATA,GACFqhB,EAAQz6B,MAAM,SACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,SACNytC,GAII,KAATj0B,GACFye,EAAQ4C,EAAQz6B,MAAM,oBACtBqX,EAAO,EACAwwB,EAAczuB,IAEnB6gB,GAAmB7gB,IACrBqhB,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACNytC,IAIT5S,EAAQz6B,MAAM,gBACPyM,EAAK2M,GACd,CAYA,SAAS3M,EAAK2M,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAe6gB,GAAmB7gB,IACpEqhB,EAAQ76B,KAAK,gBACNytC,EAAQj0B,KAEjBqhB,EAAQG,QAAQxhB,GACT3M,EACT,CAYA,SAASo7B,EAAczuB,GAErB,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GAChB/B,IACOwwB,GAILxwB,IAASywB,GACXrN,EAAQ76B,KAAK,oBACb66B,EAAQ76B,KAAK,YACN86B,EAAGthB,KAIZye,EAAM53B,KAAO,eACNwM,EAAK2M,GACd,CACF,EA7MEykB,QAMF,SAAyBvG,GACvB,IAGIrzB,EAEAjE,EALAstC,EAAgBhW,EAAOx5B,OAAS,EAChCyvC,EAAiB,EAOrB,KAAwC,eAAnCjW,EAAOiW,GAAgB,GAAGttC,MAA4D,UAAnCq3B,EAAOiW,GAAgB,GAAGttC,MAAwD,eAAlCq3B,EAAOgW,GAAe,GAAGrtC,MAA2D,UAAlCq3B,EAAOgW,GAAe,GAAGrtC,MAIjL,IAHAgE,EAAQspC,IAGCtpC,EAAQqpC,GACf,GAA8B,iBAA1BhW,EAAOrzB,GAAO,GAAGhE,KAAyB,CAE5Cq3B,EAAOiW,GAAgB,GAAGttC,KAAO,kBACjCq3B,EAAOgW,GAAe,GAAGrtC,KAAO,kBAChCstC,GAAkB,EAClBD,GAAiB,EACjB,KACF,CAKJrpC,EAAQspC,EAAiB,EACzBD,IACA,OAASrpC,GAASqpC,QACFxf,IAAV9tB,EACEiE,IAAUqpC,GAA2C,eAA1BhW,EAAOrzB,GAAO,GAAGhE,OAC9CD,EAAQiE,GAEDA,IAAUqpC,GAA2C,eAA1BhW,EAAOrzB,GAAO,GAAGhE,OACrDq3B,EAAOt3B,GAAO,GAAGC,KAAO,eACpBgE,IAAUjE,EAAQ,IACpBs3B,EAAOt3B,GAAO,GAAGtB,IAAM44B,EAAOrzB,EAAQ,GAAG,GAAGvF,IAC5C44B,EAAOhC,OAAOt1B,EAAQ,EAAGiE,EAAQjE,EAAQ,GACzCstC,GAAiBrpC,EAAQjE,EAAQ,EACjCiE,EAAQjE,EAAQ,GAElBA,OAAQ8tB,GAGZ,OAAOwJ,CACT,EAlDEgB,SAwDF,SAAkBlf,GAEhB,OAAgB,KAATA,GAA+D,oBAAhDtV,KAAKwzB,OAAOxzB,KAAKwzB,OAAOx5B,OAAS,GAAG,GAAGmC,IAC/D,GC9CO,MAAM,GAAW,CACtB,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM6iC,IAIK9H,GAAiB,CAC5B,GAAMr1B,IAIKs4B,GAAc,CACzB,EAAE,GAAI4G,GACN,EAAE,GAAIA,GACN,GAAMA,IAIK,GAAO,CAClB,GAAMG,GACN,GAAMjD,GACN,GAAM,CAACoD,GAAiBpD,IACxB,GAAMyD,GACN,GAAML,GACN,GAAMpD,GACN,GAAM0F,GACN,IAAOA,IAII,GAAS,CACpB,GAAMkB,GACN,GAAMI,IAIK,GAAO,CAClB,EAAE,GAAIC,GACN,EAAE,GAAIA,GACN,EAAE,GAAIA,GACN,GAAMwB,GACN,GAAM7B,GACN,GAAM+B,GACN,GAAM,CAACS,GAAUQ,IACjB,GAAMuB,GACN,GAAM,CAACC,GAAiBpE,IACxB,GAAME,GACN,GAAMyB,GACN,GAAM0C,IAIKvD,GAAa,CACxBxM,KAAM,CAACqN,GAAW,KAIPC,GAAmB,CAC9BtN,KAAM,CAAC,GAAI,KAIAD,GAAU,CACrBC,KAAM,ICzFR,MAAMmQ,GAAS,cCDR,SAASC,GAAgCxwC,EAAOywC,GACrD,MAAMt0B,EAAOqa,OAAOka,SAAS1wC,EAAOywC,GACpC,OAEAt0B,EAAO,GAAc,KAATA,GAAeA,EAAO,IAAMA,EAAO,IAE/CA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAAUA,EAAO,OAExBA,EAAO,OAAUA,EAAO,SACJ,OAAnBA,IAAiD,QAAZ,MAAPA,IAE/BA,EAAO,QACE,IAEFib,OAAOuZ,cAAcx0B,EAC9B,CC7BA,MAAMy0B,GACJ,oEAwBF,SAASC,GAAO1gB,EAAI6H,EAAI8Y,GACtB,GAAI9Y,EAEF,OAAOA,EAKT,GAAa,KADA8Y,EAAG/O,WAAW,GACV,CACf,MAAMyB,EAAOsN,EAAG/O,WAAW,GACrBgP,EAAe,MAATvN,GAAyB,KAATA,EAC5B,OAAOgN,GAAgCM,EAAG3nC,MAAM4nC,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC3E,CACA,OAAOtF,GAA8BqF,IAAO3gB,CAC9C,CCOA,MAAM,GAAM,CAAC,EAAEzxB,eAyBR,SAASsyC,GAAahxC,EAAOixC,EAAUrxC,GAK5C,MAJwB,iBAAbqxC,IACTrxC,EAAUqxC,EACVA,OAAWpgB,GAUf,SAAkBjxB,GAEhB,MAAMsxC,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjEruC,MAAO,CACLmrC,SAAUmD,EAAOt0B,IACjBu0B,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYJ,EAAOjJ,GACnBvC,WAAYwL,EAAOxL,GACnBiG,gBAAiByF,EACjB7F,mBAAoB6F,EACpB/G,WAAY6G,EAAOK,GACnBC,oBAAqBlJ,EACrBmJ,oBAAqBnJ,EACrBb,aAAcyJ,EAAOK,EAAUjJ,GAC/B0H,SAAUkB,EAAOlB,EAAU1H,GAC3BoJ,aAAcN,EACd/hC,KAAM+hC,EACNO,cAAeP,EACf7oC,WAAY2oC,EAAO3oC,GACnBqpC,4BAA6BtJ,EAC7BuJ,sBAAuBvJ,EACvBwJ,sBAAuBxJ,EACvByJ,SAAUb,EAAOa,GACjBhC,gBAAiBmB,EAAOc,GACxBC,kBAAmBf,EAAOc,GAC1B5J,SAAU8I,EAAO/jC,EAAMm7B,GACvB4J,aAAcd,EACd7C,SAAU2C,EAAO/jC,EAAMm7B,GACvB6J,aAAcf,EACdgB,MAAOlB,EAAOkB,IACdxgC,MAAO02B,EACP1rB,KAAMs0B,EAAOt0B,IACby1B,SAAUnB,EAAOmB,IACjBC,cAAeC,EACfC,YAAatB,EAAOn/B,GAAM0gC,GAC1BC,cAAexB,EAAOn/B,IACtBi2B,UAAWkJ,EAAOlJ,IAClB2K,UAAWC,EACXC,gBAAiBvK,EACjBwK,0BAA2BxK,EAC3ByK,oBAAqBzK,EACrB0K,cAAe9B,EAAOjJ,GACtBgL,OAAQ/B,EAAO+B,IACftO,cAAeuM,EAAOvM,KAExBniC,KAAM,CACJ8uC,WAAY4B,IACZC,mBAAoBC,EACpBrF,SAAUmF,IACV7B,cAAegC,EACflC,iBAAkBmC,EAClB5N,WAAYwN,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzBtI,mBAAoBuI,EACpBzJ,WAAY6I,EAAOa,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe6B,EACf/L,aAAcyL,EAAOkB,GACrBpE,SAAUkD,EAAOmB,GACjB3C,aAAc8B,EACdnkC,KAAMmkC,EACNjrC,WAAY2qC,IACZtB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUmB,IACVnD,gBAAiBmD,EAAOuB,GACxBxC,kBAAmBiB,EAAOuB,GAC1BrM,SAAU8K,EAAOwB,GACjBxC,aAAcsB,EACdjF,SAAU2E,EAAOyB,GACjBxC,aAAcqB,EACdpB,MAAOc,EAAO0B,GACdhjC,MAAOijC,EACPC,UAAWC,EACXnJ,WAAYoJ,EACZp4B,KAAMs2B,EAAO+B,GACb5C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACflL,UAAWkL,IACXL,gBAAiBqC,EACjBpC,0BAA2BqC,EAC3BpC,oBAAqBqC,EACrB3oB,SAAU4oB,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACRvO,cAAeuO,MAGnByC,GAAU5E,GAAStxC,GAAW,CAAC,GAAGm2C,iBAAmB,IAGrD,MAAMvmC,EAAO,CAAC,EACd,OAAOwmC,EAUP,SAASA,EAAQ3b,GAEf,IAAIxH,EAAO,CACT7vB,KAAM,OACNhB,SAAU,IAGZ,MAAM64B,EAAU,CACd7I,MAAO,CAACa,GACRojB,WAAY,GACZ/E,SACAnuC,QACAJ,OACA8lC,SACAyN,SACA1mC,QAGI2mC,EAAY,GAClB,IAAInvC,GAAS,EACb,OAASA,EAAQqzB,EAAOx5B,QAGtB,GAA8B,gBAA1Bw5B,EAAOrzB,GAAO,GAAGhE,MAAoD,kBAA1Bq3B,EAAOrzB,GAAO,GAAGhE,KAC9D,GAAyB,UAArBq3B,EAAOrzB,GAAO,GAChBmvC,EAAU3hB,KAAKxtB,OACV,CAELA,EAAQovC,EAAY/b,EADP8b,EAAUhhB,MACWnuB,EACpC,CAIJ,IADAA,GAAS,IACAA,EAAQqzB,EAAOx5B,QAAQ,CAC9B,MAAM0nB,EAAU2oB,EAAO7W,EAAOrzB,GAAO,IACjC,GAAI7H,KAAKopB,EAAS8R,EAAOrzB,GAAO,GAAGhE,OACrCulB,EAAQ8R,EAAOrzB,GAAO,GAAGhE,MAAM7D,KAAKX,OAAO4F,OAAO,CAChD28B,eAAgB1G,EAAOrzB,GAAO,GAAG+5B,gBAChClG,GAAUR,EAAOrzB,GAAO,GAE/B,CAGA,GAAI6zB,EAAQob,WAAWp1C,OAAS,EAAG,CACjC,MAAMigC,EAAOjG,EAAQob,WAAWpb,EAAQob,WAAWp1C,OAAS,IAC5CigC,EAAK,IAAMuV,IACnBl3C,KAAK07B,OAAShK,EAAWiQ,EAAK,GACxC,CAkBA,IAfAjO,EAAKxuB,SAAW,CACd/C,MAAO,GAAM+4B,EAAOx5B,OAAS,EAAIw5B,EAAO,GAAG,GAAG/4B,MAAQ,CACpDqvB,KAAM,EACNC,OAAQ,EACRlG,OAAQ,IAEVjpB,IAAK,GAAM44B,EAAOx5B,OAAS,EAAIw5B,EAAOA,EAAOx5B,OAAS,GAAG,GAAGY,IAAM,CAChEkvB,KAAM,EACNC,OAAQ,EACRlG,OAAQ,KAKZ1jB,GAAS,IACAA,EAAQkqC,EAAOC,WAAWtwC,QACjCgyB,EAAOqe,EAAOC,WAAWnqC,GAAO6rB,IAASA,EAE3C,OAAOA,CACT,CAQA,SAASujB,EAAY/b,EAAQ/4B,EAAOT,GAClC,IAII2xC,EAEAxY,EAEAsc,EAEApR,EAVAl+B,EAAQ1F,EAAQ,EAChBi1C,GAAoB,EACpBC,GAAa,EASjB,OAASxvC,GAASnG,GAAQ,CACxB,MAAM4b,EAAQ4d,EAAOrzB,GACrB,OAAQyV,EAAM,GAAGzZ,MACf,IAAK,gBACL,IAAK,cACL,IAAK,aAEgB,UAAbyZ,EAAM,GACR85B,IAEAA,IAEFrR,OAAWrU,EACX,MAEJ,IAAK,kBAEgB,UAAbpU,EAAM,MACJ+1B,GAAatN,GAAaqR,GAAqBD,IACjDA,EAAsBtvC,GAExBk+B,OAAWrU,GAEb,MAEJ,IAAK,aACL,IAAK,gBACL,IAAK,iBACL,IAAK,iBACL,IAAK,2BAID,MAEJ,QAEIqU,OAAWrU,EAGjB,IAAK0lB,GAAiC,UAAb95B,EAAM,IAAoC,mBAAlBA,EAAM,GAAGzZ,OAAmD,IAAtBuzC,GAAwC,SAAb95B,EAAM,KAAoC,kBAAlBA,EAAM,GAAGzZ,MAA8C,gBAAlByZ,EAAM,GAAGzZ,MAAyB,CAC/M,GAAIwvC,EAAU,CACZ,IAAIiE,EAAYzvC,EAEhB,IADAgzB,OAAYnJ,EACL4lB,KAAa,CAClB,MAAMC,EAAYrc,EAAOoc,GACzB,GAA0B,eAAtBC,EAAU,GAAG1zC,MAA+C,oBAAtB0zC,EAAU,GAAG1zC,KAA4B,CACjF,GAAqB,SAAjB0zC,EAAU,GAAe,SACzB1c,IACFK,EAAOL,GAAW,GAAGh3B,KAAO,kBAC5BwzC,GAAa,GAEfE,EAAU,GAAG1zC,KAAO,aACpBg3B,EAAYyc,CACd,MAAO,GAA0B,eAAtBC,EAAU,GAAG1zC,MAA+C,qBAAtB0zC,EAAU,GAAG1zC,MAAqD,+BAAtB0zC,EAAU,GAAG1zC,MAA+D,qBAAtB0zC,EAAU,GAAG1zC,MAAqD,mBAAtB0zC,EAAU,GAAG1zC,KAG1M,KAEJ,CACIszC,KAAyBtc,GAAasc,EAAsBtc,KAC9DwY,EAASmE,SAAU,GAIrBnE,EAAS/wC,IAAMjD,OAAO4F,OAAO,CAAC,EAAG41B,EAAYK,EAAOL,GAAW,GAAG14B,MAAQmb,EAAM,GAAGhb,KACnF44B,EAAOhC,OAAO2B,GAAahzB,EAAO,EAAG,CAAC,OAAQwrC,EAAU/1B,EAAM,KAC9DzV,IACAnG,GACF,CAGA,GAAsB,mBAAlB4b,EAAM,GAAGzZ,KAA2B,CAEtC,MAAMy2B,EAAO,CACXz2B,KAAM,WACN2zC,SAAS,EACTr1C,MAAO9C,OAAO4F,OAAO,CAAC,EAAGqY,EAAM,GAAGnb,OAElCG,SAAKovB,GAEP2hB,EAAW/Y,EACXY,EAAOhC,OAAOrxB,EAAO,EAAG,CAAC,QAASyyB,EAAMhd,EAAM,KAC9CzV,IACAnG,IACAy1C,OAAsBzlB,EACtBqU,GAAW,CACb,CACF,CACF,CAEA,OADA7K,EAAO/4B,GAAO,GAAGq1C,QAAUH,EACpB31C,CACT,CAYA,SAASwwC,EAAO5oC,EAAQmuC,GACtB,OAAOn+B,EAOP,SAASA,EAAKmiB,GACZ73B,EAAM5D,KAAK0H,KAAM4B,EAAOmyB,GAAQA,GAC5Bgc,GAAKA,EAAIz3C,KAAK0H,KAAM+zB,EAC1B,CACF,CAKA,SAAS6N,IACP5hC,KAAKmrB,MAAMwC,KAAK,CACdxxB,KAAM,WACNhB,SAAU,IAEd,CAKA,SAASe,EAAM2tB,EAAMkK,EAAOic,GACXhwC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAEtBmB,SACfwyB,KAAK9D,GACd7pB,KAAKmrB,MAAMwC,KAAK9D,GAChB7pB,KAAKovC,WAAWzhB,KAAK,CAACoG,EAAOic,QAAgBhmB,IAC7CH,EAAKrsB,SAAW,CACd/C,MAAO,GAAMs5B,EAAMt5B,OAEnBG,SAAKovB,EAET,CAUA,SAASwiB,EAAOuD,GACd,OAAOlK,EAOP,SAASA,EAAM9R,GACTgc,GAAKA,EAAIz3C,KAAK0H,KAAM+zB,GACxBj4B,EAAKxD,KAAK0H,KAAM+zB,EAClB,CACF,CAKA,SAASj4B,EAAKi4B,EAAOkc,GACnB,MAAMpmB,EAAO7pB,KAAKmrB,MAAMmD,MAClB1c,EAAO5R,KAAKovC,WAAW9gB,MAC7B,IAAK1c,EACH,MAAM,IAAIwY,MAAM,iBAAmB2J,EAAM53B,KAAO,MAAQ8tB,GAAkB,CACxExvB,MAAOs5B,EAAMt5B,MACbG,IAAKm5B,EAAMn5B,MACR,oBACA,GAAIgX,EAAK,GAAGzV,OAAS43B,EAAM53B,KAChC,GAAI8zC,EACFA,EAAY33C,KAAK0H,KAAM+zB,EAAOniB,EAAK,QAC9B,EACWA,EAAK,IAAM49B,IACnBl3C,KAAK0H,KAAM+zB,EAAOniB,EAAK,GACjC,CAEFiY,EAAKrsB,SAAS5C,IAAM,GAAMm5B,EAAMn5B,IAClC,CAKA,SAASy0C,IACP,O/CvcG,SAAkBl2C,EAAOJ,GAC9B,MAAM82B,EAAW92B,GAAW,GAQ5B,OAAO,GAAII,EAN2B,kBAA7B02B,EAASyB,iBACZzB,EAASyB,gBAGmB,kBAAzBzB,EAAS0B,aAA4B1B,EAAS0B,YAGzD,C+C6bW,CAASvxB,KAAKmrB,MAAMmD,MAC7B,CAUA,SAASyd,IACP/rC,KAAK2I,KAAKunC,6BAA8B,CAC1C,CAMA,SAASrE,EAAqB9X,GAC5B,GAAI/zB,KAAK2I,KAAKunC,4BAA6B,CACxBlwC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCS,MAAQk1B,OAAOka,SAAS7pC,KAAKk6B,eAAenG,GAAQ,IAC7D/zB,KAAK2I,KAAKunC,iCAA8BlmB,CAC1C,CACF,CAMA,SAASwjB,IACP,MAAM7kC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCmR,KAAOxC,CACd,CAMA,SAAS8kC,IACP,MAAM9kC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCuqC,KAAO57B,CACd,CAMA,SAAS4kC,IAEHvtC,KAAK2I,KAAKwnC,iBACdnwC,KAAK4hC,SACL5hC,KAAK2I,KAAKwnC,gBAAiB,EAC7B,CAMA,SAAS9C,IACP,MAAM1kC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCb,MAAQwP,EAAKhJ,QAAQ,2BAA4B,IACtDK,KAAK2I,KAAKwnC,oBAAiBnmB,CAC7B,CAMA,SAAS0jB,IACP,MAAM/kC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCb,MAAQwP,EAAKhJ,QAAQ,eAAgB,GAC5C,CAMA,SAASkuC,EAA4B9Z,GACnC,MAAM7oB,EAAQlL,KAAKqvC,SACbxlB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAC5C6vB,EAAK3e,MAAQA,EACb2e,EAAKwW,WAAaD,GAAoBpgC,KAAKk6B,eAAenG,IAAQ1zB,aACpE,CAMA,SAASytC,IACP,MAAMnlC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCia,MAAQtL,CACf,CAMA,SAASilC,IACP,MAAMjlC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCuxB,IAAM5iB,CACb,CAMA,SAAS+jC,EAAyB3Y,GAChC,MAAMlK,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAC5C,IAAK6vB,EAAKumB,MAAO,CACf,MAAMA,EAAQpwC,KAAKk6B,eAAenG,GAAO/5B,OACzC6vB,EAAKumB,MAAQA,CACf,CACF,CAMA,SAASpB,IACPhvC,KAAK2I,KAAK0nC,8BAA+B,CAC3C,CAMA,SAASvB,EAAgC/a,GAC1B/zB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCo2C,MAAsD,KAA9CpwC,KAAKk6B,eAAenG,GAAOuc,YAAY,GAAY,EAAI,CACtE,CAMA,SAAS1B,IACP5uC,KAAK2I,KAAK0nC,kCAA+BrmB,CAC3C,CAOA,SAAS0gB,EAAY3W,GACnB,MAEMwc,EAFOvwC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAEtBmB,SACtB,IAAI8+B,EAAOsW,EAASA,EAASv2C,OAAS,GACjCigC,GAAsB,SAAdA,EAAK99B,OAEhB89B,EAAO5iB,KACP4iB,EAAKz8B,SAAW,CACd/C,MAAO,GAAMs5B,EAAMt5B,OAEnBG,SAAKovB,GAEPumB,EAAS5iB,KAAKsM,IAEhBj6B,KAAKmrB,MAAMwC,KAAKsM,EAClB,CAOA,SAAS6S,EAAW/Y,GAClB,MAAMkG,EAAOj6B,KAAKmrB,MAAMmD,MACxB2L,EAAK9gC,OAAS6G,KAAKk6B,eAAenG,GAClCkG,EAAKz8B,SAAS5C,IAAM,GAAMm5B,EAAMn5B,IAClC,CAOA,SAAS0zC,EAAiBva,GACxB,MAAMC,EAAUh0B,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAE/C,GAAIgG,KAAK2I,KAAK6nC,YAAa,CAIzB,OAHaxc,EAAQ74B,SAAS64B,EAAQ74B,SAASnB,OAAS,GACnDwD,SAAS5C,IAAM,GAAMm5B,EAAMn5B,UAChCoF,KAAK2I,KAAK6nC,iBAAcxmB,EAE1B,EACKhqB,KAAK2I,KAAK0nC,8BAAgChG,EAAOE,eAAepoC,SAAS6xB,EAAQ73B,QACpFuuC,EAAYpyC,KAAK0H,KAAM+zB,GACvB+Y,EAAWx0C,KAAK0H,KAAM+zB,GAE1B,CAOA,SAASga,IACP/tC,KAAK2I,KAAK6nC,aAAc,CAC1B,CAOA,SAASxC,IACP,MAAMrlC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCb,MAAQwP,CACf,CAOA,SAASslC,IACP,MAAMtlC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCb,MAAQwP,CACf,CAOA,SAASglC,IACP,MAAMhlC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCb,MAAQwP,CACf,CAOA,SAAS4lC,IACP,MAAM1kB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAK5C,GAAIgG,KAAK2I,KAAK8nC,YAAa,CAEzB,MAAMC,EAAgB1wC,KAAK2I,KAAK+nC,eAAiB,WACjD7mB,EAAK1tB,MAAQ,YAEb0tB,EAAK6mB,cAAgBA,SAEd7mB,EAAK0B,WACL1B,EAAK5V,KACd,aAES4V,EAAKwW,kBAELxW,EAAK3e,MAEdlL,KAAK2I,KAAK+nC,mBAAgB1mB,CAC5B,CAOA,SAASkkB,IACP,MAAMrkB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAK5C,GAAIgG,KAAK2I,KAAK8nC,YAAa,CAEzB,MAAMC,EAAgB1wC,KAAK2I,KAAK+nC,eAAiB,WACjD7mB,EAAK1tB,MAAQ,YAEb0tB,EAAK6mB,cAAgBA,SAEd7mB,EAAK0B,WACL1B,EAAK5V,KACd,aAES4V,EAAKwW,kBAELxW,EAAK3e,MAEdlL,KAAK2I,KAAK+nC,mBAAgB1mB,CAC5B,CAOA,SAASqkB,EAAgBta,GACvB,MAAM5M,EAASnnB,KAAKk6B,eAAenG,GAC7B4c,EAAW3wC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAGhD22C,EAASzlC,MDxwBN,SAAsB/R,GAC3B,OAAOA,EAAMwG,QAAQoqC,GAA4BC,GACnD,CCswBqB4G,CAAazpB,GAE9BwpB,EAAStQ,WAAaD,GAAoBjZ,GAAQ9mB,aACpD,CAOA,SAAS8tC,IACP,MAAM0C,EAAW7wC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAC1Cb,EAAQ6G,KAAKqvC,SACbxlB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAG5C,GADAgG,KAAK2I,KAAK8nC,aAAc,EACN,SAAd5mB,EAAK1tB,KAAiB,CAExB,MAAMhB,EAAW01C,EAAS11C,SAC1B0uB,EAAK1uB,SAAWA,CAClB,MACE0uB,EAAKtiB,IAAMpO,CAEf,CAOA,SAASs1C,IACP,MAAM9lC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCuxB,IAAM5iB,CACb,CAOA,SAAS+lC,IACP,MAAM/lC,EAAO3I,KAAKqvC,SACLrvC,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCia,MAAQtL,CACf,CAOA,SAASgmC,IACP3uC,KAAK2I,KAAK8nC,iBAAczmB,CAC1B,CAOA,SAASkiB,IACPlsC,KAAK2I,KAAK+nC,cAAgB,WAC5B,CAOA,SAASlC,EAAsBza,GAC7B,MAAM7oB,EAAQlL,KAAKqvC,SACbxlB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAG5C6vB,EAAK3e,MAAQA,EAEb2e,EAAKwW,WAAaD,GAAoBpgC,KAAKk6B,eAAenG,IAAQ1zB,cAClEL,KAAK2I,KAAK+nC,cAAgB,MAC5B,CAOA,SAAS1D,EAA+BjZ,GACtC/zB,KAAK2I,KAAKmoC,uBAAyB/c,EAAM53B,IAC3C,CAMA,SAASgxC,EAA8BpZ,GACrC,MAAMprB,EAAO3I,KAAKk6B,eAAenG,GAC3B53B,EAAO6D,KAAK2I,KAAKmoC,uBAEvB,IAAI33C,EACJ,GAAIgD,EACFhD,EAAQwwC,GAAgChhC,EAAe,oCAATxM,EAA6C,GAAK,IAChG6D,KAAK2I,KAAKmoC,4BAAyB9mB,MAC9B,CAEL7wB,EADeyrC,GAA8Bj8B,EAE/C,CACa3I,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCb,OAASA,CAChB,CAMA,SAASi0C,EAAyBrZ,GACnB/zB,KAAKmrB,MAAMmD,MACnB9wB,SAAS5C,IAAM,GAAMm5B,EAAMn5B,IAClC,CAMA,SAASgyC,EAAuB7Y,GAC9B+Y,EAAWx0C,KAAK0H,KAAM+zB,GACT/zB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCuxB,IAAMvrB,KAAKk6B,eAAenG,EACjC,CAMA,SAAS4Y,EAAoB5Y,GAC3B+Y,EAAWx0C,KAAK0H,KAAM+zB,GACT/zB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACvCuxB,IAAM,UAAYvrB,KAAKk6B,eAAenG,EAC7C,CAOA,SAASiL,IACP,MAAO,CACL7iC,KAAM,aACNhB,SAAU,GAEd,CAGA,SAAS0vC,IACP,MAAO,CACL1uC,KAAM,OACNgP,KAAM,KACNo5B,KAAM,KACNprC,MAAO,GAEX,CAGA,SAASmwC,IACP,MAAO,CACLntC,KAAM,aACNhD,MAAO,GAEX,CAGA,SAAS0I,IACP,MAAO,CACL1F,KAAM,aACNkkC,WAAY,GACZn1B,MAAO,KACP+I,MAAO,KACPsX,IAAK,GAET,CAGA,SAAS8f,IACP,MAAO,CACLlvC,KAAM,WACNhB,SAAU,GAEd,CAGA,SAASomC,IACP,MAAO,CACLplC,KAAM,UAENi0C,MAAO,EACPj1C,SAAU,GAEd,CAGA,SAASmwC,IACP,MAAO,CACLnvC,KAAM,QAEV,CAGA,SAASsK,IACP,MAAO,CACLtK,KAAM,OACNhD,MAAO,GAEX,CAGA,SAASuyC,KACP,MAAO,CACLvvC,KAAM,QACN8X,MAAO,KACPsX,IAAK,GACLhkB,IAAK,KAET,CAGA,SAAS2O,KACP,MAAO,CACL/Z,KAAM,OACN8X,MAAO,KACPsX,IAAK,GACLpwB,SAAU,GAEd,CAMA,SAASkQ,GAAK0oB,GACZ,MAAO,CACL53B,KAAM,OACN40C,QAAwB,gBAAfhd,EAAM53B,KACf1B,MAAO,KACPu2C,OAAQjd,EAAM+b,QACd30C,SAAU,GAEd,CAMA,SAASwwC,GAAS5X,GAChB,MAAO,CACL53B,KAAM,WACN60C,OAAQjd,EAAM+b,QACd7nC,QAAS,KACT9M,SAAU,GAEd,CAGA,SAASmmC,KACP,MAAO,CACLnlC,KAAM,YACNhB,SAAU,GAEd,CAGA,SAASoxC,KACP,MAAO,CACLpwC,KAAM,SACNhB,SAAU,GAEd,CAGA,SAASkc,KACP,MAAO,CACLlb,KAAM,OACNhD,MAAO,GAEX,CAGA,SAAS8kC,KACP,MAAO,CACL9hC,KAAM,gBAEV,CACF,CA7+BS80C,CAASl4C,EAATk4C,CCpEF,SAAqBzd,GAC1B,MAAQR,GAAYQ,KAGpB,OAAOA,CACT,CD+D2B0d,CE1DpB,SAAen4C,GACpB,MAMMq7B,EAAS,CACbpzB,QAAS,GACT23B,KAAM,CAAC,EACPpD,WANAN,GAAkB,CAAC,MAHJl8B,GAAW,CAAC,GAGwBm8B,YAAc,KAOjE7sB,QAASzG,EAAOyG,IAChBgxB,SAAUz3B,EAAO,IACjBk3B,KAAMl3B,EAAOk3B,IACb3R,OAAQvlB,EAAOulB,IACf9P,KAAMzV,EAAO,KAEf,OAAOwyB,EAKP,SAASxyB,EAAO9D,GACd,OAEA,SAAiBojB,GACf,OAAOoa,GAAgBlH,EAAQt2B,EAASojB,EAC1C,CACF,CACF,CF6BuC,CAAMnoB,GAASsgC,WAAWrE,MH1D1D,WACL,IAKImc,EALApnB,EAAS,EACT6X,EAAS,GAETnnC,GAAQ,EAGZ,OAIA,SAAsBtB,EAAOixC,EAAUxvC,GAErC,MAAMkgC,EAAS,GAEf,IAAIsW,EAEAvc,EAEAZ,EAEAod,EAEA/7B,EAeJ,IAdAnc,EACEyoC,GACkB,iBAAVzoC,EACJA,EAAMpB,WACN,IAAIu5C,YAAYlH,QAAYpgB,GAAWggB,OAAO7wC,IACpD86B,EAAgB,EAChB2N,EAAS,GACLnnC,IAE0B,QAAxBtB,EAAM+hC,WAAW,IACnBjH,IAEFx5B,OAAQuvB,GAEHiK,EAAgB96B,EAAMa,QAAQ,CAMnC,GALA0vC,GAAO6H,UAAYtd,EACnBmd,EAAQ1H,GAAO8H,KAAKr4C,GACpBk4C,EACED,QAAyBpnB,IAAhBonB,EAAMjxC,MAAsBixC,EAAMjxC,MAAQhH,EAAMa,OAC3Dsb,EAAOnc,EAAM+hC,WAAWmW,IACnBD,EAAO,CACVxP,EAASzoC,EAAMmJ,MAAM2xB,GACrB,KACF,CACA,GAAa,KAAT3e,GAAe2e,IAAkBod,GAAeF,EAClDrW,EAAOnN,MAAM,GACbwjB,OAAmBnnB,OAUnB,OARImnB,IACFrW,EAAOnN,MAAM,GACbwjB,OAAmBnnB,GAEjBiK,EAAgBod,IAClBvW,EAAOnN,KAAKx0B,EAAMmJ,MAAM2xB,EAAeod,IACvCtnB,GAAUsnB,EAAcpd,GAElB3e,GACN,KAAK,EACHwlB,EAAOnN,KAAK,OACZ5D,IACA,MAEF,KAAK,EAGH,IAFA8K,EAA+B,EAAxBrC,KAAKif,KAAK1nB,EAAS,GAC1B+Q,EAAOnN,MAAM,GACN5D,IAAW8K,GAAMiG,EAAOnN,MAAM,GACrC,MAEF,KAAK,GACHmN,EAAOnN,MAAM,GACb5D,EAAS,EACT,MAEF,QACEonB,GAAmB,EACnBpnB,EAAS,EAIfkK,EAAgBod,EAAc,CAChC,CAMA,OALIz2C,IACEu2C,GAAkBrW,EAAOnN,MAAM,GAC/BiU,GAAQ9G,EAAOnN,KAAKiU,GACxB9G,EAAOnN,KAAK,OAEPmN,CACT,CACF,CGlCuE4W,GAAav4C,EAAOixC,GAAU,KACrG,CAs/BA,SAAS,GAAM/vC,GACb,MAAO,CACLyvB,KAAMzvB,EAAEyvB,KACRC,OAAQ1vB,EAAE0vB,OACVlG,OAAQxpB,EAAEwpB,OAEd,CAOA,SAASorB,GAAU0C,EAAUzc,GAC3B,IAAI/0B,GAAS,EACb,OAASA,EAAQ+0B,EAAWl7B,QAAQ,CAClC,MAAMb,EAAQ+7B,EAAW/0B,GACrB9H,MAAMF,QAAQgB,GAChB81C,GAAU0C,EAAUx4C,GAEpBk8B,GAAUsc,EAAUx4C,EAExB,CACF,CAOA,SAASk8B,GAAUsc,EAAUtc,GAE3B,IAAI58B,EACJ,IAAKA,KAAO48B,EACV,GAAI,GAAI/8B,KAAK+8B,EAAW58B,GACtB,OAAQA,GACN,IAAK,iBACH,CACE,MAAMs5B,EAAQsD,EAAU58B,GACpBs5B,GACF4f,EAASl5C,GAAKk1B,QAAQoE,GAExB,KACF,CACF,IAAK,aACH,CACE,MAAMA,EAAQsD,EAAU58B,GACpBs5B,GACF4f,EAASl5C,GAAKk1B,QAAQoE,GAExB,KACF,CACF,IAAK,QACL,IAAK,OACH,CACE,MAAMA,EAAQsD,EAAU58B,GACpBs5B,GACFp6B,OAAO4F,OAAOo0C,EAASl5C,GAAMs5B,GAE/B,KACF,EAKV,CAGA,SAASyd,GAAevwC,EAAM8yB,GAC5B,MAAI9yB,EACI,IAAImrB,MAAM,iBAAmBnrB,EAAK9C,KAAO,MAAQ8tB,GAAkB,CACvExvB,MAAOwE,EAAKxE,MACZG,IAAKqE,EAAKrE,MACP,0BAA4Bm3B,EAAM51B,KAAO,MAAQ8tB,GAAkB,CACtExvB,MAAOs3B,EAAMt3B,MACbG,IAAKm3B,EAAMn3B,MACR,aAEC,IAAIwvB,MAAM,oCAAsC2H,EAAM51B,KAAO,MAAQ8tB,GAAkB,CAC3FxvB,MAAOs3B,EAAMt3B,MACbG,IAAKm3B,EAAMn3B,MACR,kBAET,CGnoCe,SAASg3C,GAAY74C,GAGlC,MAAMq+B,EAAOp3B,KAEbo3B,EAAKhD,OAKL,SAAgByd,GACd,OAAO1H,GAAa0H,EAAK,IACpBza,EAAKzuB,KAAK,eACV5P,EAIHm8B,WAAYkC,EAAKzuB,KAAK,wBAA0B,GAChDumC,gBAAiB9X,EAAKzuB,KAAK,2BAA6B,IAE5D,CACF,CC1CO,MCODmpC,GAAsB,iBAAT1a,KAAoBA,KAAO2a,WAuEjCC,GAAcC,GArEN,EAACC,EAAG7vC,KACvB,MAAMmF,EAAK,CAAC2qC,EAAKhyC,KACf+xC,EAAE3iB,IAAIpvB,EAAOgyC,GACNA,GAGHC,EAASjyC,IACb,GAAI+xC,EAAEnkB,IAAI5tB,GACR,OAAO+xC,EAAE5iB,IAAInvB,GAEf,MAAOhE,EAAMhD,GAASkJ,EAAElC,GACxB,OAAQhE,GACN,KDpBoB,ECqBpB,KDtBoB,ECuBlB,OAAOqL,EAAGrO,EAAOgH,GACnB,KDtBoB,ECsBR,CACV,MAAM/H,EAAMoP,EAAG,GAAIrH,GACnB,IAAK,MAAMA,KAAShH,EAClBf,EAAIu1B,KAAKykB,EAAOjyC,IAClB,OAAO/H,CACT,CACA,KD3BoB,EC2BP,CACX,MAAMue,EAASnP,EAAG,CAAC,EAAGrH,GACtB,IAAK,MAAO1H,EAAK0H,KAAUhH,EACzBwd,EAAOy7B,EAAO35C,IAAQ25C,EAAOjyC,GAC/B,OAAOwW,CACT,CACA,KDhCoB,ECiClB,OAAOnP,EAAG,IAAI6qC,KAAKl5C,GAAQgH,GAC7B,KDjCoB,ECiCP,CACX,MAAM,OAAC2qB,EAAM,MAAEwnB,GAASn5C,EACxB,OAAOqO,EAAG,IAAI+qC,OAAOznB,EAAQwnB,GAAQnyC,EACvC,CACA,KDpCoB,ECoCV,CACR,MAAMm9B,EAAM91B,EAAG,IAAIikB,IAAKtrB,GACxB,IAAK,MAAO1H,EAAK0H,KAAUhH,EACzBmkC,EAAI/N,IAAI6iB,EAAO35C,GAAM25C,EAAOjyC,IAC9B,OAAOm9B,CACT,CACA,KDzCoB,ECyCV,CACR,MAAM/N,EAAM/nB,EAAG,IAAIokB,IAAKzrB,GACxB,IAAK,MAAMA,KAAShH,EAClBo2B,EAAImG,IAAI0c,EAAOjyC,IACjB,OAAOovB,CACT,CACA,KD9CoB,EC8CR,CACV,MAAM,KAACv2B,EAAI,QAAE4xB,GAAWzxB,EACxB,OAAOqO,EAAG,IAAIsqC,GAAI94C,GAAM4xB,GAAUzqB,EACpC,CACA,KDjDoB,ECkDlB,OAAOqH,EAAGgrC,OAAOr5C,GAAQgH,GAC3B,IAAK,SACH,OAAOqH,EAAG7P,OAAO66C,OAAOr5C,IAASgH,GAErC,OAAOqH,EAAG,IAAIsqC,GAAI31C,GAAMhD,GAAQgH,EAAM,EAGxC,OAAOiyC,CAAM,EAY0BK,CAAa,IAAIhnB,IAAKwmB,EAAtBQ,CAAkC,GCvErEC,GAAQ,IAEP36C,SAAQ,IAAI,CAAC,GACd,KAACqJ,IAAQzJ,OAETylB,GAASjkB,IACb,MAAMgD,SAAchD,EACpB,GAAa,WAATgD,IAAsBhD,EACxB,MAAO,CFde,EEcHgD,GAErB,MAAMw2C,EAAW,GAASr6C,KAAKa,GAAOmJ,MAAM,GAAI,GAChD,OAAQqwC,GACN,IAAK,QACH,MAAO,CFlBa,EEkBLD,IACjB,IAAK,SACH,MAAO,CFnBa,EEmBJA,IAClB,IAAK,OACH,MAAO,CFpBa,EEoBNA,IAChB,IAAK,SACH,MAAO,CFrBa,EEqBJA,IAClB,IAAK,MACH,MAAO,CFtBa,EEsBPA,IACf,IAAK,MACH,MAAO,CFvBa,EEuBPA,IAGjB,OAAIC,EAASxwC,SAAS,SACb,CFhCe,EEgCPwwC,GAEbA,EAASxwC,SAAS,SACb,CF7Be,EE6BPwwC,GAEV,CFpCiB,EEoCRA,EAAS,EAGrBC,GAAa,EAAEC,EAAM12C,KFzCD,IE0CxB02C,IACU,aAAT12C,GAAgC,WAATA,GAiHZ22C,GAAY,CAAC35C,GAAQ45C,OAAMC,SAAS,CAAC,KACjD,MAAM3wC,EAAI,GACV,MAhHiB,EAAC4wC,EAAQF,EAAMb,EAAG7vC,KAEnC,MAAMmF,EAAK,CAAC2qC,EAAKh5C,KACf,MAAMgH,EAAQkC,EAAEsrB,KAAKwkB,GAAO,EAE5B,OADAD,EAAE3iB,IAAIp2B,EAAOgH,GACNA,CAAK,EAGR+yC,EAAO/5C,IACX,GAAI+4C,EAAEnkB,IAAI50B,GACR,OAAO+4C,EAAE5iB,IAAIn2B,GAEf,IAAK05C,EAAM12C,GAAQihB,GAAOjkB,GAC1B,OAAQ05C,GACN,KF5DoB,EE4DJ,CACd,IAAI1Z,EAAQhgC,EACZ,OAAQgD,GACN,IAAK,SACH02C,EFxDc,EEyDd1Z,EAAQhgC,EAAMpB,WACd,MACF,IAAK,WACL,IAAK,SACH,GAAIk7C,EACF,MAAM,IAAI/mB,UAAU,uBAAyB/vB,GAC/Cg9B,EAAQ,KACR,MACF,IAAK,YACH,OAAO3xB,EAAG,EF3EI,GE2EIrO,GAEtB,OAAOqO,EAAG,CAACqrC,EAAM1Z,GAAQhgC,EAC3B,CACA,KF7EoB,EE6ER,CACV,GAAIgD,EACF,OAAOqL,EAAG,CAACrL,EAAM,IAAIhD,IAASA,GAEhC,MAAMf,EAAM,GACN+H,EAAQqH,EAAG,CAACqrC,EAAMz6C,GAAMe,GAC9B,IAAK,MAAMggC,KAAShgC,EAClBf,EAAIu1B,KAAKulB,EAAK/Z,IAChB,OAAOh5B,CACT,CACA,KFtFoB,EEsFP,CACX,GAAIhE,EACF,OAAQA,GACN,IAAK,SACH,OAAOqL,EAAG,CAACrL,EAAMhD,EAAMpB,YAAaoB,GACtC,IAAK,UACL,IAAK,SACL,IAAK,SACH,OAAOqO,EAAG,CAACrL,EAAMhD,EAAMg6C,WAAYh6C,GAIzC,GAAI45C,GAAS,WAAY55C,EACvB,OAAO+5C,EAAK/5C,EAAMi6C,UAEpB,MAAMC,EAAU,GACVlzC,EAAQqH,EAAG,CAACqrC,EAAMQ,GAAUl6C,GAClC,IAAK,MAAMV,KAAO2I,GAAKjI,IACjB85C,GAAWL,GAAWx1B,GAAOjkB,EAAMV,MACrC46C,EAAQ1lB,KAAK,CAACulB,EAAKz6C,GAAMy6C,EAAK/5C,EAAMV,MAExC,OAAO0H,CACT,CACA,KF5GoB,EE6GlB,OAAOqH,EAAG,CAACqrC,EAAM15C,EAAMm6C,eAAgBn6C,GACzC,KF7GoB,EE6GP,CACX,MAAM,OAAC2xB,EAAM,MAAEwnB,GAASn5C,EACxB,OAAOqO,EAAG,CAACqrC,EAAM,CAAC/nB,SAAQwnB,UAASn5C,EACrC,CACA,KFhHoB,EEgHV,CACR,MAAMk6C,EAAU,GACVlzC,EAAQqH,EAAG,CAACqrC,EAAMQ,GAAUl6C,GAClC,IAAK,MAAOV,EAAK0gC,KAAUhgC,GACrB85C,IAAYL,GAAWx1B,GAAO3kB,MAASm6C,GAAWx1B,GAAO+b,MAC3Dka,EAAQ1lB,KAAK,CAACulB,EAAKz6C,GAAMy6C,EAAK/Z,KAElC,OAAOh5B,CACT,CACA,KFxHoB,EEwHV,CACR,MAAMkzC,EAAU,GACVlzC,EAAQqH,EAAG,CAACqrC,EAAMQ,GAAUl6C,GAClC,IAAK,MAAMggC,KAAShgC,GACd85C,GAAWL,GAAWx1B,GAAO+b,KAC/Bka,EAAQ1lB,KAAKulB,EAAK/Z,IAEtB,OAAOh5B,CACT,EAGF,MAAM,QAACyqB,GAAWzxB,EAClB,OAAOqO,EAAG,CAACqrC,EAAM,CAAC75C,KAAMmD,EAAMyuB,YAAWzxB,EAAM,EAGjD,OAAO+5C,CAAI,EAiBJK,GAAaR,GAAQC,KAAUD,EAAM,IAAItnB,IAAKppB,EAA9CkxC,CAAiDp6C,GAAQkJ,CAAC,EChJnE,OAA0C,mBAApBmxC,gBAEpB,CAACC,EAAK16C,IACJA,IAAY,SAAUA,GAAW,UAAWA,GAC1Ci5C,GAAYc,GAAUW,EAAK16C,IAAYy6C,gBAAgBC,GAE3D,CAACA,EAAK16C,IAAYi5C,GAAYc,GAAUW,EAAK16C,ICsCxC,SAAS26C,GAAav6C,GAE3B,MAAM8sB,EAAS,GACf,IAAI9lB,GAAS,EACT1F,EAAQ,EACRk5C,EAAO,EACX,OAASxzC,EAAQhH,EAAMa,QAAQ,CAC7B,MAAMsb,EAAOnc,EAAM+hC,WAAW/6B,GAE9B,IAAIR,EAAU,GAGd,GACW,KAAT2V,GACAugB,GAAkB18B,EAAM+hC,WAAW/6B,EAAQ,KAC3C01B,GAAkB18B,EAAM+hC,WAAW/6B,EAAQ,IAE3CwzC,EAAO,OAGJ,GAAIr+B,EAAO,IACT,oBAAoB9V,KAAK+wB,OAAOkG,aAAanhB,MAChD3V,EAAU4wB,OAAOkG,aAAanhB,SAI7B,GAAIA,EAAO,OAAUA,EAAO,MAAQ,CACvC,MAAMuf,EAAO17B,EAAM+hC,WAAW/6B,EAAQ,GAGlCmV,EAAO,OAAUuf,EAAO,OAAUA,EAAO,OAC3Cl1B,EAAU4wB,OAAOkG,aAAanhB,EAAMuf,GACpC8e,EAAO,GAIPh0C,EAAU,GAEd,MAGEA,EAAU4wB,OAAOkG,aAAanhB,GAE5B3V,IACFsmB,EAAO0H,KAAKx0B,EAAMmJ,MAAM7H,EAAO0F,GAAQyzC,mBAAmBj0C,IAC1DlF,EAAQ0F,EAAQwzC,EAAO,EACvBh0C,EAAU,IAERg0C,IACFxzC,GAASwzC,EACTA,EAAO,EAEX,CACA,OAAO1tB,EAAO6J,KAAK,IAAM32B,EAAMmJ,MAAM7H,EACvC,CCjCO,SAASo5C,GAA2BxxC,EAAGyxC,GAE5C,MAAM7tB,EAAS,CAAC,CAAC9pB,KAAM,OAAQhD,MAAO,MAWtC,OATI26C,EAAmB,GACrB7tB,EAAO0H,KAAK,CACVxxB,KAAM,UACNuxB,QAAS,MACT3rB,WAAY,CAAC,EACb5G,SAAU,CAAC,CAACgB,KAAM,OAAQhD,MAAOo3B,OAAOujB,OAIrC7tB,CACT,CAaO,SAAS8tB,GAAyBC,EAAgBF,GACvD,MACE,sBACCE,EAAiB,IACjBF,EAAmB,EAAI,IAAMA,EAAmB,GAErD,CChDO,MA0EMG,GAWX,SAKYz0C,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,mBAATA,EACT,OAAO00C,GAAY10C,GAGrB,GAAoB,iBAATA,EACT,OAAOnH,MAAMF,QAAQqH,GAe7B,SAAoB20C,GAElB,MAAMhzC,EAAS,GACf,IAAIhB,GAAS,EAEb,OAASA,EAAQg0C,EAAMn6C,QACrBmH,EAAOhB,GAAS8zC,GAAQE,EAAMh0C,IAGhC,OAAO+zC,GAAYT,GAMnB,SAASA,KAAO9hB,GACd,IAAIxxB,GAAS,EAEb,OAASA,EAAQgB,EAAOnH,QACtB,GAAImH,EAAOhB,GAAOi0C,MAAMp0C,KAAM2xB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqC0iB,CAAW70C,GA+ChD,SAAsBiC,GACpB,MAAM6yC,EAAuD,EAE7D,OAAOJ,GAAY/e,GAMnB,SAASA,EAAItL,GACX,MAAM0qB,EAAsD,EAK5D,IAAI97C,EAEJ,IAAKA,KAAOgJ,EACV,GAAI8yC,EAAa97C,KAAS67C,EAAc77C,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwD+7C,CAAah1C,GAG/D,GAAoB,iBAATA,EACT,OA0ER,SAAqBiC,GACnB,OAAOyyC,GAAY/3C,GAKnB,SAASA,EAAK0tB,GACZ,OAAOA,GAAQA,EAAK1tB,OAASsF,CAC/B,CACF,CAnFegzC,CAAYj1C,GAGrB,MAAM,IAAI4qB,MAAM,+CAEpB,EAsFF,SAAS8pB,GAAYQ,GACnB,OAMA,SAAev7C,EAAOgH,EAAO6qB,GAC3B,OAAOgG,QACL2jB,GAAex7C,IACbu7C,EAAap8C,KACX0H,KACA7G,EACiB,iBAAVgH,EAAqBA,OAAQ6pB,EACpCgB,QAAUhB,GAGlB,CACF,CAEA,SAAS,KACP,OAAO,CACT,CAMA,SAAS2qB,GAAex7C,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CCnEA,MAAM,GAAQ,GAKDy7C,IAAW,EAKXC,IAAO,EAsDb,SAASC,GAAa9oB,EAAMxsB,EAAMu1C,EAAS1iB,GAEhD,IAAI5wB,EAEgB,mBAATjC,GAA0C,mBAAZu1C,GACvC1iB,EAAU0iB,EAEVA,EAAUv1C,GAGViC,EAAQjC,EAGV,MAAMkL,EAAKupC,GAAQxyC,GACbsS,EAAOse,GAAW,EAAI,GAS5B,SAAS2iB,EAAQnrB,EAAM1pB,EAAO80C,GAC5B,MAAM97C,EACJ0wB,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAG7C,GAA0B,iBAAf1wB,EAAMgD,KAAmB,CAClC,MAAMnD,EAEqB,iBAAlBG,EAAMu0B,QACTv0B,EAAMu0B,QAEc,iBAAfv0B,EAAMH,KACXG,EAAMH,UACNgxB,EAENryB,OAAOK,eAAek9C,EAAO,OAAQ,CACnC/7C,MACE,SAAiB0wB,EAAK1tB,MAAQnD,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOk8C,EAEP,SAASA,IAEP,IAEIC,EAEAtxB,EAEAuxB,EANAnvB,EAAS,GAQb,KAAKzmB,GAAQkL,EAAGmf,EAAM1pB,EAAO80C,EAAQA,EAAQj7C,OAAS,SAAMgwB,MAE1D/D,EA0CR,SAAkB9sB,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CAACy7C,GAAUz7C,GAGpB,OAAOA,QAAwC,GAAQ,CAACA,EAC1D,CApDiBk8C,CAASN,EAAQlrB,EAAMorB,IAE5BhvB,EAAO,KAAO4uB,IAChB,OAAO5uB,EAIX,GAAI,aAAc4D,GAAQA,EAAK1uB,SAAU,CACvC,MAAMm6C,EAA0C,EAEhD,GAAIA,EAAan6C,UArHL,SAqHiB8qB,EAAO,GAIlC,IAHApC,GAAUwO,EAAUijB,EAAan6C,SAASnB,QAAU,GAAK+Z,EACzDqhC,EAAeH,EAAQ3iB,OAAOgjB,GAEvBzxB,GAAU,GAAKA,EAASyxB,EAAan6C,SAASnB,QAAQ,CAC3D,MAAMk0B,EAAQonB,EAAan6C,SAAS0oB,GAIpC,GAFAsxB,EAAYH,EAAQ9mB,EAAOrK,EAAQuxB,EAAvBJ,GAERG,EAAU,KAAON,GACnB,OAAOM,EAGTtxB,EAC0B,iBAAjBsxB,EAAU,GAAkBA,EAAU,GAAKtxB,EAAS9P,CAC/D,CAEJ,CAEA,OAAOkS,CACT,CACF,CAzEA+uB,CAAQhpB,OAAMhC,EAAW,GAAzBgrB,EA0EF,CC5VO,MAAM,GAAW,GAAM,OAUjB,GAAa,GAAM,SAUhC,SAAS,GAAM74C,GACb,OAQA,SAAe0tB,GACb,MAAMF,EAASE,GAAQA,EAAKrsB,UAAYqsB,EAAKrsB,SAASrB,IAAU,CAAC,EAEjE,GACwB,iBAAfwtB,EAAMG,MACbH,EAAMG,KAAO,GACW,iBAAjBH,EAAMI,QACbJ,EAAMI,OAAS,EAEf,MAAO,CACLD,KAAMH,EAAMG,KACZC,OAAQJ,EAAMI,OACdlG,OAC0B,iBAAjB8F,EAAM9F,QAAuB8F,EAAM9F,QAAU,EAChD8F,EAAM9F,YACNmG,EAGZ,CACF,CCvDO,SAASurB,GAAOzoB,EAAOjD,GAC5B,MAAM2rB,EAAU3rB,EAAK6mB,cACrB,IAAI+E,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAO5rB,EAAK3e,OAAS2e,EAAKwW,YAAc,KAGlC,mBAAdxW,EAAK1tB,KACP,MAAO,CAAC,CAACA,KAAM,OAAQhD,MAAO,KAAO0wB,EAAKtiB,IAAMkuC,IAGlD,MAAMC,EAAW5oB,EAAMqI,IAAItL,GACrB8S,EAAO+Y,EAAS,GAElB/Y,GAAsB,SAAdA,EAAKxgC,KACfwgC,EAAKxjC,MAAQ,IAAMwjC,EAAKxjC,MAExBu8C,EAAS7jB,QAAQ,CAAC11B,KAAM,OAAQhD,MAAO,MAGzC,MAAM8gC,EAAOyb,EAASA,EAAS17C,OAAS,GAQxC,OANIigC,GAAsB,SAAdA,EAAK99B,KACf89B,EAAK9gC,OAASs8C,EAEdC,EAAS/nB,KAAK,CAACxxB,KAAM,OAAQhD,MAAOs8C,IAG/BC,CACT,CCgEA,SAASC,GAAc9rB,GACrB,MAAMmnB,EAASnnB,EAAKmnB,OAEpB,OAAOA,QACHnnB,EAAK1uB,SAASnB,OAAS,EACvBg3C,CACN,CChHO,SAAS4E,GAAUz8C,GACxB,MAAM2xB,EAASyF,OAAOp3B,GAChBuwC,EAAS,YACf,IAAI0H,EAAQ1H,EAAO8H,KAAK1mB,GACpB+qB,EAAO,EAEX,MAAMC,EAAQ,GAEd,KAAO1E,GACL0E,EAAMnoB,KACJooB,GAASjrB,EAAOxoB,MAAMuzC,EAAMzE,EAAMjxC,OAAQ01C,EAAO,GAAG,GACpDzE,EAAM,IAGRyE,EAAOzE,EAAMjxC,MAAQixC,EAAM,GAAGp3C,OAC9Bo3C,EAAQ1H,EAAO8H,KAAK1mB,GAKtB,OAFAgrB,EAAMnoB,KAAKooB,GAASjrB,EAAOxoB,MAAMuzC,GAAOA,EAAO,GAAG,IAE3CC,EAAMhmB,KAAK,GACpB,CAYA,SAASimB,GAAS58C,EAAOsB,EAAOG,GAC9B,IAAI0hC,EAAa,EACbE,EAAWrjC,EAAMa,OAErB,GAAIS,EAAO,CACT,IAAI6a,EAAOnc,EAAMm3C,YAAYhU,GAE7B,KApDQ,IAoDDhnB,GAnDG,KAmDaA,GACrBgnB,IACAhnB,EAAOnc,EAAMm3C,YAAYhU,EAE7B,CAEA,GAAI1hC,EAAK,CACP,IAAI0a,EAAOnc,EAAMm3C,YAAY9T,EAAW,GAExC,KA7DQ,IA6DDlnB,GA5DG,KA4DaA,GACrBknB,IACAlnB,EAAOnc,EAAMm3C,YAAY9T,EAAW,EAExC,CAEA,OAAOA,EAAWF,EAAanjC,EAAMmJ,MAAMg6B,EAAYE,GAAY,EACrE,CCvCO,MAAM,GAAW,CACtBwZ,WCXK,SAAoBlpB,EAAOjD,GAEhC,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,aACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMzY,KAAKyY,EAAMqI,IAAItL,IAAO,IAGxC,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EDEEkwB,MEXK,SAAmBrpB,EAAOjD,GAE/B,MAAM5D,EAAS,CAAC9pB,KAAM,UAAWuxB,QAAS,KAAM3rB,WAAY,CAAC,EAAG5G,SAAU,IAE1E,OADA2xB,EAAMmpB,MAAMpsB,EAAM5D,GACX,CAAC6G,EAAMopB,UAAUrsB,EAAM5D,GAAS,CAAC9pB,KAAM,OAAQhD,MAAO,MAC/D,EFOEmc,KGZK,SAAcwX,EAAOjD,GAC1B,MAAM1wB,EAAQ0wB,EAAK1wB,MAAQ0wB,EAAK1wB,MAAQ,KAAO,GAEzC4I,EAAa,CAAC,EAEhB8nB,EAAK1e,OACPpJ,EAAW7E,UAAY,CAAC,YAAc2sB,EAAK1e,OAK7C,IAAI8a,EAAS,CACX9pB,KAAM,UACNuxB,QAAS,OACT3rB,aACA5G,SAAU,CAAC,CAACgB,KAAM,OAAQhD,WAa5B,OAVI0wB,EAAK0a,OACPte,EAAOtd,KAAO,CAAC47B,KAAM1a,EAAK0a,OAG5BzX,EAAMmpB,MAAMpsB,EAAM5D,GAClBA,EAAS6G,EAAMopB,UAAUrsB,EAAM5D,GAG/BA,EAAS,CAAC9pB,KAAM,UAAWuxB,QAAS,MAAO3rB,WAAY,CAAC,EAAG5G,SAAU,CAAC8qB,IACtE6G,EAAMmpB,MAAMpsB,EAAM5D,GACXA,CACT,EHhBEmwB,OIdK,SAAuBtpB,EAAOjD,GAEnC,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,MACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EJKEolB,SKfK,SAAkBve,EAAOjD,GAE9B,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,KACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,ELMEowB,kBMjBK,SAA2BvpB,EAAOjD,GACvC,MAAMysB,EACmC,iBAAhCxpB,EAAM/zB,QAAQu9C,cACjBxpB,EAAM/zB,QAAQu9C,cACd,gBACAlsC,EAAKmmB,OAAO1G,EAAKwW,YAAY5W,cAC7B8sB,EAAS7C,GAAatpC,EAAG/J,eACzBF,EAAQ2sB,EAAM0pB,cAAczrB,QAAQ3gB,GAE1C,IAAIqsC,EAEAC,EAAe5pB,EAAM6pB,eAAernB,IAAIllB,QAEvB4f,IAAjB0sB,GACFA,EAAe,EACf5pB,EAAM0pB,cAAc7oB,KAAKvjB,GACzBqsC,EAAU3pB,EAAM0pB,cAAcx8C,QAE9By8C,EAAUt2C,EAAQ,EAGpBu2C,GAAgB,EAChB5pB,EAAM6pB,eAAepnB,IAAInlB,EAAIssC,GAG7B,MAAMxgC,EAAO,CACX/Z,KAAM,UACNuxB,QAAS,IACT3rB,WAAY,CACViI,KAAM,IAAMssC,EAAgB,MAAQC,EACpCnsC,GACEksC,EACA,SACAC,GACCG,EAAe,EAAI,IAAMA,EAAe,IAC3CE,iBAAiB,EACjB1yC,gBAAiB,CAAC,mBAEpB/I,SAAU,CAAC,CAACgB,KAAM,OAAQhD,MAAOo3B,OAAOkmB,MAE1C3pB,EAAMmpB,MAAMpsB,EAAM3T,GAGlB,MAAM2gC,EAAM,CACV16C,KAAM,UACNuxB,QAAS,MACT3rB,WAAY,CAAC,EACb5G,SAAU,CAAC+a,IAGb,OADA4W,EAAMmpB,MAAMpsB,EAAMgtB,GACX/pB,EAAMopB,UAAUrsB,EAAMgtB,EAC/B,ENjCEtV,QOjBK,SAAiBzU,EAAOjD,GAE7B,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,IAAM7D,EAAKumB,MACpBruC,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EPQExf,KQhBK,SAAcqmB,EAAOjD,GAC1B,GAAIiD,EAAM/zB,QAAQ+9C,mBAAoB,CAEpC,MAAM7wB,EAAS,CAAC9pB,KAAM,MAAOhD,MAAO0wB,EAAK1wB,OAEzC,OADA2zB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,CAGF,ERQE8wB,eSjBK,SAAwBjqB,EAAOjD,GACpC,MAAMzf,EAAKmmB,OAAO1G,EAAKwW,YAAY5W,cAC7B5nB,EAAairB,EAAMkqB,eAAe1nB,IAAIllB,GAE5C,IAAKvI,EACH,OAAO0zC,GAAOzoB,EAAOjD,GAIvB,MAAM9nB,EAAa,CAACrI,IAAKg6C,GAAa7xC,EAAW0pB,KAAO,IAAKhkB,IAAKsiB,EAAKtiB,KAE9C,OAArB1F,EAAWoS,YAAuC+V,IAArBnoB,EAAWoS,QAC1ClS,EAAWkS,MAAQpS,EAAWoS,OAIhC,MAAMgS,EAAS,CAAC9pB,KAAM,UAAWuxB,QAAS,MAAO3rB,aAAY5G,SAAU,IAEvE,OADA2xB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,ETDEylB,MUpBK,SAAe5e,EAAOjD,GAE3B,MAAM9nB,EAAa,CAACrI,IAAKg6C,GAAa7pB,EAAK0B,MAE1B,OAAb1B,EAAKtiB,UAA6ByiB,IAAbH,EAAKtiB,MAC5BxF,EAAWwF,IAAMsiB,EAAKtiB,KAGL,OAAfsiB,EAAK5V,YAAiC+V,IAAfH,EAAK5V,QAC9BlS,EAAWkS,MAAQ4V,EAAK5V,OAI1B,MAAMgS,EAAS,CAAC9pB,KAAM,UAAWuxB,QAAS,MAAO3rB,aAAY5G,SAAU,IAEvE,OADA2xB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EVKEgxB,WWpBK,SAAoBnqB,EAAOjD,GAEhC,MAAMxS,EAAO,CAAClb,KAAM,OAAQhD,MAAO0wB,EAAK1wB,MAAMwG,QAAQ,YAAa,MACnEmtB,EAAMmpB,MAAMpsB,EAAMxS,GAGlB,MAAM4O,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,OACT3rB,WAAY,CAAC,EACb5G,SAAU,CAACkc,IAGb,OADAyV,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EXOEixB,cYpBK,SAAuBpqB,EAAOjD,GACnC,MAAMzf,EAAKmmB,OAAO1G,EAAKwW,YAAY5W,cAC7B5nB,EAAairB,EAAMkqB,eAAe1nB,IAAIllB,GAE5C,IAAKvI,EACH,OAAO0zC,GAAOzoB,EAAOjD,GAIvB,MAAM9nB,EAAa,CAACiI,KAAM0pC,GAAa7xC,EAAW0pB,KAAO,KAEhC,OAArB1pB,EAAWoS,YAAuC+V,IAArBnoB,EAAWoS,QAC1ClS,EAAWkS,MAAQpS,EAAWoS,OAIhC,MAAMgS,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,IACT3rB,aACA5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EZHE/P,KavBK,SAAc4W,EAAOjD,GAE1B,MAAM9nB,EAAa,CAACiI,KAAM0pC,GAAa7pB,EAAK0B,MAEzB,OAAf1B,EAAK5V,YAAiC+V,IAAfH,EAAK5V,QAC9BlS,EAAWkS,MAAQ4V,EAAK5V,OAI1B,MAAMgS,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,IACT3rB,aACA5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EbOE0lB,SFnBK,SAAkB7e,EAAOjD,EAAMmB,GACpC,MAAM9S,EAAU4U,EAAMqI,IAAItL,GACpBstB,EAAQnsB,EAyEhB,SAAmBnB,GACjB,IAAIstB,GAAQ,EACZ,GAAkB,SAAdttB,EAAK1tB,KAAiB,CACxBg7C,EAAQttB,EAAKmnB,SAAU,EACvB,MAAM71C,EAAW0uB,EAAK1uB,SACtB,IAAIgF,GAAS,EAEb,MAAQg3C,KAAWh3C,EAAQhF,EAASnB,QAClCm9C,EAAQxB,GAAcx6C,EAASgF,GAEnC,CAEA,OAAOg3C,CACT,CAtFyBC,CAAUpsB,GAAU2qB,GAAc9rB,GAEnD9nB,EAAa,CAAC,EAEd5G,EAAW,GAEjB,GAA4B,kBAAjB0uB,EAAK5hB,QAAuB,CACrC,MAAM00B,EAAOzkB,EAAQ,GAErB,IAAIopB,EAEA3E,GAAsB,YAAdA,EAAKxgC,MAAuC,MAAjBwgC,EAAKjP,QAC1C4T,EAAY3E,GAEZ2E,EAAY,CAACnlC,KAAM,UAAWuxB,QAAS,IAAK3rB,WAAY,CAAC,EAAG5G,SAAU,IACtE+c,EAAQ2Z,QAAQyP,IAGdA,EAAUnmC,SAASnB,OAAS,GAC9BsnC,EAAUnmC,SAAS02B,QAAQ,CAAC11B,KAAM,OAAQhD,MAAO,MAGnDmoC,EAAUnmC,SAAS02B,QAAQ,CACzB11B,KAAM,UACNuxB,QAAS,QACT3rB,WAAY,CAAC5F,KAAM,WAAY8L,QAAS4hB,EAAK5hB,QAASgB,UAAU,GAChE9N,SAAU,KAKZ4G,EAAW7E,UAAY,CAAC,iBAC1B,CAEA,IAAIiD,GAAS,EAEb,OAASA,EAAQ+X,EAAQle,QAAQ,CAC/B,MAAMk0B,EAAQhW,EAAQ/X,IAIpBg3C,GACU,IAAVh3C,GACe,YAAf+tB,EAAM/xB,MACY,MAAlB+xB,EAAMR,UAENvyB,EAASwyB,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,OAGnB,YAAf+0B,EAAM/xB,MAAwC,MAAlB+xB,EAAMR,SAAoBypB,EAGxDh8C,EAASwyB,KAAKO,GAFd/yB,EAASwyB,QAAQO,EAAM/yB,SAI3B,CAEA,MAAM8+B,EAAO/hB,EAAQA,EAAQle,OAAS,GAGlCigC,IAASkd,GAAuB,YAAdld,EAAK99B,MAAuC,MAAjB89B,EAAKvM,UACpDvyB,EAASwyB,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,OAItC,MAAM8sB,EAAS,CAAC9pB,KAAM,UAAWuxB,QAAS,KAAM3rB,aAAY5G,YAE5D,OADA2xB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EEjDE5a,KcxBK,SAAcyhB,EAAOjD,GAE1B,MAAM9nB,EAAa,CAAC,EACdmW,EAAU4U,EAAMqI,IAAItL,GAC1B,IAAI1pB,GAAS,EAOb,IAL0B,iBAAf0pB,EAAKpvB,OAAqC,IAAfovB,EAAKpvB,QACzCsH,EAAWtH,MAAQovB,EAAKpvB,SAIjB0F,EAAQ+X,EAAQle,QAAQ,CAC/B,MAAMk0B,EAAQhW,EAAQ/X,GAEtB,GACiB,YAAf+tB,EAAM/xB,MACY,OAAlB+xB,EAAMR,SACNQ,EAAMnsB,YACN1J,MAAMF,QAAQ+1B,EAAMnsB,WAAW7E,YAC/BgxB,EAAMnsB,WAAW7E,UAAUiF,SAAS,kBACpC,CACAJ,EAAW7E,UAAY,CAAC,sBACxB,KACF,CACF,CAGA,MAAM+oB,EAAS,CACb9pB,KAAM,UACNuxB,QAAS7D,EAAKknB,QAAU,KAAO,KAC/BhvC,aACA5G,SAAU2xB,EAAMzY,KAAK6D,GAAS,IAGhC,OADA4U,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EdVEqb,Ue1BK,SAAmBxU,EAAOjD,GAE/B,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,IACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EfkBEkJ,KgB3BK,SAAcrC,EAAOjD,GAE1B,MAAM5D,EAAS,CAAC9pB,KAAM,OAAQhB,SAAU2xB,EAAMzY,KAAKyY,EAAMqI,IAAItL,KAE7D,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EhBuBEsmB,OiB7BK,SAAgBzf,EAAOjD,GAE5B,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,SACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EjBoBEoxB,MkB/BK,SAAevqB,EAAOjD,GAC3B,MAAMjX,EAAOka,EAAMqI,IAAItL,GACjBytB,EAAW1kC,EAAKqf,QAEhBslB,EAAe,GAErB,GAAID,EAAU,CAEZ,MAAM3a,EAAO,CACXxgC,KAAM,UACNuxB,QAAS,QACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMzY,KAAK,CAACijC,IAAW,IAEnCxqB,EAAMmpB,MAAMpsB,EAAK1uB,SAAS,GAAIwhC,GAC9B4a,EAAa5pB,KAAKgP,EACpB,CAEA,GAAI/pB,EAAK5Y,OAAS,EAAG,CAEnB,MAAMy0B,EAAO,CACXtyB,KAAM,UACNuxB,QAAS,QACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMzY,KAAKzB,GAAM,IAGvBnY,EAAQ,GAAWovB,EAAK1uB,SAAS,IACjCP,EAAM,GAASivB,EAAK1uB,SAAS0uB,EAAK1uB,SAASnB,OAAS,IACtDS,GAASG,IAAK6zB,EAAKjxB,SAAW,CAAC/C,QAAOG,QAC1C28C,EAAa5pB,KAAKc,EACpB,CAGA,MAAMxI,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,QACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMzY,KAAKkjC,GAAc,IAGrC,OADAzqB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,ElBVEuxB,UmB/BK,SAAmB1qB,EAAOjD,GAI/B,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,KACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IAGtB,OADAiD,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EnBoBEwxB,SoB3BK,SAAkB3qB,EAAOjD,EAAMmB,GACpC,MAAMulB,EAAWvlB,EAASA,EAAO7vB,cAAW6uB,EAGtC0D,EAAuB,KADZ6iB,EAAWA,EAASxlB,QAAQlB,GAAQ,GACpB,KAAO,KAElCtV,EAAQyW,GAA0B,UAAhBA,EAAO7uB,KAAmB6uB,EAAOzW,WAAQyV,EAC3DhwB,EAASua,EAAQA,EAAMva,OAAS6vB,EAAK1uB,SAASnB,OACpD,IAAI09C,GAAa,EAEjB,MAAMC,EAAQ,GAEd,OAASD,EAAY19C,GAAQ,CAE3B,MAAM49C,EAAO/tB,EAAK1uB,SAASu8C,GAErB31C,EAAa,CAAC,EACd8rB,EAAatZ,EAAQA,EAAMmjC,QAAa1tB,EAE1C6D,IACF9rB,EAAWwS,MAAQsZ,GAIrB,IAAI5H,EAAS,CAAC9pB,KAAM,UAAWuxB,UAAS3rB,aAAY5G,SAAU,IAE1Dy8C,IACF3xB,EAAO9qB,SAAW2xB,EAAMqI,IAAIyiB,GAC5B9qB,EAAMmpB,MAAM2B,EAAM3xB,GAClBA,EAAS6G,EAAMopB,UAAU0B,EAAM3xB,IAGjC0xB,EAAMhqB,KAAK1H,EACb,CAGA,MAAMA,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,KACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMzY,KAAKsjC,GAAO,IAG9B,OADA7qB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EpBhBE5O,KqBjCK,SAAcyV,EAAOjD,GAE1B,MAAM5D,EAAS,CAAC9pB,KAAM,OAAQhD,MAAOy8C,GAAUrlB,OAAO1G,EAAK1wB,SAE3D,OADA2zB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,ErB6BEgY,csBlCK,SAAuBnR,EAAOjD,GAEnC,MAAM5D,EAAS,CACb9pB,KAAM,UACNuxB,QAAS,KACT3rB,WAAY,CAAC,EACb5G,SAAU,IAGZ,OADA2xB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,EtByBE4xB,KAAMC,GACNC,KAAMD,GACNj2C,WAAYi2C,GACZE,mBAAoBF,IAItB,SAASA,KAET,CuBoHA,MAAM,GAAM,CAAC,EAAEjgD,eAGT,GAAe,CAAC,EAYf,SAASogD,GAAYjsB,EAAMjzB,GAChC,MAAM82B,EAAW92B,GAAW,GAEtBi+C,EAAiB,IAAIvrB,IAErBysB,EAAe,IAAIzsB,IAEnBkrB,EAAiB,IAAIlrB,IAIrB0sB,EAAW,IAAI,MAAoBtoB,EAASsoB,UAG5CrrB,EAAQ,CACZqI,IA0EF,SAAanK,GAEX,MAAMtpB,EAAS,GAEf,GAAI,aAAcspB,EAAQ,CACxB,MAAMotB,EAAQptB,EAAO7vB,SACrB,IAAIgF,GAAS,EACb,OAASA,EAAQi4C,EAAMp+C,QAAQ,CAC7B,MAAMisB,EAAS6G,EAAMU,IAAI4qB,EAAMj4C,GAAQ6qB,GAGvC,GAAI/E,EAAQ,CACV,GAAI9lB,GAAmC,UAA1Bi4C,EAAMj4C,EAAQ,GAAGhE,OACvB9D,MAAMF,QAAQ8tB,IAA2B,SAAhBA,EAAO9pB,OACnC8pB,EAAO9sB,MAAQk/C,GAAuBpyB,EAAO9sB,SAG1Cd,MAAMF,QAAQ8tB,IAA2B,YAAhBA,EAAO9pB,MAAoB,CACvD,MAAMwgC,EAAO1W,EAAO9qB,SAAS,GAEzBwhC,GAAsB,SAAdA,EAAKxgC,OACfwgC,EAAKxjC,MAAQk/C,GAAuB1b,EAAKxjC,OAE7C,CAGEd,MAAMF,QAAQ8tB,GAChBvkB,EAAOisB,QAAQ1H,GAEfvkB,EAAOisB,KAAK1H,EAEhB,CACF,CACF,CAEA,OAAOvkB,CACT,EA7GEw0C,aACAc,iBACAkB,eACAvB,iBACAH,cAAe,GACf2B,WACA3qB,IAgCF,SAAa3D,EAAMmB,GACjB,MAAM7uB,EAAO0tB,EAAK1tB,KACZm8C,EAASxrB,EAAMqrB,SAASh8C,GAE9B,GAAI,GAAI7D,KAAKw0B,EAAMqrB,SAAUh8C,IAASm8C,EACpC,OAAOA,EAAOxrB,EAAOjD,EAAMmB,GAG7B,GAAI8B,EAAM/zB,QAAQw/C,aAAezrB,EAAM/zB,QAAQw/C,YAAYp2C,SAAShG,GAAO,CACzE,GAAI,aAAc0tB,EAAM,CACtB,MAAM,SAAC1uB,KAAaq9C,GAAW3uB,EACzB5D,EAAS,GAAgBuyB,GAI/B,OAFAvyB,EAAO9qB,SAAW2xB,EAAMqI,IAAItL,GAErB5D,CACT,CAGA,OAAO,GAAgB4D,EACzB,CAIA,OAFgBiD,EAAM/zB,QAAQ0/C,gBAAkBC,IAEjC5rB,EAAOjD,EAAMmB,EAC9B,EAxDEjyB,QAAS82B,EACTomB,SACA5hC,SAiBF,OC0CK,SAAe2X,EAAM2sB,EAAeC,EAAkBC,GAE3D,IAAIxmB,EAEA7yB,EAEAu1C,EAGuB,mBAAlB4D,GACqB,mBAArBC,GAEPp5C,OAAOwqB,EACP+qB,EAAU4D,EACVtmB,EAAUumB,IAGVp5C,EAAOm5C,EAEP5D,EAAU6D,EACVvmB,EAAUwmB,GAGZ/D,GAAa9oB,EAAMxsB,GAMnB,SAAkBqqB,EAAMorB,GACtB,MAAMjqB,EAASiqB,EAAQA,EAAQj7C,OAAS,GAClCmG,EAAQ6qB,EAASA,EAAO7vB,SAAS4vB,QAAQlB,QAAQG,EACvD,OAAO+qB,EAAQlrB,EAAM1pB,EAAO6qB,EAC9B,GAVmCqH,EAWrC,CD1FE6iB,CAAMlpB,GAAM,SAAUnC,GACpB,GAAkB,eAAdA,EAAK1tB,MAAuC,uBAAd0tB,EAAK1tB,KAA+B,CACpE,MAAMmhC,EAAoB,eAAdzT,EAAK1tB,KAAwB66C,EAAiBkB,EACpD9tC,EAAKmmB,OAAO1G,EAAKwW,YAAY5W,cAI9B6T,EAAIvP,IAAI3jB,IAEXkzB,EAAI/N,IAAInlB,EAAIyf,EAEhB,CACF,IAEOiD,CAoFT,CAYA,SAASmpB,GAAM/0B,EAAM+G,GACf/G,EAAK1jB,WAAUyqB,EAAGzqB,S3BtPjB,SAAkBqsB,GACvB,MAAMpvB,EAAQ,GAAWovB,GACnBjvB,EAAM,GAASivB,GAErB,GAAIpvB,GAASG,EACX,MAAO,CAACH,QAAOG,MAEnB,C2B+OmC,CAASsmB,GAC5C,CAcA,SAASg1B,GAAUh1B,EAAM+G,GAEvB,IAAIhC,EAASgC,EAGb,GAAI/G,GAAQA,EAAKvY,KAAM,CACrB,MAAMmwC,EAAQ53B,EAAKvY,KAAKmwC,MAClBC,EAAY73B,EAAKvY,KAAKowC,UACtBC,EAAc93B,EAAKvY,KAAKqwC,YAE9B,GAAqB,iBAAVF,EAGT,GAAoB,YAAhB7yB,EAAO9pB,KACT8pB,EAAOyH,QAAUorB,MAMd,CAIH7yB,EAAS,CAAC9pB,KAAM,UAAWuxB,QAASorB,EAAO/2C,WAAY,CAAC,EAAG5G,SAD1C,aAAc8qB,EAASA,EAAO9qB,SAAW,CAAC8qB,GAE7D,CAGkB,YAAhBA,EAAO9pB,MAAsB68C,GAC/BrhD,OAAO4F,OAAO0oB,EAAOlkB,WAAY,GAAgBi3C,IAIjD,aAAc/yB,GACdA,EAAO9qB,UADP,MAEA49C,IAGA9yB,EAAO9qB,SAAW49C,EAEtB,CAEA,OAAO9yB,CACT,CAYA,SAASyyB,GAAsB5rB,EAAOjD,GACpC,MAAMlhB,EAAOkhB,EAAKlhB,MAAQ,CAAC,EAErBsd,IACJ,UAAW4D,IACT,GAAIvxB,KAAKqQ,EAAM,gBAAkB,GAAIrQ,KAAKqQ,EAAM,aAE9C,CACExM,KAAM,UACNuxB,QAAS,MACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMqI,IAAItL,IALtB,CAAC1tB,KAAM,OAAQhD,MAAO0wB,EAAK1wB,OASjC,OADA2zB,EAAMmpB,MAAMpsB,EAAM5D,GACX6G,EAAMopB,UAAUrsB,EAAM5D,EAC/B,CAcO,SAAS5R,GAAK+jC,EAAOjB,GAE1B,MAAMlxB,EAAS,GACf,IAAI9lB,GAAS,EAMb,IAJIg3C,GACFlxB,EAAO0H,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,SAG3BgH,EAAQi4C,EAAMp+C,QACjBmG,GAAO8lB,EAAO0H,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,OAC7C8sB,EAAO0H,KAAKyqB,EAAMj4C,IAOpB,OAJIg3C,GAASiB,EAAMp+C,OAAS,GAC1BisB,EAAO0H,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,OAG7B8sB,CACT,CAUA,SAASoyB,GAAuBl/C,GAC9B,IAAIgH,EAAQ,EACRmV,EAAOnc,EAAM+hC,WAAW/6B,GAE5B,KAAgB,IAATmV,GAAuB,KAATA,GACnBnV,IACAmV,EAAOnc,EAAM+hC,WAAW/6B,GAG1B,OAAOhH,EAAMmJ,MAAMnC,EACrB,CEjYO,SAAS84C,GAAOjtB,EAAMjzB,GAC3B,MAAM+zB,EAAQmrB,GAAYjsB,EAAMjzB,GAC1B8wB,EAAOiD,EAAMU,IAAIxB,OAAMhC,GACvBkvB,EhCkCD,SAAgBpsB,GACrB,MAAMwpB,EACmC,iBAAhCxpB,EAAM/zB,QAAQu9C,cACjBxpB,EAAM/zB,QAAQu9C,cACd,gBACA6C,EACJrsB,EAAM/zB,QAAQogD,qBAAuBtF,GACjCuF,EACJtsB,EAAM/zB,QAAQqgD,mBAAqBrF,GAC/BsF,EAAgBvsB,EAAM/zB,QAAQsgD,eAAiB,YAC/CC,EAAuBxsB,EAAM/zB,QAAQugD,sBAAwB,KAC7DC,EAA0BzsB,EAAM/zB,QAAQwgD,yBAA2B,CACvEr8C,UAAW,CAAC,YAGRs8C,EAAY,GAClB,IAAIxF,GAAkB,EAEtB,OAASA,EAAiBlnB,EAAM0pB,cAAcx8C,QAAQ,CACpD,MAAM6H,EAAairB,EAAMorB,aAAa5oB,IACpCxC,EAAM0pB,cAAcxC,IAGtB,IAAKnyC,EACH,SAGF,MAAMwG,EAAUykB,EAAMqI,IAAItzB,GACpBuI,EAAKmmB,OAAO1uB,EAAWw+B,YAAY5W,cACnC8sB,EAAS7C,GAAatpC,EAAG/J,eAC/B,IAAIyzC,EAAmB,EAEvB,MAAM2F,EAAiB,GACjBC,EAAS5sB,EAAM6pB,eAAernB,IAAIllB,GAGxC,UAAkB4f,IAAX0vB,KAA0B5F,GAAoB4F,GAAQ,CACvDD,EAAez/C,OAAS,GAC1By/C,EAAe9rB,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,MAG5C,IAAIgC,EAC6B,iBAAxBg+C,EACHA,EACAA,EAAoBnF,EAAgBF,GAElB,iBAAb34C,IACTA,EAAW,CAACgB,KAAM,OAAQhD,MAAOgC,IAGnCs+C,EAAe9rB,KAAK,CAClBxxB,KAAM,UACNuxB,QAAS,IACT3rB,WAAY,CACViI,KACE,IACAssC,EACA,SACAC,GACCzC,EAAmB,EAAI,IAAMA,EAAmB,IACnD6F,oBAAqB,GACrB70C,UAC+B,iBAAtBs0C,EACHA,EACAA,EAAkBpF,EAAgBF,GACxC52C,UAAW,CAAC,0BAEd/B,SAAU9C,MAAMF,QAAQgD,GAAYA,EAAW,CAACA,IAEpD,CAEA,MAAM8+B,EAAO5xB,EAAQA,EAAQrO,OAAS,GAEtC,GAAIigC,GAAsB,YAAdA,EAAK99B,MAAuC,MAAjB89B,EAAKvM,QAAiB,CAC3D,MAAMksB,EAAW3f,EAAK9+B,SAAS8+B,EAAK9+B,SAASnB,OAAS,GAClD4/C,GAA8B,SAAlBA,EAASz9C,KACvBy9C,EAASzgD,OAAS,IAElB8gC,EAAK9+B,SAASwyB,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,MAG3C8gC,EAAK9+B,SAASwyB,QAAQ8rB,EACxB,MACEpxC,EAAQslB,QAAQ8rB,GAIlB,MAAM9N,EAAW,CACfxvC,KAAM,UACNuxB,QAAS,KACT3rB,WAAY,CAACqI,GAAIksC,EAAgB,MAAQC,GACzCp7C,SAAU2xB,EAAMzY,KAAKhM,GAAS,IAGhCykB,EAAMmpB,MAAMp0C,EAAY8pC,GAExB6N,EAAU7rB,KAAKge,EACjB,CAEA,GAAyB,IAArB6N,EAAUx/C,OAId,MAAO,CACLmC,KAAM,UACNuxB,QAAS,UACT3rB,WAAY,CAAC83C,eAAe,EAAM38C,UAAW,CAAC,cAC9C/B,SAAU,CACR,CACEgB,KAAM,UACNuxB,QAAS4rB,EACTv3C,WAAY,IACP,GAAgBw3C,GACnBnvC,GAAI,kBAENjP,SAAU,CAAC,CAACgB,KAAM,OAAQhD,MAAOkgD,KAEnC,CAACl9C,KAAM,OAAQhD,MAAO,MACtB,CACEgD,KAAM,UACNuxB,QAAS,KACT3rB,WAAY,CAAC,EACb5G,SAAU2xB,EAAMzY,KAAKmlC,GAAW,IAElC,CAACr9C,KAAM,OAAQhD,MAAO,OAG5B,CgCjKe2gD,CAAOhtB,GAEd7G,EAAS5tB,MAAMF,QAAQ0xB,GACzB,CAAC1tB,KAAM,OAAQhB,SAAU0uB,GACzBA,GAAQ,CAAC1tB,KAAM,OAAQhB,SAAU,IAUrC,OARI+9C,GAKFjzB,EAAO9qB,SAASwyB,KAAK,CAACxxB,KAAM,OAAQhD,MAAO,MAAO+/C,GAG7CjzB,CACT,CC8Be,SAAS8zB,GAAaC,EAAajhD,GAChD,OAAIihD,GAAe,QAASA,EAInBvyC,eAAgBukB,EAAMd,GAE3B,MAAM+uB,EACJhB,GAAOjtB,EAAM,CAACd,UAASnyB,UAEnBihD,EAAYE,IAAID,EAAU/uB,EAClC,EAMK,SAAUc,EAAMd,GAMrB,OACE+tB,GAAOjtB,EAAM,CAACd,UAAU8uB,GAAejhD,GAE3C,CACF,CC3JO,SAASohD,GAAK/pB,GACnB,GAAIA,EACF,MAAMA,CAEV,C,eCXe,SAAS73B,GAAcY,GACrC,GAAqB,iBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,MAAMvB,EAAYD,OAAOyiD,eAAejhD,GACxC,QAAsB,OAAdvB,GAAsBA,IAAcD,OAAOC,WAAkD,OAArCD,OAAOyiD,eAAexiD,IAA0ByiD,OAAOC,eAAenhD,GAAYkhD,OAAOE,YAAYphD,EACtK,CC+BO,SAASqhD,KAEd,MAAMC,EAAM,GAENC,EAAW,CAACR,IAKlB,YAAgBx4C,GACd,IAAIi5C,GAAmB,EAEvB,MAAMC,EAAWl5C,EAAO4sB,MAExB,GAAwB,mBAAbssB,EACT,MAAM,IAAI1uB,UAAU,2CAA6C0uB,IAWnE,SAAS/lB,EAAKzE,KAAUyqB,GACtB,MAAMjuB,EAAK6tB,IAAME,GACjB,IAAIx6C,GAAS,EAEb,GAAIiwB,EACFwqB,EAASxqB,OADX,CAMA,OAASjwB,EAAQuB,EAAO1H,QACA,OAAlB6gD,EAAO16C,SAAqC6pB,IAAlB6wB,EAAO16C,KACnC06C,EAAO16C,GAASuB,EAAOvB,IAK3BuB,EAASm5C,EAGLjuB,EAqDH,SAAckuB,EAAYF,GAE/B,IAAIvf,EAEJ,OAAO0f,EAQP,SAASA,KAAWppB,GAClB,MAAMqpB,EAAoBF,EAAW9gD,OAAS23B,EAAW33B,OAEzD,IAAIisB,EAEA+0B,GACFrpB,EAAWhE,KAAKstB,GAGlB,IACEh1B,EAAS60B,EAAW1G,MAAMp0C,KAAM2xB,EAClC,CAAE,MAAOvB,GAOP,GAAI4qB,GAAqB3f,EACvB,MAPqC,EAUvC,OAAO4f,EAVgC,EAWzC,CAEKD,IACC/0B,GAAUA,EAAOi1B,MAA+B,mBAAhBj1B,EAAOi1B,KACzCj1B,EAAOi1B,KAAKA,EAAMD,GACTh1B,aAAkBmE,MAC3B6wB,EAAKh1B,GAELi1B,EAAKj1B,GAGX,CAOA,SAASg1B,EAAK7qB,KAAUyqB,GACjBxf,IACHA,GAAS,EACTuf,EAASxqB,KAAUyqB,GAEvB,CAOA,SAASK,EAAK/hD,GACZ8hD,EAAK,KAAM9hD,EACb,CACF,CAxHQ,CAAKyzB,EAAIiI,EAAT,IAAkBgmB,GAElBD,EAAS,QAASC,EAhBpB,CAkBF,CAjCAhmB,CAAK,QAASnzB,EAkChB,EAhDuBwlC,IAmDvB,SAAaiU,GACX,GAA0B,mBAAfA,EACT,MAAM,IAAIjvB,UACR,+CAAiDivB,GAKrD,OADAV,EAAI9sB,KAAKwtB,GACFT,CACT,GA1DA,OAAOA,CA2DT,CCpDO,MAAMU,GAAU,CAACC,SAcxB,SAAkB/2B,EAAMg3B,GACtB,QAAgBtxB,IAAZsxB,GAA4C,iBAAZA,EAClC,MAAM,IAAIpvB,UAAU,mCAGtBqvB,GAAWj3B,GACX,IAIIk3B,EAJA/gD,EAAQ,EACRG,GAAO,EACPuF,EAAQmkB,EAAKtqB,OAIjB,QACcgwB,IAAZsxB,GACmB,IAAnBA,EAAQthD,QACRshD,EAAQthD,OAASsqB,EAAKtqB,OACtB,CACA,KAAOmG,KACL,GAAgC,KAA5BmkB,EAAKgsB,YAAYnwC,IAGnB,GAAIq7C,EAAc,CAChB/gD,EAAQ0F,EAAQ,EAChB,KACF,OACSvF,EAAM,IAGf4gD,GAAe,EACf5gD,EAAMuF,EAAQ,GAIlB,OAAOvF,EAAM,EAAI,GAAK0pB,EAAKhiB,MAAM7H,EAAOG,EAC1C,CAEA,GAAI0gD,IAAYh3B,EACd,MAAO,GAGT,IAAIm3B,GAAoB,EACpBC,EAAeJ,EAAQthD,OAAS,EAEpC,KAAOmG,KACL,GAAgC,KAA5BmkB,EAAKgsB,YAAYnwC,IAGnB,GAAIq7C,EAAc,CAChB/gD,EAAQ0F,EAAQ,EAChB,KACF,OAEIs7C,EAAmB,IAGrBD,GAAe,EACfC,EAAmBt7C,EAAQ,GAGzBu7C,GAAgB,IAEdp3B,EAAKgsB,YAAYnwC,KAAWm7C,EAAQhL,YAAYoL,KAC9CA,EAAe,IAGjB9gD,EAAMuF,IAKRu7C,GAAgB,EAChB9gD,EAAM6gD,IAMVhhD,IAAUG,EACZA,EAAM6gD,EACG7gD,EAAM,IACfA,EAAM0pB,EAAKtqB,QAGb,OAAOsqB,EAAKhiB,MAAM7H,EAAOG,EAC3B,EAlGkC+gD,QA4GlC,SAAiBr3B,GAGf,GAFAi3B,GAAWj3B,GAES,IAAhBA,EAAKtqB,OACP,MAAO,IAGT,IAGI4hD,EAHAhhD,GAAO,EACPuF,EAAQmkB,EAAKtqB,OAKjB,OAASmG,GACP,GAAgC,KAA5BmkB,EAAKgsB,YAAYnwC,IACnB,GAAIy7C,EAAgB,CAClBhhD,EAAMuF,EACN,KACF,OACUy7C,IAEVA,GAAiB,GAIrB,OAAOhhD,EAAM,EACe,KAAxB0pB,EAAKgsB,YAAY,GACf,IACA,IACM,IAAR11C,GAAqC,KAAxB0pB,EAAKgsB,YAAY,GAC5B,KACAhsB,EAAKhiB,MAAM,EAAG1H,EACtB,EA5I2C0gD,QAsJ3C,SAAiBh3B,GACfi3B,GAAWj3B,GAEX,IASIs3B,EATAz7C,EAAQmkB,EAAKtqB,OAEbY,GAAO,EACPihD,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAO57C,KAAS,CACd,MAAMmV,EAAOgP,EAAKgsB,YAAYnwC,GAE9B,GAAa,KAATmV,EAWA1a,EAAM,IAGRghD,GAAiB,EACjBhhD,EAAMuF,EAAQ,GAGH,KAATmV,EAEEwmC,EAAW,EACbA,EAAW37C,EACc,IAAhB47C,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIH,EAAgB,CAClBC,EAAY17C,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACE27C,EAAW,GACXlhD,EAAM,GAEU,IAAhBmhD,GAEiB,IAAhBA,GAAqBD,IAAalhD,EAAM,GAAKkhD,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOv3B,EAAKhiB,MAAMw5C,EAAUlhD,EAC9B,EAnNoDk1B,KA6NpD,YAAiBksB,GACf,IAEIC,EAFA97C,GAAS,EAIb,OAASA,EAAQ67C,EAAShiD,QACxBuhD,GAAWS,EAAS77C,IAEhB67C,EAAS77C,KACX87C,OACajyB,IAAXiyB,EAAuBD,EAAS77C,GAAS87C,EAAS,IAAMD,EAAS77C,IAIvE,YAAkB6pB,IAAXiyB,EAAuB,IAahC,SAAmB33B,GACjBi3B,GAAWj3B,GAEX,MAAM43B,EAAmC,KAAxB53B,EAAKgsB,YAAY,GAGlC,IAAIn3C,EAuBN,SAAyBmrB,EAAM63B,GAC7B,IAMI7mC,EAEA8mC,EARAn2B,EAAS,GACTo2B,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACPp8C,GAAS,EAMb,OAASA,GAASmkB,EAAKtqB,QAAQ,CAC7B,GAAImG,EAAQmkB,EAAKtqB,OACfsb,EAAOgP,EAAKgsB,YAAYnwC,OACnB,IAAa,KAATmV,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAIgnC,IAAcn8C,EAAQ,GAAc,IAATo8C,QAExB,GAAID,IAAcn8C,EAAQ,GAAc,IAATo8C,EAAY,CAChD,GACEt2B,EAAOjsB,OAAS,GACM,IAAtBqiD,GAC0C,KAA1Cp2B,EAAOqqB,YAAYrqB,EAAOjsB,OAAS,IACO,KAA1CisB,EAAOqqB,YAAYrqB,EAAOjsB,OAAS,GAEnC,GAAIisB,EAAOjsB,OAAS,GAGlB,GAFAoiD,EAAiBn2B,EAAOu2B,YAAY,KAEhCJ,IAAmBn2B,EAAOjsB,OAAS,EAAG,CACpCoiD,EAAiB,GACnBn2B,EAAS,GACTo2B,EAAoB,IAEpBp2B,EAASA,EAAO3jB,MAAM,EAAG85C,GACzBC,EAAoBp2B,EAAOjsB,OAAS,EAAIisB,EAAOu2B,YAAY,MAG7DF,EAAYn8C,EACZo8C,EAAO,EACP,QACF,OACK,GAAIt2B,EAAOjsB,OAAS,EAAG,CAC5BisB,EAAS,GACTo2B,EAAoB,EACpBC,EAAYn8C,EACZo8C,EAAO,EACP,QACF,CAGEJ,IACFl2B,EAASA,EAAOjsB,OAAS,EAAIisB,EAAS,MAAQ,KAC9Co2B,EAAoB,EAExB,MACMp2B,EAAOjsB,OAAS,EAClBisB,GAAU,IAAM3B,EAAKhiB,MAAMg6C,EAAY,EAAGn8C,GAE1C8lB,EAAS3B,EAAKhiB,MAAMg6C,EAAY,EAAGn8C,GAGrCk8C,EAAoBl8C,EAAQm8C,EAAY,EAG1CA,EAAYn8C,EACZo8C,EAAO,CACT,MAAoB,KAATjnC,GAAyBinC,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOt2B,CACT,CAtGcw2B,CAAgBn4B,GAAO43B,GAEd,IAAjB/iD,EAAMa,QAAiBkiD,IACzB/iD,EAAQ,KAGNA,EAAMa,OAAS,GAA2C,KAAtCsqB,EAAKgsB,YAAYhsB,EAAKtqB,OAAS,KACrDb,GAAS,KAGX,OAAO+iD,EAAW,IAAM/iD,EAAQA,CAClC,CA9BsC,CAAU8iD,EAChD,EA5O0DS,IAAK,KA8W/D,SAASnB,GAAWj3B,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAI4H,UACR,mCAAqCywB,KAAKC,UAAUt4B,GAG1D,CCpaO,MAAMu4B,GAAU,CAACC,IAExB,WACE,MAAO,GACT,GCYO,SAASC,GAAMC,GACpB,OAAOhsB,QACa,OAAlBgsB,GAC2B,iBAAlBA,GACP,SAAUA,GACVA,EAAchzC,MACd,aAAcgzC,GACdA,EAAcC,eAESjzB,IAAvBgzB,EAAcE,KAEpB,CClBO,SAASC,GAAU74B,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAI84B,IAAI94B,QACV,IAAKy4B,GAAMz4B,GAAO,CAEvB,MAAM8L,EAAQ,IAAIlE,UAChB,+EACE5H,EACA,KAGJ,MADA8L,EAAM9a,KAAO,uBACP8a,CACR,CAEA,GAAsB,UAAlB9L,EAAK24B,SAAsB,CAE7B,MAAM7sB,EAAQ,IAAIlE,UAAU,kCAE5B,MADAkE,EAAM9a,KAAO,yBACP8a,CACR,CAEA,OAWF,SAA6B7E,GAC3B,GAAqB,KAAjBA,EAAI8xB,SAAiB,CAEvB,MAAMjtB,EAAQ,IAAIlE,UAChB,wDAGF,MADAkE,EAAM9a,KAAO,4BACP8a,CACR,CAEA,MAAMktB,EAAW/xB,EAAI+xB,SACrB,IAAIn9C,GAAS,EAEb,OAASA,EAAQm9C,EAAStjD,QACxB,GACkC,KAAhCsjD,EAAShN,YAAYnwC,IACe,KAApCm9C,EAAShN,YAAYnwC,EAAQ,GAC7B,CACA,MAAMo9C,EAAQD,EAAShN,YAAYnwC,EAAQ,GAC3C,GAAc,KAAVo9C,GAAoC,MAAVA,EAAyB,CAErD,MAAMntB,EAAQ,IAAIlE,UAChB,uDAGF,MADAkE,EAAM9a,KAAO,4BACP8a,CACR,CACF,CAGF,OAAOotB,mBAAmBF,EAC5B,CA1CSG,CAAoBn5B,EAC7B,CCdA,MAAMN,GAA6B,CACjC,UACA,OACA,WACA,OACA,UACA,WAGK,MAAM05B,GAuBX,WAAA9kD,CAAYO,GAEV,IAAIJ,EAKFA,EAHGI,EAEM4jD,GAAM5jD,GACL,CAACmrB,KAAMnrB,GACS,iBAAVA,GA+jBtB,SAAsBA,GACpB,OAAO63B,QACL73B,GACmB,iBAAVA,GACP,eAAgBA,GAChB,eAAgBA,EAEtB,CAtkB4CwkD,CAAaxkD,GACzC,CAACA,SAEDA,EANA,CAAC,EAkBb6G,KAAK88C,IAAM,QAAS/jD,EAAU,GAAK8jD,GAAQC,MAU3C98C,KAAK2I,KAAO,CAAC,EASb3I,KAAK49C,QAAU,GAOf59C,KAAK69C,SAAW,GAOhB79C,KAAK7G,MAYL6G,KAAKs9B,IAULt9B,KAAKimB,OASLjmB,KAAK89C,OAIL,IAkBIrjB,EAlBAt6B,GAAS,EAEb,OAASA,EAAQ6jB,GAAMhqB,QAAQ,CAC7B,MAAMygC,EAAQzW,GAAM7jB,GAKlBs6B,KAAS1hC,QACUixB,IAAnBjxB,EAAQ0hC,IACW,OAAnB1hC,EAAQ0hC,KAGRz6B,KAAKy6B,GAAmB,YAAVA,EAAsB,IAAI1hC,EAAQ0hC,IAAU1hC,EAAQ0hC,GAEtE,CAMA,IAAKA,KAAS1hC,EAEPirB,GAAM7hB,SAASs4B,KAElBz6B,KAAKy6B,GAAS1hC,EAAQ0hC,GAG5B,CAQA,YAAI4gB,GACF,MAA4B,iBAAdr7C,KAAKskB,KACf82B,GAAQC,SAASr7C,KAAKskB,WACtB0F,CACN,CAcA,YAAIqxB,CAASA,GACX0C,GAAe1C,EAAU,YACzB2C,GAAW3C,EAAU,YACrBr7C,KAAKskB,KAAO82B,GAAQtrB,KAAK9vB,KAAK27C,SAAW,GAAIN,EAC/C,CAQA,WAAIM,GACF,MAA4B,iBAAd37C,KAAKskB,KACf82B,GAAQO,QAAQ37C,KAAKskB,WACrB0F,CACN,CAYA,WAAI2xB,CAAQA,GACV,GAAW37C,KAAKq7C,SAAU,WAC1Br7C,KAAKskB,KAAO82B,GAAQtrB,KAAK6rB,GAAW,GAAI37C,KAAKq7C,SAC/C,CAQA,WAAIC,GACF,MAA4B,iBAAdt7C,KAAKskB,KACf82B,GAAQE,QAAQt7C,KAAKskB,WACrB0F,CACN,CAcA,WAAIsxB,CAAQA,GAIV,GAHA0C,GAAW1C,EAAS,WACpB,GAAWt7C,KAAK27C,QAAS,WAErBL,EAAS,CACX,GAA+B,KAA3BA,EAAQhL,YAAY,GACtB,MAAM,IAAIlmB,MAAM,iCAGlB,GAAIkxB,EAAQn5C,SAAS,IAAK,GACxB,MAAM,IAAIioB,MAAM,yCAEpB,CAEApqB,KAAKskB,KAAO82B,GAAQtrB,KAAK9vB,KAAK27C,QAAS37C,KAAKi+C,MAAQ3C,GAAW,IACjE,CAQA,QAAIh3B,GACF,OAAOtkB,KAAK49C,QAAQ59C,KAAK49C,QAAQ5jD,OAAS,EAC5C,CAcA,QAAIsqB,CAAKA,GACHy4B,GAAMz4B,KACRA,EAAO64B,GAAU74B,IAGnBy5B,GAAez5B,EAAM,QAEjBtkB,KAAKskB,OAASA,GAChBtkB,KAAK49C,QAAQjwB,KAAKrJ,EAEtB,CAQA,QAAI25B,GACF,MAA4B,iBAAdj+C,KAAKskB,KACf82B,GAAQC,SAASr7C,KAAKskB,KAAMtkB,KAAKs7C,cACjCtxB,CACN,CAcA,QAAIi0B,CAAKA,GACPF,GAAeE,EAAM,QACrBD,GAAWC,EAAM,QACjBj+C,KAAKskB,KAAO82B,GAAQtrB,KAAK9vB,KAAK27C,SAAW,GAAIsC,GAAQj+C,KAAKs7C,SAAW,IACvE,CA+DA,IAAA4C,CAAK7zB,EAAeC,EAAwBnG,GAE1C,MAAMyG,EAAU5qB,KAAK4qB,QAAQP,EAAeC,EAAwBnG,GAIpE,MAFAyG,EAAQK,OAAQ,EAEVL,CACR,CA4DA,IAAA5oB,CAAKqoB,EAAeC,EAAwBnG,GAE1C,MAAMyG,EAAU5qB,KAAK4qB,QAAQP,EAAeC,EAAwBnG,GAIpE,OAFAyG,EAAQK,WAAQjB,EAETY,CACT,CA4DA,OAAAA,CAAQP,EAAeC,EAAwBnG,GAC7C,MAAMyG,EAAU,IAAIT,GAElBE,EACAC,EACAnG,GAYF,OATInkB,KAAKskB,OACPsG,EAAQ5xB,KAAOgH,KAAKskB,KAAO,IAAMsG,EAAQ5xB,KACzC4xB,EAAQM,KAAOlrB,KAAKskB,MAGtBsG,EAAQK,OAAQ,EAEhBjrB,KAAK69C,SAASlwB,KAAK/C,GAEZA,CACT,CAeA,QAAA7yB,CAASqyC,GACP,QAAmBpgB,IAAfhqB,KAAK7G,MACP,MAAO,GAGT,GAA0B,iBAAf6G,KAAK7G,MACd,OAAO6G,KAAK7G,MAId,OADgB,IAAIm4C,YAAYlH,QAAYpgB,GAC7BggB,OAAOhqC,KAAK7G,MAC7B,EAaF,SAAS6kD,GAAWG,EAAMnlD,GACxB,GAAImlD,GAAQA,EAAKh8C,SAASi5C,GAAQsB,KAChC,MAAM,IAAItyB,MACR,IAAMpxB,EAAO,uCAAyCoiD,GAAQsB,IAAM,IAG1E,CAYA,SAASqB,GAAeI,EAAMnlD,GAC5B,IAAKmlD,EACH,MAAM,IAAI/zB,MAAM,IAAMpxB,EAAO,oBAEjC,CAYA,SAAS,GAAWsrB,EAAMtrB,GACxB,IAAKsrB,EACH,MAAM,IAAI8F,MAAM,YAAcpxB,EAAO,kCAEzC,CCjnBO,MAAMolD,GAIX,SAQcv+C,GACR,MAEMw+C,EAFOr+C,KACOpH,YAKpB,UACMO,EAAQklD,EAAMx+C,GAEdu0C,EAAQ,WACZ,OAAOj7C,EAAMi7C,MAAMA,EAAOt6C,UAC5B,EAgBA,OAdAnC,OAAO2mD,eAAelK,EAAOiK,GActBjK,CAGb,EC+TI,GAAM,CAAC,EAAEv8C,eAeR,MAAM0mD,WAAkBH,GAI7B,WAAAxlD,GAEE2I,MAAM,QAeNvB,KAAKw+C,cAAWx0B,EAYhBhqB,KAAKy+C,YAASz0B,EAadhqB,KAAK0+C,UAAY,GAajB1+C,KAAKixC,cAAWjnB,EAShBhqB,KAAK2+C,aAAe,EASpB3+C,KAAK4+C,YAAS50B,EASdhqB,KAAK6+C,UAAY,CAAC,EAUlB7+C,KAAKo0B,YAASpK,EASdhqB,KAAK8+C,aAAetE,IACtB,CAaA,IAAA7gD,GAEE,MAAMqgD,EACgF,IAC9EuE,GAER,IAAIp+C,GAAS,EAEb,OAASA,EAAQH,KAAK0+C,UAAU1kD,QAAQ,CACtC,MAAM+kD,EAAW/+C,KAAK0+C,UAAUv+C,GAChC65C,EAAY9S,OAAO6X,EACrB,CAIA,OAFA/E,EAAYrxC,KAAKlP,IAAO,EAAM,CAAC,EAAGuG,KAAK6+C,YAEhC7E,CACT,CA6DA,IAAArxC,CAAKlQ,EAAKU,GACR,MAAmB,iBAARV,EAEgB,IAArBqB,UAAUE,QACZglD,GAAe,OAAQh/C,KAAK4+C,QAC5B5+C,KAAK6+C,UAAUpmD,GAAOU,EACf6G,MAID,GAAI1H,KAAK0H,KAAK6+C,UAAWpmD,IAAQuH,KAAK6+C,UAAUpmD,SAASuxB,EAI/DvxB,GACFumD,GAAe,OAAQh/C,KAAK4+C,QAC5B5+C,KAAK6+C,UAAYpmD,EACVuH,MAIFA,KAAK6+C,SACd,CAmBA,MAAAI,GACE,GAAIj/C,KAAK4+C,OACP,OAAO5+C,KAMT,MAAMo3B,EAAgC,KAEtC,OAASp3B,KAAK2+C,YAAc3+C,KAAK0+C,UAAU1kD,QAAQ,CACjD,MAAO+kD,KAAahmD,GAAWiH,KAAK0+C,UAAU1+C,KAAK2+C,aAEnD,IAAmB,IAAf5lD,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAKixB,GAGf,MAAMk1B,EAAcH,EAASzmD,KAAK8+B,KAASr+B,GAEhB,mBAAhBmmD,GACTl/C,KAAK8+C,aAAa5X,IAAIgY,EAE1B,CAKA,OAHAl/C,KAAK4+C,QAAS,EACd5+C,KAAK2+C,YAAchvB,OAAOyC,kBAEnBpyB,IACT,CAgBA,KAAAm/C,CAAMj0B,GACJlrB,KAAKi/C,SACL,MAAMG,EAAWC,GAAMn0B,GACjBkJ,EAASp0B,KAAKo0B,QAAUp0B,KAAKy+C,OAEnC,OADAa,GAAa,QAASlrB,GACfA,EAAO7D,OAAO6uB,GAAWA,EAClC,CA4CA,OAAAG,CAAQr0B,EAAM+vB,GACZ,MAAM7jB,EAAOp3B,KAMb,OAJAA,KAAKi/C,SACLK,GAAa,UAAWt/C,KAAKo0B,QAAUp0B,KAAKy+C,QAC5Ce,GAAe,UAAWx/C,KAAKixC,UAAYjxC,KAAKw+C,UAEzCvD,EAAOwE,OAASz1B,EAAWixB,GAAQ,IAAIyE,QAAQD,GAQtD,SAASA,EAAS1lB,EAAS4lB,GACzB,MAAMP,EAAWC,GAAMn0B,GAGjB00B,EAEsBxoB,EAAK+nB,MAAMC,GA+BvC,SAASS,EAASzvB,EAAOlF,GACnBkF,IAAUlF,EACZy0B,EAAOvvB,GACE2J,EACTA,EAAQ7O,GAGR+vB,OAAKjxB,EAAWkB,EAEpB,CArCAkM,EAAK8iB,IAAI0F,EAAWR,GAAU,SAAUhvB,EAAOpE,EAAMd,GACnD,GAAIkF,IAAUpE,IAASd,EACrB,OAAO20B,EAASzvB,GAKlB,MAAM0vB,EAC8D,EAI9DC,EAAgB3oB,EAAKwlB,UAAUkD,EAAa50B,GA2iB1D,IAAyB/xB,EACC,iBADDA,EAziBG4mD,IAqjB5B,SAAsB5mD,GACpB,OAAO63B,QACL73B,GACmB,iBAAVA,GACP,eAAgBA,GAChB,eAAgBA,EAEtB,CAlBsC,CAAaA,GAziBzC+xB,EAAK/xB,MAAQ4mD,EAEb70B,EAAKjF,OAAS85B,EAGhBF,EAASzvB,EAAqD,EAChE,GAiBF,CACF,CAiCA,WAAA4vB,CAAY90B,GAEV,IAEIjF,EAFAg6B,GAAW,EAYf,OARAjgD,KAAKi/C,SACLK,GAAa,cAAet/C,KAAKo0B,QAAUp0B,KAAKy+C,QAChDe,GAAe,cAAex/C,KAAKixC,UAAYjxC,KAAKw+C,UAEpDx+C,KAAKu/C,QAAQr0B,GASb,SAAkBkF,EAAOlF,GACvB+0B,GAAW,EACX9F,GAAK/pB,GACLnK,EAASiF,CACX,IAZAg1B,GAAW,cAAe,UAAWD,GAG9Bh6B,CAUT,CAwCA,GAAAi0B,CAAIluB,EAAMd,EAAM+vB,GACdkF,GAAWn0B,GACXhsB,KAAKi/C,SAEL,MAAMH,EAAe9+C,KAAK8+C,aAO1B,OALK7D,GAAwB,mBAAT/vB,IAClB+vB,EAAO/vB,EACPA,OAAOlB,GAGFixB,EAAOwE,OAASz1B,EAAWixB,GAAQ,IAAIyE,QAAQD,GAWtD,SAASA,EAAS1lB,EAAS4lB,GAKzB,MAAMP,EAAWC,GAAMn0B,GACvB4zB,EAAa5E,IAAIluB,EAAMozB,GAQvB,SAAkBhvB,EAAOgwB,EAAYl1B,GACnC,MAAMm1B,EAEFD,GAAcp0B,EAGdoE,EACFuvB,EAAOvvB,GACE2J,EACTA,EAAQsmB,GAGRpF,OAAKjxB,EAAWq2B,EAAen1B,EAEnC,GACF,CACF,CAmBA,OAAAo1B,CAAQt0B,EAAMd,GAEZ,IAEIjF,EAFAg6B,GAAW,EAQf,OAJAjgD,KAAKk6C,IAAIluB,EAAMd,GASf,SAAkBkF,EAAOpE,GACvBmuB,GAAK/pB,GACLnK,EAAS+F,EACTi0B,GAAW,CACb,IAXAC,GAAW,UAAW,MAAOD,GAEtBh6B,CAUT,CA+BA,SAAA22B,CAAU5wB,EAAMd,GACdlrB,KAAKi/C,SACL,MAAMG,EAAWC,GAAMn0B,GACjB+lB,EAAWjxC,KAAKixC,UAAYjxC,KAAKw+C,SAIvC,OAHAgB,GAAe,YAAavO,GAC5BkP,GAAWn0B,GAEJilB,EAASjlB,EAAMozB,EACxB,CA2DA,GAAAlY,CAAI/tC,KAAUw4B,GACZ,MAAM+sB,EAAY1+C,KAAK0+C,UACjBG,EAAY7+C,KAAK6+C,UAIvB,GAFAG,GAAe,MAAOh/C,KAAK4+C,QAEvBzlD,cAEG,GAAqB,mBAAVA,EAChBonD,EAAUpnD,EAAOw4B,OACZ,IAAqB,iBAAVx4B,EAOhB,MAAM,IAAI+yB,UAAU,+BAAiC/yB,EAAQ,KANzDd,MAAMF,QAAQgB,GAChBqnD,EAAQrnD,GAERsnD,EAAUtnD,EAId,CAEA,OAAO6G,KAMP,SAAS01B,EAAIv8B,GACX,GAAqB,mBAAVA,EACTonD,EAAUpnD,EAAO,QACZ,IAAqB,iBAAVA,EAShB,MAAM,IAAI+yB,UAAU,+BAAiC/yB,EAAQ,KAR7D,GAAId,MAAMF,QAAQgB,GAAQ,CACxB,MAAOunD,KAAW/uB,GAC2B,EAC7C4uB,EAAUG,EAAQ/uB,EACpB,MACE8uB,EAAUtnD,EAId,CACF,CAMA,SAASsnD,EAAUx6B,GACjB,KAAM,YAAaA,MAAa,aAAcA,GAC5C,MAAM,IAAImE,MACR,8KAIJo2B,EAAQv6B,EAAO06B,SAEX16B,EAAO4J,WACTgvB,EAAUhvB,SAAWp2B,IAAO,EAAMolD,EAAUhvB,SAAU5J,EAAO4J,UAEjE,CAMA,SAAS2wB,EAAQG,GACf,IAAIxgD,GAAS,EAEb,GAAIwgD,aAEG,KAAItoD,MAAMF,QAAQwoD,GAMvB,MAAM,IAAIz0B,UAAU,oCAAsCy0B,EAAU,KALpE,OAASxgD,EAAQwgD,EAAQ3mD,QAAQ,CAE/B07B,EADcirB,EAAQxgD,GAExB,CAGF,CACF,CAOA,SAASogD,EAAUG,EAAQ/uB,GACzB,IAAIxxB,GAAS,EACTygD,GAAc,EAElB,OAASzgD,EAAQu+C,EAAU1kD,QACzB,GAAI0kD,EAAUv+C,GAAO,KAAOugD,EAAQ,CAClCE,EAAazgD,EACb,KACF,CAGF,IAAoB,IAAhBygD,EACFlC,EAAU/wB,KAAK,CAAC+yB,KAAW/uB,SAIxB,GAAIA,EAAW33B,OAAS,EAAG,CAC9B,IAAK6mD,KAAYzlD,GAAQu2B,EACzB,MAAMmvB,EAAiBpC,EAAUkC,GAAY,GACzC,GAAWE,IAAmB,GAAWD,KAC3CA,EAAUpnD,IAAO,EAAMqnD,EAAgBD,IAGzCnC,EAAUkC,GAAc,CAACF,EAAQG,KAAYzlD,EAC/C,CACF,CACF,EA+BK,MAAM2lD,IAAU,IAAIxC,IAAYU,SASvC,SAASK,GAAatmD,EAAMG,GAC1B,GAAqB,mBAAVA,EACT,MAAM,IAAI+yB,UAAU,WAAalzB,EAAO,qBAE5C,CASA,SAASwmD,GAAexmD,EAAMG,GAC5B,GAAqB,mBAAVA,EACT,MAAM,IAAI+yB,UAAU,WAAalzB,EAAO,uBAE5C,CASA,SAASgmD,GAAehmD,EAAM4lD,GAC5B,GAAIA,EACF,MAAM,IAAIx0B,MACR,gBACEpxB,EACA,mHAGR,CAQA,SAASmnD,GAAWt2B,GAGlB,IAAK,GAAWA,IAA8B,iBAAdA,EAAK1tB,KACnC,MAAM,IAAI+vB,UAAU,uBAAyBrC,EAAO,IAGxD,CAUA,SAASq2B,GAAWlnD,EAAMgoD,EAAWf,GACnC,IAAKA,EACH,MAAM,IAAI71B,MACR,IAAMpxB,EAAO,0BAA4BgoD,EAAY,YAG3D,CAMA,SAAS3B,GAAMlmD,GACb,OAOF,SAAyBA,GACvB,OAAO63B,QACL73B,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdS8nD,CAAgB9nD,GAASA,EAAQ,IAAIukD,GAAMvkD,EACpD,CCnsCO,MA0EM,GAWX,SAKYqG,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,GAAoB,iBAATA,EACT,OAAOnH,MAAMF,QAAQqH,GAe7B,SAAoB20C,GAElB,MAAMhzC,EAAS,GACf,IAAIhB,GAAS,EAEb,OAASA,EAAQg0C,EAAMn6C,QACrBmH,EAAOhB,GAAS,GAAQg0C,EAAMh0C,IAGhC,OAAO,GAAYszC,GAMnB,SAASA,KAAO9hB,GACd,IAAIxxB,GAAS,EAEb,OAASA,EAAQgB,EAAOnH,QACtB,GAAImH,EAAOhB,GAAOi0C,MAAMp0C,KAAM2xB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqC,CAAWnyB,GA+ChD,SAAsBiC,GACpB,MAAM6yC,EAAuD,EAE7D,OAAO,GAAYnf,GAMnB,SAASA,EAAItL,GACX,MAAM0qB,EAAsD,EAK5D,IAAI97C,EAEJ,IAAKA,KAAOgJ,EACV,GAAI8yC,EAAa97C,KAAS67C,EAAc77C,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwD,CAAa+G,GAG/D,GAAoB,iBAATA,EACT,OA0ER,SAAqBiC,GACnB,OAAO,GAAYtF,GAKnB,SAASA,EAAK0tB,GACZ,OAAOA,GAAQA,EAAK1tB,OAASsF,CAC/B,CACF,CAnFe,CAAYjC,GAGrB,MAAM,IAAI4qB,MAAM,+CAEpB,EAsFF,SAAS,GAAYsqB,GACnB,OAMA,SAAev7C,EAAOgH,EAAO6qB,GAC3B,OAAOgG,QACL,GAAe73B,IACbu7C,EAAap8C,KACX0H,KACA7G,EACiB,iBAAVgH,EAAqBA,OAAQ6pB,EACpCgB,QAAUhB,GAGlB,CACF,CAEA,SAAS,KACP,OAAO,CACT,CAMA,SAAS,GAAe7wB,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CCnEA,MAAM,GAAQ,GAKD,IAAW,EAKX,IAAO,EAsDb,SAAS,GAAa6yB,EAAMxsB,EAAMu1C,EAAS1iB,GAEhD,IAAI5wB,EAEgB,mBAATjC,GAA0C,mBAAZu1C,GACvC1iB,EAAU0iB,EAEVA,EAAUv1C,GAGViC,EAAQjC,EAGV,MAAMkL,EAAK,GAAQjJ,GACbsS,EAAOse,GAAW,EAAI,GAS5B,SAAS2iB,EAAQnrB,EAAM1pB,EAAO80C,GAC5B,MAAM97C,EACJ0wB,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAG7C,GAA0B,iBAAf1wB,EAAMgD,KAAmB,CAClC,MAAMnD,EAEqB,iBAAlBG,EAAMu0B,QACTv0B,EAAMu0B,QAEc,iBAAfv0B,EAAMH,KACXG,EAAMH,UACNgxB,EAENryB,OAAOK,eAAek9C,EAAO,OAAQ,CACnC/7C,MACE,SAAiB0wB,EAAK1tB,MAAQnD,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOk8C,EAEP,SAASA,IAEP,IAEIC,EAEAtxB,EAEAuxB,EANAnvB,EAAS,GAQb,KAAKzmB,GAAQkL,EAAGmf,EAAM1pB,EAAO80C,EAAQA,EAAQj7C,OAAS,SAAMgwB,MAE1D/D,EA0CR,SAAkB9sB,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CAAC,GAAUA,GAGpB,OAAOA,QAAwC,GAAQ,CAACA,EAC1D,CApDiB,CAAS47C,EAAQlrB,EAAMorB,IAE5BhvB,EAAO,KAAO,IAChB,OAAOA,EAIX,GAAI,aAAc4D,GAAQA,EAAK1uB,SAAU,CACvC,MAAMm6C,EAA0C,EAEhD,GAAIA,EAAan6C,UArHL,SAqHiB8qB,EAAO,GAIlC,IAHApC,GAAUwO,EAAUijB,EAAan6C,SAASnB,QAAU,GAAK+Z,EACzDqhC,EAAeH,EAAQ3iB,OAAOgjB,GAEvBzxB,GAAU,GAAKA,EAASyxB,EAAan6C,SAASnB,QAAQ,CAC3D,MAAMk0B,EAAQonB,EAAan6C,SAAS0oB,GAIpC,GAFAsxB,EAAYH,EAAQ9mB,EAAOrK,EAAQuxB,EAAvBJ,GAERG,EAAU,KAAO,GACnB,OAAOA,EAGTtxB,EAC0B,iBAAjBsxB,EAAU,GAAkBA,EAAU,GAAKtxB,EAAS9P,CAC/D,CAEJ,CAEA,OAAOkS,CACT,CACF,CAzEA+uB,CAAQhpB,OAAMhC,EAAW,GAAzBgrB,EA0EF,CC3RA,MAIMkM,GAAe,GAEfC,GAA2B,CAACrK,oBAAoB,GAChDsK,GAAe,gCAIfC,GAAe,CACnB,CAACngC,KAAM,aAAc9W,GAAI,wCACzB,CAAC8W,KAAM,qBAAsB9W,GAAI,wCACjC,CACE8W,KAAM,YACN9W,GAAI,qDACJ6d,GAAI,gBAEN,CACE/G,KAAM,eACN9W,GAAI,qDACJ6d,GAAI,mBAEN,CACE/G,KAAM,kBACN9W,GAAI,qDACJ6d,GAAI,sBAEN,CAAC/G,KAAM,aAAc9W,GAAI,wCACzB,CAAC8W,KAAM,sBAAuB9W,GAAI,+BAClC,CACE8W,KAAM,mBACN9W,GAAI,kDAEN,CAAC8W,KAAM,aAAc9W,GAAI,qBACzB,CAAC8W,KAAM,UAAW9W,GAAI,kCAAmC6d,GAAI,iBAC7D,CAAC/G,KAAM,eAAgB9W,GAAI,wBAC3B,CAAC8W,KAAM,YAAa9W,GAAI,iCAAkC6d,GAAI,cAC9D,CAAC/G,KAAM,SAAU9W,GAAI,4BAA6B6d,GAAI,YACtD,CAAC/G,KAAM,YAAa9W,GAAI,qBACxB,CAAC8W,KAAM,oBAAqB9W,GAAI,oBAAqB6d,GAAI,gBACzD,CAAC/G,KAAM,mBAAoB9W,GAAI,oBAAqB6d,GAAI,iBAWnD,SAASq5B,GAASvoD,GACvB,MAAMwoD,EAAkBxoD,EAAQwoD,gBAC1BC,EAAezoD,EAAQyoD,aACvBrmD,EAAWpC,EAAQoC,UAAY,GAC/B+B,EAAYnE,EAAQmE,UACpB3B,EAAaxC,EAAQwC,WACrBkmD,EAAqB1oD,EAAQ0oD,mBAC7BC,EAAgB3oD,EAAQ2oD,eAAiBR,GACzCS,EAAgB5oD,EAAQ4oD,eAAiBT,GACzCU,EAAsB7oD,EAAQ6oD,oBAChC,IAAI7oD,EAAQ6oD,uBAAwBT,IACpCA,GACEU,EAAW9oD,EAAQ8oD,SACnBC,EAAmB/oD,EAAQ+oD,iBAC3BC,EAAehpD,EAAQgpD,cAAgBC,GAEvCC,EAAYlB,KACf7Z,IAAI0K,IACJ1K,IAAIya,GACJza,IAAI6S,GAAc6H,GAClB1a,IAAIwa,GAEDx2B,EAAO,IAAIwyB,GAEO,iBAAbviD,IACT+vB,EAAK/xB,MAAQgC,GAef,IAAK,MAAM+mD,KAAeb,GACpB1pD,OAAOD,OAAOqB,EAASmpD,EAAYhhC,QAGjCghC,EAAYhhC,KAEXghC,EAAYj6B,IACCi6B,EAAYj6B,GAK1Bi6B,EAAY93C,IAMpB,MAAM+3C,EAAYF,EAAU9C,MAAMj0B,GAElC,IAAI+uB,EAAWgI,EAAU3B,QAAQ6B,EAAWj3B,GAiB5C,OAdIhuB,IACF+8C,EAAW,CACT99C,KAAM,UACNuxB,QAAS,MACT3rB,WAAY,CAAC7E,aAEb/B,SACoB,SAAlB8+C,EAAS99C,KAAkB89C,EAAS9+C,SAAW,CAAC8+C,KC6DjD,SAAejuB,EAAM2sB,EAAeC,EAAkBC,GAE3D,IAAIxmB,EAEA7yB,EAEAu1C,EAGuB,mBAAlB4D,GACqB,mBAArBC,GAEPp5C,OAAOwqB,EACP+qB,EAAU4D,EACVtmB,EAAUumB,IAGVp5C,EAAOm5C,EAEP5D,EAAU6D,EACVvmB,EAAUwmB,GAGZ,GAAa7sB,EAAMxsB,GAMnB,SAAkBqqB,EAAMorB,GACtB,MAAMjqB,EAASiqB,EAAQA,EAAQj7C,OAAS,GAClCmG,EAAQ6qB,EAASA,EAAO7vB,SAAS4vB,QAAQlB,QAAQG,EACvD,OAAO+qB,EAAQlrB,EAAM1pB,EAAO6qB,EAC9B,GAVmCqH,EAWrC,CD1FE,CAAM4nB,GAaN,SAAmBpwB,EAAM1pB,EAAO6qB,GAC9B,GAAkB,QAAdnB,EAAK1tB,MAAkB6uB,GAA2B,iBAAV7qB,EAO1C,OANI0hD,EACF72B,EAAO7vB,SAASq2B,OAAOrxB,EAAO,GAE9B6qB,EAAO7vB,SAASgF,GAAS,CAAChE,KAAM,OAAQhD,MAAO0wB,EAAK1wB,OAG/CgH,EAGT,GAAkB,YAAd0pB,EAAK1tB,KAAoB,CAE3B,IAAI1D,EAEJ,IAAKA,KAAO24B,GACV,GACEz5B,OAAOD,OAAO05B,GAAe34B,IAC7Bd,OAAOD,OAAOmyB,EAAK9nB,WAAYtJ,GAC/B,CACA,MAAMU,EAAQ0wB,EAAK9nB,WAAWtJ,GACxB+G,EAAO4xB,GAAc34B,IACd,OAAT+G,GAAiBA,EAAK2C,SAAS0nB,EAAK6D,YACtC7D,EAAK9nB,WAAWtJ,GAAOspD,EAAaxxB,OAAOp3B,GAAS,IAAKV,EAAKoxB,GAElE,CAEJ,CAEA,GAAkB,YAAdA,EAAK1tB,KAAoB,CAC3B,IAAIs1B,EAAS8vB,GACRA,EAAgBp/C,SAAS0nB,EAAK6D,WAC/B+zB,GACAA,EAAmBt/C,SAAS0nB,EAAK6D,SAOrC,IAJK+D,GAAU+vB,GAAiC,iBAAVrhD,IACpCsxB,GAAU+vB,EAAa33B,EAAM1pB,EAAO6qB,IAGlCyG,GAAUzG,GAA2B,iBAAV7qB,EAO7B,OANI2hD,GAAoBj4B,EAAK1uB,SAC3B6vB,EAAO7vB,SAASq2B,OAAOrxB,EAAO,KAAM0pB,EAAK1uB,UAEzC6vB,EAAO7vB,SAASq2B,OAAOrxB,EAAO,GAGzBA,CAEX,CACF,IA7DO4rB,GAAakuB,EAAU,CAC5BhuB,SAAQ,WACR1wB,aACA2xB,oBAAoB,EACpBvxB,IAAG,MACHgxB,KAAI,OACJQ,UAAU,EACVC,UAAU,GAuDd,CAWO,SAAS40B,GAAoB7oD,GAIlC,MAAMipD,EAAQjpD,EAAM4xB,QAAQ,KACtBs3B,EAAelpD,EAAM4xB,QAAQ,KAC7Bu3B,EAAanpD,EAAM4xB,QAAQ,KAC3BoX,EAAQhpC,EAAM4xB,QAAQ,KAE5B,OAEEq3B,EAAQ,GAEPjgB,GAAS,GAAKigB,EAAQjgB,GACtBkgB,GAAgB,GAAKD,EAAQC,GAC7BC,GAAc,GAAKF,EAAQE,GAE5BlB,GAAa5hD,KAAKrG,EAAMmJ,MAAM,EAAG8/C,IAE1BjpD,EAGF,EACT,CEtTO,SAASopD,GAAOppD,EAAOqpD,GAC5B,MAAM13B,EAASyF,OAAOp3B,GAEtB,GAAyB,iBAAdqpD,EACT,MAAM,IAAIt2B,UAAU,sBAGtB,IAAImD,EAAQ,EACRlvB,EAAQ2qB,EAAOC,QAAQy3B,GAE3B,MAAkB,IAAXriD,GACLkvB,IACAlvB,EAAQ2qB,EAAOC,QAAQy3B,EAAWriD,EAAQqiD,EAAUxoD,QAGtD,OAAOq1B,CACT,CCuCO,MA0EM,GAWX,SAKY7vB,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,GAAoB,iBAATA,EACT,OAAOnH,MAAMF,QAAQqH,GAe7B,SAAoB20C,GAElB,MAAMhzC,EAAS,GACf,IAAIhB,GAAS,EAEb,OAASA,EAAQg0C,EAAMn6C,QACrBmH,EAAOhB,GAAS,GAAQg0C,EAAMh0C,IAGhC,OAAO,GAAYszC,GAMnB,SAASA,KAAO9hB,GACd,IAAIxxB,GAAS,EAEb,OAASA,EAAQgB,EAAOnH,QACtB,GAAImH,EAAOhB,GAAOi0C,MAAMp0C,KAAM2xB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqC,CAAWnyB,GA+ChD,SAAsBiC,GACpB,MAAM6yC,EAAuD,EAE7D,OAAO,GAAYnf,GAMnB,SAASA,EAAItL,GACX,MAAM0qB,EAAsD,EAK5D,IAAI97C,EAEJ,IAAKA,KAAOgJ,EACV,GAAI8yC,EAAa97C,KAAS67C,EAAc77C,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwD,CAAa+G,GAG/D,GAAoB,iBAATA,EACT,OA0ER,SAAqBiC,GACnB,OAAO,GAAYtF,GAKnB,SAASA,EAAK0tB,GACZ,OAAOA,GAAQA,EAAK1tB,OAASsF,CAC/B,CACF,CAnFe,CAAYjC,GAGrB,MAAM,IAAI4qB,MAAM,+CAEpB,EAsFF,SAAS,GAAYsqB,GACnB,OAMA,SAAev7C,EAAOgH,EAAO6qB,GAC3B,OAAOgG,QACL,GAAe73B,IACbu7C,EAAap8C,KACX0H,KACA7G,EACiB,iBAAVgH,EAAqBA,OAAQ6pB,EACpCgB,QAAUhB,GAGlB,CACF,CAEA,SAAS,KACP,OAAO,CACT,CAMA,SAAS,GAAe7wB,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CCnEA,MAAM,GAAQ,GAKD,IAAW,EAKX,IAAO,EAsDb,SAAS,GAAa6yB,EAAMxsB,EAAMu1C,EAAS1iB,GAEhD,IAAI5wB,EAEgB,mBAATjC,GAA0C,mBAAZu1C,GACvC1iB,EAAU0iB,EAEVA,EAAUv1C,GAGViC,EAAQjC,EAGV,MAAMkL,EAAK,GAAQjJ,GACbsS,EAAOse,GAAW,EAAI,GAS5B,SAAS2iB,EAAQnrB,EAAM1pB,EAAO80C,GAC5B,MAAM97C,EACJ0wB,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAG7C,GAA0B,iBAAf1wB,EAAMgD,KAAmB,CAClC,MAAMnD,EAEqB,iBAAlBG,EAAMu0B,QACTv0B,EAAMu0B,QAEc,iBAAfv0B,EAAMH,KACXG,EAAMH,UACNgxB,EAENryB,OAAOK,eAAek9C,EAAO,OAAQ,CACnC/7C,MACE,SAAiB0wB,EAAK1tB,MAAQnD,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOk8C,EAEP,SAASA,IAEP,IAEIC,EAEAtxB,EAEAuxB,EANAnvB,EAAS,GAQb,KAAKzmB,GAAQkL,EAAGmf,EAAM1pB,EAAO80C,EAAQA,EAAQj7C,OAAS,SAAMgwB,MAE1D/D,EA0CR,SAAkB9sB,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CAAC,GAAUA,GAGpB,OAAOA,QAAwC,GAAQ,CAACA,EAC1D,CApDiB,CAAS47C,EAAQlrB,EAAMorB,IAE5BhvB,EAAO,KAAO,IAChB,OAAOA,EAIX,GAAI,aAAc4D,GAAQA,EAAK1uB,SAAU,CACvC,MAAMm6C,EAA0C,EAEhD,GAAIA,EAAan6C,UArHL,SAqHiB8qB,EAAO,GAIlC,IAHApC,GAAUwO,EAAUijB,EAAan6C,SAASnB,QAAU,GAAK+Z,EACzDqhC,EAAeH,EAAQ3iB,OAAOgjB,GAEvBzxB,GAAU,GAAKA,EAASyxB,EAAan6C,SAASnB,QAAQ,CAC3D,MAAMk0B,EAAQonB,EAAan6C,SAAS0oB,GAIpC,GAFAsxB,EAAYH,EAAQ9mB,EAAOrK,EAAQuxB,EAAvBJ,GAERG,EAAU,KAAO,GACnB,OAAOA,EAGTtxB,EAC0B,iBAAjBsxB,EAAU,GAAkBA,EAAU,GAAKtxB,EAAS9P,CAC/D,CAEJ,CAEA,OAAOkS,CACT,CACF,CAzEA+uB,CAAQhpB,OAAMhC,EAAW,GAAzBgrB,EA0EF,CCvSO,SAASyN,GAAez2B,EAAM3gB,EAAMtS,GACzC,MACM2pD,EAAU,IADC3pD,GAAW,CAAC,GACI++C,QAAU,IACrC6K,EAiIR,SAAiBC,GAEf,MAAM38B,EAAS,GAEf,IAAK5tB,MAAMF,QAAQyqD,GACjB,MAAM,IAAI12B,UAAU,qDAKtB,MAAM7gB,GACHu3C,EAAY,IAAMvqD,MAAMF,QAAQyqD,EAAY,IACzCA,EACA,CAACA,GAEP,IAAIziD,GAAS,EAEb,OAASA,EAAQkL,EAAKrR,QAAQ,CAC5B,MAAM6oD,EAAQx3C,EAAKlL,GACnB8lB,EAAO0H,KAAK,CAACm1B,GAAaD,EAAM,IAAKE,GAAWF,EAAM,KACxD,CAEA,OAAO58B,CACT,CAxJgB+8B,CAAQ33C,GACtB,IAAI43C,GAAa,EAEjB,OAASA,EAAYN,EAAM3oD,QACzB,GAAagyB,EAAM,OAAQ+oB,GAI7B,SAASA,EAAQlrB,EAAMorB,GACrB,IAEIiO,EAFA/iD,GAAS,EAIb,OAASA,EAAQ80C,EAAQj7C,QAAQ,CAC/B,MAAMgxB,EAASiqB,EAAQ90C,GAEjBowC,EAAW2S,EAAcA,EAAY/nD,cAAW6uB,EAEtD,GACE04B,EACE13B,EACAulB,EAAWA,EAASxlB,QAAQC,QAAUhB,EACtCk5B,GAGF,OAGFA,EAAcl4B,CAChB,CAEA,GAAIk4B,EACF,OAcJ,SAAiBr5B,EAAMorB,GACrB,MAAMjqB,EAASiqB,EAAQA,EAAQj7C,OAAS,GAClC01B,EAAOizB,EAAMM,GAAW,GACxBtjD,EAAUgjD,EAAMM,GAAW,GACjC,IAAIxoD,EAAQ,EAEZ,MACM0F,EADW6qB,EAAO7vB,SACD4vB,QAAQlB,GAC/B,IAAIs5B,GAAS,EAET/K,EAAQ,GAEZ1oB,EAAK6hB,UAAY,EAEjB,IAAIH,EAAQ1hB,EAAK8hB,KAAK3nB,EAAK1wB,OAE3B,KAAOi4C,GAAO,CACZ,MAAM5zC,EAAW4zC,EAAMjxC,MAEjBijD,EAAc,CAClBjjD,MAAOixC,EAAMjxC,MACbkjD,MAAOjS,EAAMiS,MACbl4B,MAAO,IAAI8pB,EAASprB,IAEtB,IAAI1wB,EAAQwG,KAAWyxC,EAAOgS,GA8B9B,GA5BqB,iBAAVjqD,IACTA,EAAQA,EAAMa,OAAS,EAAI,CAACmC,KAAM,OAAQhD,cAAS6wB,IAIvC,IAAV7wB,EAIFu2B,EAAK6hB,UAAY/zC,EAAW,GAExB/C,IAAU+C,GACZ46C,EAAMzqB,KAAK,CACTxxB,KAAM,OACNhD,MAAO0wB,EAAK1wB,MAAMmJ,MAAM7H,EAAO+C,KAI/BnF,MAAMF,QAAQgB,GAChBi/C,EAAMzqB,QAAQx0B,GACLA,GACTi/C,EAAMzqB,KAAKx0B,GAGbsB,EAAQ+C,EAAW4zC,EAAM,GAAGp3C,OAC5BmpD,GAAS,IAGNzzB,EAAK4zB,OACR,MAGFlS,EAAQ1hB,EAAK8hB,KAAK3nB,EAAK1wB,MACzB,CAEIgqD,GACE1oD,EAAQovB,EAAK1wB,MAAMa,QACrBo+C,EAAMzqB,KAAK,CAACxxB,KAAM,OAAQhD,MAAO0wB,EAAK1wB,MAAMmJ,MAAM7H,KAGpDuwB,EAAO7vB,SAASq2B,OAAOrxB,EAAO,KAAMi4C,IAEpCA,EAAQ,CAACvuB,GAGX,OAAO1pB,EAAQi4C,EAAMp+C,MACvB,CAtFW0nB,CAAQmI,EAAMorB,EAEzB,CAqFF,CA2CA,SAAS6N,GAAapzB,GACpB,MAAuB,iBAATA,EAAoB,IAAI6iB,OCxPzB,SAA4BprB,GAC1C,GAAsB,iBAAXA,EACV,MAAM,IAAI+E,UAAU,qBAKrB,OAAO/E,EACLxnB,QAAQ,sBAAuB,QAC/BA,QAAQ,KAAM,QACjB,CD8O+C,CAAO+vB,GAAO,KAAOA,CACpE,CAUA,SAASqzB,GAAWpjD,GAClB,MAA0B,mBAAZA,EACVA,EACA,WACE,OAAOA,CACT,CACN,CE5PA,MAAM4jD,GAAc,WAEdC,GAAiB,CAAC,WAAY,OAAQ,QAAS,SAkErD,SAASC,GAAqB1vB,GAC5B/zB,KAAK9D,MAAM,CAACC,KAAM,OAAQ8X,MAAO,KAAMsX,IAAK,GAAIpwB,SAAU,IAAK44B,EACjE,CAMA,SAAS2vB,GAA0B3vB,GACjC/zB,KAAKqqC,OAAOnuC,MAAMuuC,iBAAiBnyC,KAAK0H,KAAM+zB,EAChD,CAMA,SAAS4vB,GAAwB5vB,GAC/B/zB,KAAKqqC,OAAOvuC,KAAK2uC,iBAAiBnyC,KAAK0H,KAAM+zB,EAC/C,CAMA,SAAS6vB,GAAuB7vB,GAC9B/zB,KAAKqqC,OAAOvuC,KAAK6M,KAAKrQ,KAAK0H,KAAM+zB,GACjC,MAAMlK,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACrC6vB,EAAK1tB,KACZ0tB,EAAK0B,IAAM,UAAYvrB,KAAKk6B,eAAenG,EAC7C,CAMA,SAAS8vB,GAAyB9vB,GAChC/zB,KAAKqqC,OAAOvuC,KAAK6uC,cAAcryC,KAAK0H,KAAM+zB,EAC5C,CAMA,SAAS+vB,GAAoB/vB,GAC3B/zB,KAAKlE,KAAKi4B,EACZ,CAGA,SAASgwB,GAA6B/3B,GACpCy2B,GACEz2B,EACA,CACE,CAAC,kDAAmDg4B,IACpD,CAAC,0DAA2DC,KAE9D,CAACnM,OAAQ,CAAC,OAAQ,kBAEtB,CAYA,SAASkM,GAAQ3hD,EAAG46C,EAAUiH,EAAQ5/B,EAAM8sB,GAC1C,IAAIn5B,EAAS,GAGb,IAAK,GAASm5B,GACZ,OAAO,EAUT,GANI,MAAM5xC,KAAKy9C,KACbiH,EAASjH,EAAWiH,EACpBjH,EAAW,GACXhlC,EAAS,YAwDb,SAAyBisC,GACvB,MAAMC,EAAQD,EAAOpzB,MAAM,KAE3B,GACEqzB,EAAMnqD,OAAS,GACdmqD,EAAMA,EAAMnqD,OAAS,KACnB,IAAIwF,KAAK2kD,EAAMA,EAAMnqD,OAAS,MAC5B,aAAawF,KAAK2kD,EAAMA,EAAMnqD,OAAS,MAC3CmqD,EAAMA,EAAMnqD,OAAS,KACnB,IAAIwF,KAAK2kD,EAAMA,EAAMnqD,OAAS,MAC5B,aAAawF,KAAK2kD,EAAMA,EAAMnqD,OAAS,KAE5C,OAAO,EAGT,OAAO,CACT,CArEOoqD,CAAgBF,GACnB,OAAO,EAGT,MAAMC,EAuER,SAAkB54B,GAChB,MAAM84B,EAAY,sBAAsB7S,KAAKjmB,GAE7C,IAAK84B,EACH,MAAO,CAAC94B,OAAKvB,GAGfuB,EAAMA,EAAIjpB,MAAM,EAAG+hD,EAAUlkD,OAE7B,IAAImkD,EAAQD,EAAU,GAClBE,EAAoBD,EAAMv5B,QAAQ,KACtC,MAAMy5B,EAAgBjC,GAAOh3B,EAAK,KAClC,IAAIk5B,EAAgBlC,GAAOh3B,EAAK,KAEhC,MAA8B,IAAvBg5B,GAA4BC,EAAgBC,GACjDl5B,GAAO+4B,EAAMhiD,MAAM,EAAGiiD,EAAoB,GAC1CD,EAAQA,EAAMhiD,MAAMiiD,EAAoB,GACxCA,EAAoBD,EAAMv5B,QAAQ,KAClC05B,IAGF,MAAO,CAACl5B,EAAK+4B,EACf,CA7FgBI,CAASR,EAAS5/B,GAEhC,IAAK6/B,EAAM,GAAI,OAAO,EAGtB,MAAMl+B,EAAS,CACb9pB,KAAM,OACN8X,MAAO,KACPsX,IAAKtT,EAASglC,EAAWkH,EAAM,GAC/BhpD,SAAU,CAAC,CAACgB,KAAM,OAAQhD,MAAO8jD,EAAWkH,EAAM,MAGpD,OAAIA,EAAM,GACD,CAACl+B,EAAQ,CAAC9pB,KAAM,OAAQhD,MAAOgrD,EAAM,KAGvCl+B,CACT,CAUA,SAASg+B,GAAU5hD,EAAGsiD,EAAOz5C,EAAOkmC,GAClC,SAEG,GAASA,GAAO,IAEjB,UAAU5xC,KAAK0L,KAKV,CACL/O,KAAM,OACN8X,MAAO,KACPsX,IAAK,UAAYo5B,EAAQ,IAAMz5C,EAC/B/P,SAAU,CAAC,CAACgB,KAAM,OAAQhD,MAAOwrD,EAAQ,IAAMz5C,IAEnD,CAyDA,SAAS,GAASkmC,EAAOwT,GACvB,MAAMtvC,EAAO87B,EAAMiS,MAAMnoB,WAAWkW,EAAMjxC,MAAQ,GAElD,OACmB,IAAhBixC,EAAMjxC,OACLo2B,GAAkBjhB,IAClBghB,GAAmBhhB,OAEnBsvC,GAAkB,KAATtvC,EAEf,CC5NA,SAASuvC,GAAwB9wB,GAC/B/zB,KAAK9D,MACH,CAACC,KAAM,qBAAsBkkC,WAAY,GAAIn1B,MAAO,GAAI/P,SAAU,IAClE44B,EAEJ,CAMA,SAAS+wB,KACP9kD,KAAK4hC,QACP,CAMA,SAASmjB,GAAkChxB,GACzC,MAAM7oB,EAAQlL,KAAKqvC,SACbxlB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACrC6vB,EAAK1tB,KACZ0tB,EAAK3e,MAAQA,EACb2e,EAAKwW,WAAaD,GAChBpgC,KAAKk6B,eAAenG,IACpB1zB,aACJ,CAMA,SAAS2kD,GAAuBjxB,GAC9B/zB,KAAKlE,KAAKi4B,EACZ,CAMA,SAASkxB,GAAkBlxB,GACzB/zB,KAAK9D,MAAM,CAACC,KAAM,oBAAqBkkC,WAAY,GAAIn1B,MAAO,IAAK6oB,EACrE,CAMA,SAASmxB,KACPllD,KAAK4hC,QACP,CAMA,SAASujB,GAAuBpxB,GAC9B,MAAM7oB,EAAQlL,KAAKqvC,SACbxlB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACrC6vB,EAAK1tB,KACZ0tB,EAAK3e,MAAQA,EACb2e,EAAKwW,WAAaD,GAChBpgC,KAAKk6B,eAAenG,IACpB1zB,aACJ,CAMA,SAAS+kD,GAAiBrxB,GACxB/zB,KAAKlE,KAAKi4B,EACZ,CAMA,SAAS,GAAkBlK,EAAMxnB,EAAGyqB,EAAO9qB,GACzC,MAAMqjD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAK,MACzB,MAAMzpD,EAAOgxB,EAAM5wB,MAAM,qBACnBspD,EAAU14B,EAAM5wB,MAAM,aAW5B,OAVA/C,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK34B,EAAM44B,cAAc77B,GAAO,IACjCw7B,EAAQ5wB,UACXgB,OAAQt8B,EACRsgC,MAAO,OAGX+rB,IACA1pD,IACA3C,GAASksD,EAAQE,KAAK,KACfpsD,CACT,CAWA,SAAS6+C,GAAmBnuB,EAAMxnB,EAAGyqB,EAAO9qB,GAC1C,MAAMqjD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAK,MACzB,MAAMzpD,EAAOgxB,EAAM5wB,MAAM,sBACnBspD,EAAU14B,EAAM5wB,MAAM,SAkB5B,OAjBA/C,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK34B,EAAM44B,cAAc77B,GAAO,IACjCw7B,EAAQ5wB,UACXgB,OAAQt8B,EACRsgC,MAAO,OAGX+rB,IACArsD,GAASksD,EAAQE,KACf,MAAQ17B,EAAK1uB,UAAY0uB,EAAK1uB,SAASnB,OAAS,EAAI,IAAM,KAE5DqrD,EAAQpzB,MAAM,GACd94B,GAASksD,EAAQE,KACfz4B,EAAM64B,YAAY74B,EAAM84B,cAAc/7B,EAAMw7B,EAAQ5wB,WAAY6I,KAElExhC,IAEO3C,CACT,CAGA,SAASmkC,GAAIxT,EAAM3pB,EAAO0lD,GACxB,OAAc,IAAV1lD,EACK2pB,GAGD+7B,EAAQ,GAAK,QAAU/7B,CACjC,CAvLA,GAAkBg8B,KA+IlB,WACE,MAAO,GACT,ECzIA,MAAMC,GAAiC,CACrC,WACA,qBACA,iBACA,YACA,aACA,mBA4CF,SAASC,GAAmBjyB,GAC1B/zB,KAAK9D,MAAM,CAACC,KAAM,SAAUhB,SAAU,IAAK44B,EAC7C,CAMA,SAASkyB,GAAkBlyB,GACzB/zB,KAAKlE,KAAKi4B,EACZ,CAMA,SAASmyB,GAAar8B,EAAMxnB,EAAGyqB,EAAO9qB,GACpC,MAAMqjD,EAAUv4B,EAAMw4B,cAActjD,GAC9BlG,EAAOgxB,EAAM5wB,MAAM,iBACzB,IAAI/C,EAAQksD,EAAQE,KAAK,MAQzB,OAPApsD,GAAS2zB,EAAMq5B,kBAAkBt8B,EAAM,IAClCw7B,EAAQ5wB,UACXgB,OAAQt8B,EACRsgC,MAAO,MAETtgC,GAASksD,EAAQE,KAAK,MACtBzpD,IACO3C,CACT,CCqDA,SAASitD,GAAoBjtD,GAC3B,OAAOA,EAAMa,MACf,CAmOA,SAASqsD,GAAYltD,GACnB,MAAMmc,EAAwB,iBAAVnc,EAAqBA,EAAMm3C,YAAY,GAAK,EAEhE,OAAgB,KAATh7B,GAAkC,KAATA,EAC5B,GACS,KAATA,GAAkC,MAATA,EACvB,IACS,KAATA,GAAkC,MAATA,EACvB,IACA,CACV,CC3WA,SAAS,GAAIwU,EAAMznB,EAAGwjD,GACpB,MAAO,KAAOA,EAAQ,GAAK,KAAO/7B,CACpC,CCRA,SAASw8B,GAAYn7B,EAAO9f,EAAMk7C,GAKhC,GAJoB,iBAATl7C,IACTA,EAAO,CAACA,KAGLA,GAAwB,IAAhBA,EAAKrR,OAChB,OAAOusD,EAGT,IAAIpmD,GAAS,EAEb,OAASA,EAAQkL,EAAKrR,QACpB,GAAImxB,EAAMhpB,SAASkJ,EAAKlL,IACtB,OAAO,EAIX,OAAO,CACT,CCzBO,SAAS,GAAUkC,EAAGmkD,EAAI15B,EAAO9qB,GACtC,IAAI7B,GAAS,EAEb,OAASA,EAAQ2sB,EAAM25B,OAAOzsD,QAG5B,GACoC,OAAlC8yB,EAAM25B,OAAOtmD,GAAOqiD,YDbKr3B,ECcV2B,EAAM3B,MDdWrZ,ECcJgb,EAAM25B,OAAOtmD,GDZ3CmmD,GAAYn7B,EAAOrZ,EAAQyxC,aAAa,KACvC+C,GAAYn7B,EAAOrZ,EAAQ0xC,gBAAgB,ICa1C,MAAO,QAAQhkD,KAAKwC,EAAKyzB,QAAU,GAAK,IDhBvC,IAAwBtK,EAAOrZ,ECoBpC,MAAO,MACT,CC4CA,SAAS,GAAIgY,EAAMznB,EAAGwjD,GACpB,OAAQA,EAAQ,GAAK,QAAU/7B,CACjC,CCpEO,SAAS48B,GAAW55B,GACzB,MAAMoR,EAASpR,EAAM/zB,QAAQ4tD,OAAS,IAEtC,GAAe,MAAXzoB,GAA6B,MAAXA,EACpB,MAAM,IAAI9T,MACR,gCACE8T,EACA,gDAIN,OAAOA,CACT,CCCO,SAAS,GAASrU,EAAMxnB,EAAGyqB,EAAO9qB,GACvC,MAAMk8B,ECdD,SAAuBpR,GAC5B,MAAMoR,EAASpR,EAAM/zB,QAAQsyC,UAAY,IAEzC,GAAe,MAAXnN,GAA6B,MAAXA,EACpB,MAAM,IAAI9T,MACR,mCACE8T,EACA,kDAIN,OAAOA,CACT,CDEiB0oB,CAAc95B,GACvBhxB,EAAOgxB,EAAM5wB,MAAM,YACnBmpD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAKrnB,GAUzB,OATA/kC,GAASksD,EAAQE,KACfz4B,EAAMq5B,kBAAkBt8B,EAAM,CAC5B4L,OAAQt8B,EACRsgC,MAAOyE,KACJmnB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAKrnB,GACtBpiC,IACO3C,CACT,CPNA+sD,GAAaJ,KAwEb,WACE,MAAO,GACT,EOhGA,GAASA,KAoCT,SAAsBzjD,EAAGmkD,EAAI15B,GAC3B,OAAOA,EAAM/zB,QAAQsyC,UAAY,GACnC,EEkBO,MA0EM,GAWX,SAKY7rC,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,GAAoB,iBAATA,EACT,OAAOnH,MAAMF,QAAQqH,GAe7B,SAAoB20C,GAElB,MAAMhzC,EAAS,GACf,IAAIhB,GAAS,EAEb,OAASA,EAAQg0C,EAAMn6C,QACrBmH,EAAOhB,GAAS,GAAQg0C,EAAMh0C,IAGhC,OAAO,GAAYszC,GAMnB,SAASA,KAAO9hB,GACd,IAAIxxB,GAAS,EAEb,OAASA,EAAQgB,EAAOnH,QACtB,GAAImH,EAAOhB,GAAOi0C,MAAMp0C,KAAM2xB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqC,CAAWnyB,GA+ChD,SAAsBiC,GACpB,MAAM6yC,EAAuD,EAE7D,OAAO,GAAYnf,GAMnB,SAASA,EAAItL,GACX,MAAM0qB,EAAsD,EAK5D,IAAI97C,EAEJ,IAAKA,KAAOgJ,EACV,GAAI8yC,EAAa97C,KAAS67C,EAAc77C,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwD,CAAa+G,GAG/D,GAAoB,iBAATA,EACT,OA0ER,SAAqBiC,GACnB,OAAO,GAAYtF,GAKnB,SAASA,EAAK0tB,GACZ,OAAOA,GAAQA,EAAK1tB,OAASsF,CAC/B,CACF,CAnFe,CAAYjC,GAGrB,MAAM,IAAI4qB,MAAM,+CAEpB,EAsFF,SAAS,GAAYsqB,GACnB,OAMA,SAAev7C,EAAOgH,EAAO6qB,GAC3B,OAAOgG,QACL,GAAe73B,IACbu7C,EAAap8C,KACX0H,KACA7G,EACiB,iBAAVgH,EAAqBA,OAAQ6pB,EACpCgB,QAAUhB,GAGlB,CACF,CAEA,SAAS,KACP,OAAO,CACT,CAMA,SAAS,GAAe7wB,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CCnEA,MAAM,GAAQ,GAKD,IAAW,EAKX,IAAO,EAsDb,SAAS,GAAa6yB,EAAMxsB,EAAMu1C,EAAS1iB,GAEhD,IAAI5wB,EAEgB,mBAATjC,GAA0C,mBAAZu1C,GACvC1iB,EAAU0iB,EAEVA,EAAUv1C,GAGViC,EAAQjC,EAGV,MAAMkL,EAAK,GAAQjJ,GACbsS,EAAOse,GAAW,EAAI,GAS5B,SAAS2iB,EAAQnrB,EAAM1pB,EAAO80C,GAC5B,MAAM97C,EACJ0wB,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAG7C,GAA0B,iBAAf1wB,EAAMgD,KAAmB,CAClC,MAAMnD,EAEqB,iBAAlBG,EAAMu0B,QACTv0B,EAAMu0B,QAEc,iBAAfv0B,EAAMH,KACXG,EAAMH,UACNgxB,EAENryB,OAAOK,eAAek9C,EAAO,OAAQ,CACnC/7C,MACE,SAAiB0wB,EAAK1tB,MAAQnD,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOk8C,EAEP,SAASA,IAEP,IAEIC,EAEAtxB,EAEAuxB,EANAnvB,EAAS,GAQb,KAAKzmB,GAAQkL,EAAGmf,EAAM1pB,EAAO80C,EAAQA,EAAQj7C,OAAS,SAAMgwB,MAE1D/D,EA0CR,SAAkB9sB,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CAAC,GAAUA,GAGpB,OAAOA,QAAwC,GAAQ,CAACA,EAC1D,CApDiB,CAAS47C,EAAQlrB,EAAMorB,IAE5BhvB,EAAO,KAAO,IAChB,OAAOA,EAIX,GAAI,aAAc4D,GAAQA,EAAK1uB,SAAU,CACvC,MAAMm6C,EAA0C,EAEhD,GAAIA,EAAan6C,UArHL,SAqHiB8qB,EAAO,GAIlC,IAHApC,GAAUwO,EAAUijB,EAAan6C,SAASnB,QAAU,GAAK+Z,EACzDqhC,EAAeH,EAAQ3iB,OAAOgjB,GAEvBzxB,GAAU,GAAKA,EAASyxB,EAAan6C,SAASnB,QAAQ,CAC3D,MAAMk0B,EAAQonB,EAAan6C,SAAS0oB,GAIpC,GAFAsxB,EAAYH,EAAQ9mB,EAAOrK,EAAQuxB,EAAvBJ,GAERG,EAAU,KAAO,GACnB,OAAOA,EAGTtxB,EAC0B,iBAAjBsxB,EAAU,GAAkBA,EAAU,GAAKtxB,EAAS9P,CAC/D,CAEJ,CAEA,OAAOkS,CACT,CACF,CAzEA+uB,CAAQhpB,OAAMhC,EAAW,GAAzBgrB,EA0EF,CC7WA,MAAM,GAAe,CAAC,EAef,SAAS,GAAS77C,EAAOJ,GAC9B,MAAM82B,EAAW92B,GAAW,GAQ5B,OAAO,GAAII,EAN2B,kBAA7B02B,EAASyB,iBACZzB,EAASyB,gBAGmB,kBAAzBzB,EAAS0B,aAA4B1B,EAAS0B,YAGzD,CAcA,SAAS,GAAIp4B,EAAOm4B,EAAiBC,GACnC,GAqDF,SAAcp4B,GACZ,OAAO63B,QAAQ73B,GAA0B,iBAAVA,EACjC,CAvDM,CAAKA,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMgD,MAAoBo1B,EAAmBp4B,EAAMA,MAAX,GAGjD,GAAIm4B,GAAmB,QAASn4B,GAASA,EAAMoO,IAC7C,OAAOpO,EAAMoO,IAGf,GAAI,aAAcpO,EAChB,OAAO,GAAIA,EAAMgC,SAAUm2B,EAAiBC,EAEhD,CAEA,OAAIl5B,MAAMF,QAAQgB,GACT,GAAIA,EAAOm4B,EAAiBC,GAG9B,EACT,CAcA,SAAS,GAAI7vB,EAAQ4vB,EAAiBC,GAEpC,MAAMtL,EAAS,GACf,IAAI9lB,GAAS,EAEb,OAASA,EAAQuB,EAAO1H,QACtBisB,EAAO9lB,GAAS,GAAIuB,EAAOvB,GAAQmxB,EAAiBC,GAGtD,OAAOtL,EAAO6J,KAAK,GACrB,CClFO,SAAS+2B,GAAsBh9B,EAAMiD,GAC1C,IAAIg6B,GAAmB,EAcvB,OC0PK,SAAe96B,EAAM2sB,EAAeC,EAAkBC,GAE3D,IAAIxmB,EAEA7yB,EAEAu1C,EAGuB,mBAAlB4D,GACqB,mBAArBC,GAEPp5C,OAAOwqB,EACP+qB,EAAU4D,EACVtmB,EAAUumB,IAGVp5C,EAAOm5C,EAEP5D,EAAU6D,EACVvmB,EAAUwmB,GAGZ,GAAa7sB,EAAMxsB,GAMnB,SAAkBqqB,EAAMorB,GACtB,MAAMjqB,EAASiqB,EAAQA,EAAQj7C,OAAS,GAClCmG,EAAQ6qB,EAASA,EAAO7vB,SAAS4vB,QAAQlB,QAAQG,EACvD,OAAO+qB,EAAQlrB,EAAM1pB,EAAO6qB,EAC9B,GAVmCqH,EAWrC,CDtSE,CAAMxI,GAAM,SAAUA,GACpB,GACG,UAAWA,GAAQ,WAAWrqB,KAAKqqB,EAAK1wB,QAC3B,UAAd0wB,EAAK1tB,KAGL,OADA2qD,GAAmB,EACZ,EAEX,IAEO91B,UACHnH,EAAKumB,OAASvmB,EAAKumB,MAAQ,IAC3B,GAASvmB,KACRiD,EAAM/zB,QAAQguD,QAAUD,GAE/B,CEvBO,SAAS,GAAKj9B,GACnB,OAAOA,EAAK1wB,OAAS,EACvB,CCMO,SAAS,GAAM0wB,EAAMxnB,EAAGyqB,EAAO9qB,GACpC,MAAM2kD,EAAQD,GAAW55B,GACnB2oB,EAAmB,MAAVkR,EAAgB,QAAU,aACnC7qD,EAAOgxB,EAAM5wB,MAAM,SACzB,IAAIspD,EAAU14B,EAAM5wB,MAAM,SAC1B,MAAMmpD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAK,MAmDzB,OAlDApsD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAKtiB,IAAK,CAACkuB,OAAQt8B,EAAOsgC,MAAO,OAAQ4rB,EAAQ5wB,aAE9Dt7B,GAASksD,EAAQE,KAAK,MAEtBC,KAII37B,EAAK0B,KAAO1B,EAAK5V,OAEnB,eAAezU,KAAKqqB,EAAK0B,MAEzBi6B,EAAU14B,EAAM5wB,MAAM,sBACtB/C,GAASksD,EAAQE,KAAK,KACtBpsD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0B,IAAK,CAACkK,OAAQt8B,EAAOsgC,MAAO,OAAQ4rB,EAAQ5wB,aAE9Dt7B,GAASksD,EAAQE,KAAK,OAGtBC,EAAU14B,EAAM5wB,MAAM,kBACtB/C,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0B,IAAK,CACnBkK,OAAQt8B,EACRsgC,MAAO5P,EAAK5V,MAAQ,IAAM,OACvBoxC,EAAQ5wB,cAKjB+wB,IAEI37B,EAAK5V,QACPuxC,EAAU14B,EAAM5wB,MAAM,QAAQu5C,KAC9Bt8C,GAASksD,EAAQE,KAAK,IAAMoB,GAC5BxtD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK5V,MAAO,CACrBwhB,OAAQt8B,EACRsgC,MAAOktB,KACJtB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAKoB,GACtBnB,KAGFrsD,GAASksD,EAAQE,KAAK,KACtBzpD,IAEO3C,CACT,CC5DO,SAAS,GAAe0wB,EAAMxnB,EAAGyqB,EAAO9qB,GAC7C,MAAM7F,EAAO0tB,EAAK6mB,cACZ50C,EAAOgxB,EAAM5wB,MAAM,kBACzB,IAAIspD,EAAU14B,EAAM5wB,MAAM,SAC1B,MAAMmpD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAK,MACzB,MAAMh+C,EAAMulB,EAAM24B,KAAK57B,EAAKtiB,IAAK,CAC/BkuB,OAAQt8B,EACRsgC,MAAO,OACJ4rB,EAAQ5wB,YAEbt7B,GAASksD,EAAQE,KAAKh+C,EAAM,MAE5Bi+C,IAEA,MAAMr6B,EAAQ2B,EAAM3B,MACpB2B,EAAM3B,MAAQ,GACdq6B,EAAU14B,EAAM5wB,MAAM,aAKtB,MAAM+vC,EAAYnf,EAAM24B,KAAK34B,EAAM44B,cAAc77B,GAAO,CACtD4L,OAAQt8B,EACRsgC,MAAO,OACJ4rB,EAAQ5wB,YAeb,OAbA+wB,IACA14B,EAAM3B,MAAQA,EACdrvB,IAEa,SAATK,GAAoBoL,GAAOA,IAAQ0kC,EAEnB,aAAT9vC,EAEThD,EAAQA,EAAMmJ,MAAM,GAAI,GAExBnJ,GAASksD,EAAQE,KAAK,KALtBpsD,GAASksD,EAAQE,KAAKtZ,EAAY,KAQ7B9yC,CACT,CC3CO,SAAS,GAAW0wB,EAAMxnB,EAAGyqB,GAClC,IAAI3zB,EAAQ0wB,EAAK1wB,OAAS,GACtBglC,EAAW,IACXh+B,GAAS,EAKb,KAAO,IAAIoyC,OAAO,WAAapU,EAAW,YAAY3+B,KAAKrG,IACzDglC,GAAY,IAmBd,IAbE,WAAW3+B,KAAKrG,KACd,WAAWqG,KAAKrG,IAAU,WAAWqG,KAAKrG,IAAW,QAAQqG,KAAKrG,MAEpEA,EAAQ,IAAMA,EAAQ,OAUfgH,EAAQ2sB,EAAM25B,OAAOzsD,QAAQ,CACpC,MAAM8X,EAAUgb,EAAM25B,OAAOtmD,GACvBquB,EAAa1B,EAAMk6B,eAAel1C,GAExC,IAAIs/B,EAKJ,GAAKt/B,EAAQ6oB,QAEb,KAAQyW,EAAQ5iB,EAAWgjB,KAAKr4C,IAAS,CACvC,IAAIqE,EAAW4zC,EAAMjxC,MAIY,KAA/BhH,EAAM+hC,WAAW19B,IACkB,KAAnCrE,EAAM+hC,WAAW19B,EAAW,IAE5BA,IAGFrE,EAAQA,EAAMmJ,MAAM,EAAG9E,GAAY,IAAMrE,EAAMmJ,MAAM8uC,EAAMjxC,MAAQ,EACrE,CACF,CAEA,OAAOg+B,EAAWhlC,EAAQglC,CAC5B,CCzDO,SAAS8oB,GAAqBp9B,EAAMiD,GACzC,MAAM2S,EAAM,GAAS5V,GAErB,OAAOmH,SACJlE,EAAM/zB,QAAQmuD,cAEbr9B,EAAK0B,MAEJ1B,EAAK5V,OAEN4V,EAAK1uB,UACoB,IAAzB0uB,EAAK1uB,SAASnB,QACY,SAA1B6vB,EAAK1uB,SAAS,GAAGgB,OAEhBsjC,IAAQ5V,EAAK0B,KAAO,UAAYkU,IAAQ5V,EAAK0B,MAE9C,oBAAoB/rB,KAAKqqB,EAAK0B,OAG7B,iBAAiB/rB,KAAKqqB,EAAK0B,KAElC,CCbO,SAAS,GAAK1B,EAAMxnB,EAAGyqB,EAAO9qB,GACnC,MAAM2kD,EAAQD,GAAW55B,GACnB2oB,EAAmB,MAAVkR,EAAgB,QAAU,aACnCtB,EAAUv4B,EAAMw4B,cAActjD,GAEpC,IAAIlG,EAEA0pD,EAEJ,GAAIyB,GAAqBp9B,EAAMiD,GAAQ,CAErC,MAAM3B,EAAQ2B,EAAM3B,MACpB2B,EAAM3B,MAAQ,GACdrvB,EAAOgxB,EAAM5wB,MAAM,YACnB,IAAI/C,EAAQksD,EAAQE,KAAK,KAWzB,OAVApsD,GAASksD,EAAQE,KACfz4B,EAAMq5B,kBAAkBt8B,EAAM,CAC5B4L,OAAQt8B,EACRsgC,MAAO,OACJ4rB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAK,KACtBzpD,IACAgxB,EAAM3B,MAAQA,EACPhyB,CACT,CAEA2C,EAAOgxB,EAAM5wB,MAAM,QACnBspD,EAAU14B,EAAM5wB,MAAM,SACtB,IAAI/C,EAAQksD,EAAQE,KAAK,KAsDzB,OArDApsD,GAASksD,EAAQE,KACfz4B,EAAMq5B,kBAAkBt8B,EAAM,CAC5B4L,OAAQt8B,EACRsgC,MAAO,QACJ4rB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAK,MACtBC,KAII37B,EAAK0B,KAAO1B,EAAK5V,OAEnB,eAAezU,KAAKqqB,EAAK0B,MAEzBi6B,EAAU14B,EAAM5wB,MAAM,sBACtB/C,GAASksD,EAAQE,KAAK,KACtBpsD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0B,IAAK,CAACkK,OAAQt8B,EAAOsgC,MAAO,OAAQ4rB,EAAQ5wB,aAE9Dt7B,GAASksD,EAAQE,KAAK,OAGtBC,EAAU14B,EAAM5wB,MAAM,kBACtB/C,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0B,IAAK,CACnBkK,OAAQt8B,EACRsgC,MAAO5P,EAAK5V,MAAQ,IAAM,OACvBoxC,EAAQ5wB,cAKjB+wB,IAEI37B,EAAK5V,QACPuxC,EAAU14B,EAAM5wB,MAAM,QAAQu5C,KAC9Bt8C,GAASksD,EAAQE,KAAK,IAAMoB,GAC5BxtD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK5V,MAAO,CACrBwhB,OAAQt8B,EACRsgC,MAAOktB,KACJtB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAKoB,GACtBnB,KAGFrsD,GAASksD,EAAQE,KAAK,KAEtBzpD,IACO3C,CACT,CCzFO,SAAS,GAAc0wB,EAAMxnB,EAAGyqB,EAAO9qB,GAC5C,MAAM7F,EAAO0tB,EAAK6mB,cACZ50C,EAAOgxB,EAAM5wB,MAAM,iBACzB,IAAIspD,EAAU14B,EAAM5wB,MAAM,SAC1B,MAAMmpD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAK,KACzB,MAAMluC,EAAOyV,EAAMq5B,kBAAkBt8B,EAAM,CACzC4L,OAAQt8B,EACRsgC,MAAO,OACJ4rB,EAAQ5wB,YAEbt7B,GAASksD,EAAQE,KAAKluC,EAAO,MAE7BmuC,IAEA,MAAMr6B,EAAQ2B,EAAM3B,MACpB2B,EAAM3B,MAAQ,GACdq6B,EAAU14B,EAAM5wB,MAAM,aAKtB,MAAM+vC,EAAYnf,EAAM24B,KAAK34B,EAAM44B,cAAc77B,GAAO,CACtD4L,OAAQt8B,EACRsgC,MAAO,OACJ4rB,EAAQ5wB,YAeb,OAbA+wB,IACA14B,EAAM3B,MAAQA,EACdrvB,IAEa,SAATK,GAAoBkb,GAAQA,IAAS40B,EAErB,aAAT9vC,EAEThD,EAAQA,EAAMmJ,MAAM,GAAI,GAExBnJ,GAASksD,EAAQE,KAAK,KALtBpsD,GAASksD,EAAQE,KAAKtZ,EAAY,KAQ7B9yC,CACT,CChDO,SAASguD,GAAYr6B,GAC1B,MAAMoR,EAASpR,EAAM/zB,QAAQquD,QAAU,IAEvC,GAAe,MAAXlpB,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAI9T,MACR,gCACE8T,EACA,qDAIN,OAAOA,CACT,CCZO,SAASmpB,GAAUv6B,GACxB,MAAMoR,EAASpR,EAAM/zB,QAAQuuD,MAAQ,IAErC,GAAe,MAAXppB,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAI9T,MACR,gCACE8T,EACA,mDAIN,OAAOA,CACT,CRjBA,GAAK4nB,KAaL,WACE,MAAO,GACT,ECVA,GAAMA,KAwEN,WACE,MAAO,GACT,EC5EA,GAAeA,KAuDf,WACE,MAAO,GACT,EC1DA,GAAWA,KAoEX,WACE,MAAO,GACT,EEjEA,GAAKA,KAsGL,SAAkBj8B,EAAMxnB,EAAGyqB,GACzB,OAAOm6B,GAAqBp9B,EAAMiD,GAAS,IAAM,GACnD,EC5GA,GAAcg5B,KAuDd,WACE,MAAO,GACT,EGCO,MA0EM,GAWX,SAKYtmD,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,GAAoB,iBAATA,EACT,OAAOnH,MAAMF,QAAQqH,GAe7B,SAAoB20C,GAElB,MAAMhzC,EAAS,GACf,IAAIhB,GAAS,EAEb,OAASA,EAAQg0C,EAAMn6C,QACrBmH,EAAOhB,GAAS,GAAQg0C,EAAMh0C,IAGhC,OAAO,GAAYszC,GAMnB,SAASA,KAAO9hB,GACd,IAAIxxB,GAAS,EAEb,OAASA,EAAQgB,EAAOnH,QACtB,GAAImH,EAAOhB,GAAOi0C,MAAMp0C,KAAM2xB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqC,CAAWnyB,GA+ChD,SAAsBiC,GACpB,MAAM6yC,EAAuD,EAE7D,OAAO,GAAYnf,GAMnB,SAASA,EAAItL,GACX,MAAM0qB,EAAsD,EAK5D,IAAI97C,EAEJ,IAAKA,KAAOgJ,EACV,GAAI8yC,EAAa97C,KAAS67C,EAAc77C,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwD,CAAa+G,GAG/D,GAAoB,iBAATA,EACT,OA0ER,SAAqBiC,GACnB,OAAO,GAAYtF,GAKnB,SAASA,EAAK0tB,GACZ,OAAOA,GAAQA,EAAK1tB,OAASsF,CAC/B,CACF,CAnFe,CAAYjC,GAGrB,MAAM,IAAI4qB,MAAM,+CAEpB,EAsFF,SAAS,GAAYsqB,GACnB,OAMA,SAAev7C,EAAOgH,EAAO6qB,GAC3B,OAAOgG,QACL,GAAe73B,IACbu7C,EAAap8C,KACX0H,KACA7G,EACiB,iBAAVgH,EAAqBA,OAAQ6pB,EACpCgB,QAAUhB,GAGlB,CACF,CAEA,SAAS,KACP,OAAO,CACT,CAMA,SAAS,GAAe7wB,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CChRO,MAAMouD,GAGT,GAAQ,CACN,QACA,SACA,WAEA,WACA,oBACA,QACA,iBACA,aAEA,aACA,OACA,gBAEA,oBAEA,oBACA,SACA,OAEA,kBCpBC,SAAS,GAAO19B,EAAMxnB,EAAGyqB,EAAO9qB,GACrC,MAAMk8B,ECdD,SAAqBpR,GAC1B,MAAMoR,EAASpR,EAAM/zB,QAAQwzC,QAAU,IAEvC,GAAe,MAAXrO,GAA6B,MAAXA,EACpB,MAAM,IAAI9T,MACR,iCACE8T,EACA,gDAIN,OAAOA,CACT,CDEiBspB,CAAY16B,GACrBhxB,EAAOgxB,EAAM5wB,MAAM,UACnBmpD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAKrnB,EAASA,GAUlC,OATA/kC,GAASksD,EAAQE,KACfz4B,EAAMq5B,kBAAkBt8B,EAAM,CAC5B4L,OAAQt8B,EACRsgC,MAAOyE,KACJmnB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAKrnB,EAASA,GAC/BpiC,IACO3C,CACT,CA5BA,GAAO2sD,KAoCP,SAAoBzjD,EAAGmkD,EAAI15B,GACzB,OAAOA,EAAM/zB,QAAQwzC,QAAU,GACjC,EExBO,MAAM+L,GAAS,CACpBtC,WzBTK,SAAoBnsB,EAAMxnB,EAAGyqB,EAAO9qB,GACzC,MAAMlG,EAAOgxB,EAAM5wB,MAAM,cACnBmpD,EAAUv4B,EAAMw4B,cAActjD,GACpCqjD,EAAQE,KAAK,MACbF,EAAQpzB,MAAM,GACd,MAAM94B,EAAQ2zB,EAAM64B,YAClB74B,EAAM84B,cAAc/7B,EAAMw7B,EAAQ5wB,WAClC,IAGF,OADA34B,IACO3C,CACT,EyBDEg9C,MAAO,GACP7gC,KtBPK,SAAcuU,EAAMxnB,EAAGyqB,EAAO9qB,GACnC,MAAMk8B,EuBXD,SAAoBpR,GACzB,MAAMoR,EAASpR,EAAM/zB,QAAQ0uD,OAAS,IAEtC,GAAe,MAAXvpB,GAA6B,MAAXA,EACpB,MAAM,IAAI9T,MACR,+BACE8T,EACA,kDAIN,OAAOA,CACT,CvBDiBwpB,CAAW56B,GACpB2S,EAAM5V,EAAK1wB,OAAS,GACpBs8C,EAAoB,MAAXvX,EAAiB,cAAgB,QAEhD,GwBdK,SAA8BrU,EAAMiD,GACzC,OAAOkE,SACoB,IAAzBlE,EAAM/zB,QAAQ4uD,QACZ99B,EAAK1wB,QAEJ0wB,EAAK1e,MAEN,WAAW3L,KAAKqqB,EAAK1wB,SAEpB,0CAA0CqG,KAAKqqB,EAAK1wB,OAE3D,CxBGMyuD,CAAqB/9B,EAAMiD,GAAQ,CACrC,MAAMhxB,EAAOgxB,EAAM5wB,MAAM,gBACnB/C,EAAQ2zB,EAAM64B,YAAYlmB,EAAK,IAErC,OADA3jC,IACO3C,CACT,CAEA,MAAMksD,EAAUv4B,EAAMw4B,cAActjD,GAC9Bm8B,EAAWD,EAAO2pB,OAAOr1B,KAAK9mB,IyBtB/B,SAAuBvS,EAAO2uD,GACnC,MAAMh9B,EAASyF,OAAOp3B,GACtB,IAAIgH,EAAQ2qB,EAAOC,QAAQ+8B,GACvBz8B,EAAWlrB,EACXkvB,EAAQ,EACR3jB,EAAM,EAEV,GAAyB,iBAAdo8C,EACT,MAAM,IAAI57B,UAAU,sBAGtB,MAAkB,IAAX/rB,GACDA,IAAUkrB,IACNgE,EAAQ3jB,IACZA,EAAM2jB,GAGRA,EAAQ,EAGVhE,EAAWlrB,EAAQ2nD,EAAU9tD,OAC7BmG,EAAQ2qB,EAAOC,QAAQ+8B,EAAWz8B,GAGpC,OAAO3f,CACT,CzBH0Cq8C,CAActoB,EAAKvB,GAAU,EAAG,IAClEpiC,EAAOgxB,EAAM5wB,MAAM,cACzB,IAAI/C,EAAQksD,EAAQE,KAAKpnB,GAEzB,GAAItU,EAAK1e,KAAM,CACb,MAAMq6C,EAAU14B,EAAM5wB,MAAM,iBAAiBu5C,KAC7Ct8C,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK1e,KAAM,CACpBsqB,OAAQt8B,EACRsgC,MAAO,IACPuuB,OAAQ,CAAC,QACN3C,EAAQ5wB,aAGf+wB,GACF,CAEA,GAAI37B,EAAK1e,MAAQ0e,EAAK0a,KAAM,CAC1B,MAAMihB,EAAU14B,EAAM5wB,MAAM,iBAAiBu5C,KAC7Ct8C,GAASksD,EAAQE,KAAK,KACtBpsD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0a,KAAM,CACpB9O,OAAQt8B,EACRsgC,MAAO,KACPuuB,OAAQ,CAAC,QACN3C,EAAQ5wB,aAGf+wB,GACF,CAUA,OARArsD,GAASksD,EAAQE,KAAK,MAElB9lB,IACFtmC,GAASksD,EAAQE,KAAK9lB,EAAM,OAG9BtmC,GAASksD,EAAQE,KAAKpnB,GACtBriC,IACO3C,CACT,EsB7CE0I,WIXK,SAAoBgoB,EAAMxnB,EAAGyqB,EAAO9qB,GACzC,MAAM2kD,EAAQD,GAAW55B,GACnB2oB,EAAmB,MAAVkR,EAAgB,QAAU,aACnC7qD,EAAOgxB,EAAM5wB,MAAM,cACzB,IAAIspD,EAAU14B,EAAM5wB,MAAM,SAC1B,MAAMmpD,EAAUv4B,EAAMw4B,cAActjD,GACpC,IAAI7I,EAAQksD,EAAQE,KAAK,KAsDzB,OArDApsD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK34B,EAAM44B,cAAc77B,GAAO,CACpC4L,OAAQt8B,EACRsgC,MAAO,OACJ4rB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAK,OAEtBC,KAIG37B,EAAK0B,KAEN,eAAe/rB,KAAKqqB,EAAK0B,MAEzBi6B,EAAU14B,EAAM5wB,MAAM,sBACtB/C,GAASksD,EAAQE,KAAK,KACtBpsD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0B,IAAK,CAACkK,OAAQt8B,EAAOsgC,MAAO,OAAQ4rB,EAAQ5wB,aAE9Dt7B,GAASksD,EAAQE,KAAK,OAGtBC,EAAU14B,EAAM5wB,MAAM,kBACtB/C,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK0B,IAAK,CACnBkK,OAAQt8B,EACRsgC,MAAO5P,EAAK5V,MAAQ,IAAM,QACvBoxC,EAAQ5wB,cAKjB+wB,IAEI37B,EAAK5V,QACPuxC,EAAU14B,EAAM5wB,MAAM,QAAQu5C,KAC9Bt8C,GAASksD,EAAQE,KAAK,IAAMoB,GAC5BxtD,GAASksD,EAAQE,KACfz4B,EAAM24B,KAAK57B,EAAK5V,MAAO,CACrBwhB,OAAQt8B,EACRsgC,MAAOktB,KACJtB,EAAQ5wB,aAGft7B,GAASksD,EAAQE,KAAKoB,GACtBnB,KAGF1pD,IAEO3C,CACT,EJjDEkyC,SAAQ,GACRC,UAAS,GACT/J,QKdK,SAAiB1X,EAAMxnB,EAAGyqB,EAAO9qB,GACtC,MAAMimD,EAAOz1B,KAAK9mB,IAAI8mB,KAAK1mB,IAAI,EAAG+d,EAAKumB,OAAS,GAAI,GAC9CiV,EAAUv4B,EAAMw4B,cAActjD,GAEpC,GAAI6kD,GAAsBh9B,EAAMiD,GAAQ,CACtC,MAAMhxB,EAAOgxB,EAAM5wB,MAAM,iBACnBspD,EAAU14B,EAAM5wB,MAAM,YACtB/C,EAAQ2zB,EAAMq5B,kBAAkBt8B,EAAM,IACvCw7B,EAAQ5wB,UACXgB,OAAQ,KACRgE,MAAO,OAKT,OAHA+rB,IACA1pD,IAGE3C,EACA,MACU,IAAT8uD,EAAa,IAAM,KAAKJ,OAEvB1uD,EAAMa,QAGHw4B,KAAK9mB,IAAIvS,EAAMqjD,YAAY,MAAOrjD,EAAMqjD,YAAY,OAAS,GAGtE,CAEA,MAAMre,EAAW,IAAI0pB,OAAOI,GACtBnsD,EAAOgxB,EAAM5wB,MAAM,cACnBspD,EAAU14B,EAAM5wB,MAAM,YAM5BmpD,EAAQE,KAAKpnB,EAAW,KAExB,IAAIhlC,EAAQ2zB,EAAMq5B,kBAAkBt8B,EAAM,CACxC4L,OAAQ,KACRgE,MAAO,QACJ4rB,EAAQ5wB,YAqBb,MAlBI,SAASj1B,KAAKrG,KAEhBA,EACE,MACAA,EAAM+hC,WAAW,GAAGnjC,SAAS,IAAI0xB,cACjC,IACAtwB,EAAMmJ,MAAM,IAGhBnJ,EAAQA,EAAQglC,EAAW,IAAMhlC,EAAQglC,EAErCrR,EAAM/zB,QAAQmvD,WAChB/uD,GAAS,IAAMglC,GAGjBqnB,IACA1pD,IAEO3C,CACT,ELhDEsN,KAAI,GACJilC,MAAK,GACLqL,eAAc,GACdE,WAAU,GACV/gC,KAAI,GACJghC,cAAa,GACb7rC,KMlBK,SAAcwe,EAAMmB,EAAQ8B,EAAO9qB,GACxC,MAAMlG,EAAOgxB,EAAM5wB,MAAM,QACnBisD,EAAgBr7B,EAAMq7B,cAE5B,IAAIf,EAASv9B,EAAKknB,QCdb,SAA4BjkB,GACjC,MAAMoR,EAASpR,EAAM/zB,QAAQqvD,eAAiB,IAE9C,GAAe,MAAXlqB,GAA6B,MAAXA,EACpB,MAAM,IAAI9T,MACR,gCACE8T,EACA,sDAIN,OAAOA,CACT,CDE8BmqB,CAAmBv7B,GAASq6B,GAAYr6B,GAEpE,MAAMw7B,EAAcz+B,EAAKknB,QACV,MAAXqW,EACE,IACA,IEjBD,SAA0Bt6B,GAC/B,MAAMs6B,EAASD,GAAYr6B,GACrBw7B,EAAcx7B,EAAM/zB,QAAQuvD,YAElC,IAAKA,EACH,MAAkB,MAAXlB,EAAiB,IAAM,IAGhC,GAAoB,MAAhBkB,GAAuC,MAAhBA,GAAuC,MAAhBA,EAChD,MAAM,IAAIl+B,MACR,gCACEk+B,EACA,0DAIN,GAAIA,IAAgBlB,EAClB,MAAM,IAAIh9B,MACR,uBACEg9B,EACA,0BACAkB,EACA,sBAIN,OAAOA,CACT,CFTMC,CAAiBz7B,GACrB,IAAI07B,KACFx9B,IAAU8B,EAAM27B,iBAAiBrB,IAAWt6B,EAAM27B,eAEpD,IAAK5+B,EAAKknB,QAAS,CACjB,MAAM2X,EAAgB7+B,EAAK1uB,SAAW0uB,EAAK1uB,SAAS,QAAK6uB,EAqCzD,GAzBc,MAAXo9B,GAA6B,MAAXA,IAEnBsB,GACEA,EAAcvtD,UAAautD,EAAcvtD,SAAS,IAEZ,SAAxC2xB,EAAM3B,MAAM2B,EAAM3B,MAAMnxB,OAAS,IACO,aAAxC8yB,EAAM3B,MAAM2B,EAAM3B,MAAMnxB,OAAS,IACO,SAAxC8yB,EAAM3B,MAAM2B,EAAM3B,MAAMnxB,OAAS,IACO,aAAxC8yB,EAAM3B,MAAM2B,EAAM3B,MAAMnxB,OAAS,IAEiB,IAAlD8yB,EAAM67B,WAAW77B,EAAM67B,WAAW3uD,OAAS,IACO,IAAlD8yB,EAAM67B,WAAW77B,EAAM67B,WAAW3uD,OAAS,IACO,IAAlD8yB,EAAM67B,WAAW77B,EAAM67B,WAAW3uD,OAAS,KAE3CwuD,GAAqB,GAWnBnB,GAAUv6B,KAAWs6B,GAAUsB,EAAe,CAChD,IAAIvoD,GAAS,EAEb,OAASA,EAAQ0pB,EAAK1uB,SAASnB,QAAQ,CACrC,MAAM44B,EAAO/I,EAAK1uB,SAASgF,GAE3B,GACEyyB,GACc,aAAdA,EAAKz2B,MACLy2B,EAAKz3B,UACLy3B,EAAKz3B,SAAS,IACY,kBAA1By3B,EAAKz3B,SAAS,GAAGgB,KACjB,CACAqsD,GAAqB,EACrB,KACF,CACF,CACF,CACF,CAEIA,IACFpB,EAASkB,GAGXx7B,EAAMq7B,cAAgBf,EACtB,MAAMjuD,EAAQ2zB,EAAM84B,cAAc/7B,EAAM7nB,GAIxC,OAHA8qB,EAAM27B,eAAiBrB,EACvBt6B,EAAMq7B,cAAgBA,EACtBrsD,IACO3C,CACT,EN/DEwyC,SSpBK,SAAkB9hB,EAAMmB,EAAQ8B,EAAO9qB,GAC5C,MAAM4mD,ECVD,SAA6B97B,GAClC,MAAM/vB,EAAQ+vB,EAAM/zB,QAAQ6vD,gBAAkB,MAE9C,GAAc,QAAV7rD,GAA6B,QAAVA,GAA6B,UAAVA,EACxC,MAAM,IAAIqtB,MACR,gCACErtB,EACA,qEAIN,OAAOA,CACT,CDFyB8rD,CAAoB/7B,GAC3C,IAAIs6B,EAASt6B,EAAMq7B,eAAiBhB,GAAYr6B,GAG5C9B,GAA0B,SAAhBA,EAAO7uB,MAAmB6uB,EAAO+lB,UAC7CqW,GAC2B,iBAAjBp8B,EAAOvwB,OAAsBuwB,EAAOvwB,OAAS,EACjDuwB,EAAOvwB,MACP,KACmC,IAAtCqyB,EAAM/zB,QAAQ+vD,oBACX,EACA99B,EAAO7vB,SAAS4vB,QAAQlB,IAC5Bu9B,GAGJ,IAAI7zC,EAAO6zC,EAAOptD,OAAS,GAGN,QAAnB4uD,GACoB,UAAnBA,IACG59B,GAA0B,SAAhBA,EAAO7uB,MAAmB6uB,EAAOgmB,QAAWnnB,EAAKmnB,WAE/Dz9B,EAA6B,EAAtBif,KAAKif,KAAKl+B,EAAO,IAG1B,MAAM8xC,EAAUv4B,EAAMw4B,cAActjD,GACpCqjD,EAAQE,KAAK6B,EAAS,IAAIS,OAAOt0C,EAAO6zC,EAAOptD,SAC/CqrD,EAAQpzB,MAAM1e,GACd,MAAMzX,EAAOgxB,EAAM5wB,MAAM,YACnB/C,EAAQ2zB,EAAM64B,YAClB74B,EAAM84B,cAAc/7B,EAAMw7B,EAAQ5wB,YAQpC,SAAa3K,EAAM3pB,EAAO0lD,GACxB,GAAI1lD,EACF,OAAQ0lD,EAAQ,GAAK,IAAIgC,OAAOt0C,IAASuW,EAG3C,OAAQ+7B,EAAQuB,EAASA,EAAS,IAAIS,OAAOt0C,EAAO6zC,EAAOptD,SAAW8vB,CACxE,IATA,OAFAhuB,IAEO3C,CAUT,ETzBEmoC,UWzBK,SAAmBzX,EAAMxnB,EAAGyqB,EAAO9qB,GACxC,MAAMlG,EAAOgxB,EAAM5wB,MAAM,aACnBspD,EAAU14B,EAAM5wB,MAAM,YACtB/C,EAAQ2zB,EAAMq5B,kBAAkBt8B,EAAM7nB,GAG5C,OAFAwjD,IACA1pD,IACO3C,CACT,EXmBEg2B,KYxBK,SAActF,EAAMxnB,EAAGyqB,EAAO9qB,GAMnC,OAJoB6nB,EAAK1uB,SAAS4tD,MAAK,SAAU1uD,GAC/C,OAAOktD,GAASltD,EAClB,IACyByyB,EAAMq5B,kBAAoBr5B,EAAM84B,eAC/CttD,KAAKw0B,EAAOjD,EAAM7nB,EAC9B,EZkBEuqC,OAAM,GACNl1B,Ka5BK,SAAcwS,EAAMxnB,EAAGyqB,EAAO9qB,GACnC,OAAO8qB,EAAM24B,KAAK57B,EAAK1wB,MAAO6I,EAChC,Eb2BEi8B,cc5BK,SAAuB57B,EAAGmkD,EAAI15B,GACnC,MAAM3zB,GACJkuD,GAAUv6B,IAAUA,EAAM/zB,QAAQiwD,WAAa,IAAM,KACrDnB,OCTG,SAA6B/6B,GAClC,MAAMm8B,EAAan8B,EAAM/zB,QAAQmwD,gBAAkB,EAEnD,GAAID,EAAa,EACf,MAAM,IAAI7+B,MACR,2CACE6+B,EACA,wDAIN,OAAOA,CACT,CDHWE,CAAoBr8B,IAE7B,OAAOA,EAAM/zB,QAAQiwD,WAAa7vD,EAAMmJ,MAAM,GAAI,GAAKnJ,CACzD,GE2CA,SAASiwD,GAAWr1B,GAClB,MAAMxf,EAAQwf,EAAMs1B,OAEpBrpD,KAAK9D,MACH,CACEC,KAAM,QACNoY,MAAOA,EAAM+oB,KAAI,SAAUjjC,GACzB,MAAa,SAANA,EAAe,KAAOA,CAC/B,IACAc,SAAU,IAEZ44B,GAEF/zB,KAAK2I,KAAK2gD,SAAU,CACtB,CAMA,SAASC,GAAUx1B,GACjB/zB,KAAKlE,KAAKi4B,GACV/zB,KAAK2I,KAAK2gD,aAAUt/B,CACtB,CAMA,SAASw/B,GAASz1B,GAChB/zB,KAAK9D,MAAM,CAACC,KAAM,WAAYhB,SAAU,IAAK44B,EAC/C,CAMA,SAAS,GAAKA,GACZ/zB,KAAKlE,KAAKi4B,EACZ,CAMA,SAAS01B,GAAU11B,GACjB/zB,KAAK9D,MAAM,CAACC,KAAM,YAAahB,SAAU,IAAK44B,EAChD,CAQA,SAAS21B,GAAa31B,GACpB,IAAI56B,EAAQ6G,KAAKqvC,SAEbrvC,KAAK2I,KAAK2gD,UACZnwD,EAAQA,EAAMwG,QAAQ,aAAcA,KAGtC,MAAMkqB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACrC6vB,EAAK1tB,KACZ0tB,EAAK1wB,MAAQA,EACb6G,KAAKlE,KAAKi4B,EACZ,CAOA,SAASp0B,GAAQ2pB,EAAI6H,GAEnB,MAAc,MAAPA,EAAaA,EAAK7H,CAC3B,CAWO,SAASqgC,GAAmB5wD,GACjC,MAAM82B,EAAW92B,GAAW,CAAC,EACvB6wD,EAAU/5B,EAASg6B,iBACnBC,EAAkBj6B,EAASk6B,eAC3BC,EAAen6B,EAASm6B,aACxBC,EAASL,EAAU,IAAM,IAE/B,MAAO,CACLnD,OAAQ,CACN,CAACjE,UAAW,KAAMe,YAAa,aAC/B,CAACf,UAAW,KAAMe,YAAa,aAG/B,CAAC5oB,SAAS,EAAM6nB,UAAW,IAAK/oB,MAAO,WAEvC,CAAC+oB,UAAW,IAAKe,YAAa,aAG9B,CAAC5oB,SAAS,EAAM6nB,UAAW,IAAK/oB,MAAO,KAMvC,CAACkB,SAAS,EAAM6nB,UAAW,IAAK/oB,MAAO,UAEzC0e,SAAU,CACRlB,WAgHJ,SAA6BptB,EAAMmB,EAAQ8B,GACzC,IAAI3zB,EAAQ,GAAgB89C,WAAWptB,EAAMmB,EAAQ8B,GAEjDA,EAAM3B,MAAMhpB,SAAS,eACvBhJ,EAAQA,EAAMwG,QAAQ,MAAO,SAG/B,OAAOxG,CACT,EAvHIk+C,MAUJ,SAAqBxtB,EAAMxnB,EAAGyqB,EAAO9qB,GACnC,OAAOkoD,EAwDT,SAA2BrgC,EAAMiD,EAAO9qB,GACtC,MAAM7G,EAAW0uB,EAAK1uB,SACtB,IAAIgF,GAAS,EAEb,MAAM8lB,EAAS,GACTu/B,EAAU14B,EAAM5wB,MAAM,SAE5B,OAASiE,EAAQhF,EAASnB,QACxBisB,EAAO9lB,GAASgqD,EAAqBhvD,EAASgF,GAAQ2sB,EAAO9qB,GAK/D,OAFAwjD,IAEOv/B,CACT,CAtEuBmkC,CAAkBvgC,EAAMiD,EAAO9qB,GAAO6nB,EAAKtV,MAClE,EAXIijC,UAAW6S,EACX5S,SAoBJ,SAAwB5tB,EAAMxnB,EAAGyqB,EAAO9qB,GACtC,MAAMsoD,EAAMH,EAAqBtgC,EAAMiD,EAAO9qB,GACxC7I,EAAQ+wD,EAAc,CAACI,IAE7B,OAAOnxD,EAAMmJ,MAAM,EAAGnJ,EAAM4xB,QAAQ,MACtC,IAMA,SAASs/B,EAAgBxgC,EAAMxnB,EAAGyqB,EAAO9qB,GACvC,MAAMlG,EAAOgxB,EAAM5wB,MAAM,aACnBspD,EAAU14B,EAAM5wB,MAAM,YACtB/C,EAAQ2zB,EAAMq5B,kBAAkBt8B,EAAM,IACvC7nB,EACHyzB,OAAQw0B,EACRxwB,MAAOwwB,IAIT,OAFAzE,IACA1pD,IACO3C,CACT,CAMA,SAAS+wD,EAAcK,EAAQh2C,GAC7B,O1C7DG,SAAuB8iC,EAAOt+C,GACnC,MAAM82B,EAAW92B,GAAW,CAAC,EAEvBwb,GAASsb,EAAStb,OAAS,IAAI+d,SAC/B03B,EAAen6B,EAASm6B,cAAgB5D,GAExCoE,EAAa,GAEbC,EAAa,GAEbC,EAAa,GAEbC,EAAsB,GAC5B,IAAIC,EAAkB,EAClBC,GAAY,EAIhB,OAASA,EAAWxT,EAAMr9C,QAAQ,CAEhC,MAAMswD,EAAM,GAEN92C,EAAQ,GACd,IAAIs3C,GAAe,EAMnB,IAJIzT,EAAMwT,GAAU7wD,OAAS4wD,IAC3BA,EAAkBvT,EAAMwT,GAAU7wD,UAG3B8wD,EAAczT,EAAMwT,GAAU7wD,QAAQ,CAC7C,MAAM49C,EA8KHz+C,OADUA,EA7KUk+C,EAAMwT,GAAUC,IA8KI,GAAKv6B,OAAOp3B,GA5KvD,IAAiC,IAA7B02B,EAASi6B,gBAA2B,CACtC,MAAMv2C,EAAOy2C,EAAapS,GAC1BpkC,EAAMs3C,GAAev3C,QAGkByW,IAArC2gC,EAAoBG,IACpBv3C,EAAOo3C,EAAoBG,MAE3BH,EAAoBG,GAAev3C,EAEvC,CAEA+2C,EAAI38B,KAAKiqB,EACX,CAEA6S,EAAWI,GAAYP,EACvBI,EAAWG,GAAYr3C,CACzB,CA0JF,IAAmBra,EAvJjB,IAAI2xD,GAAe,EAEnB,GAAqB,iBAAVv2C,GAAsB,WAAYA,EAC3C,OAASu2C,EAAcF,GACrBJ,EAAWM,GAAezE,GAAY9xC,EAAMu2C,QAEzC,CACL,MAAMx1C,EAAO+wC,GAAY9xC,GAEzB,OAASu2C,EAAcF,GACrBJ,EAAWM,GAAex1C,CAE9B,CAGAw1C,GAAe,EAEf,MAAMR,EAAM,GAEN92C,EAAQ,GAEd,OAASs3C,EAAcF,GAAiB,CACtC,MAAMt1C,EAAOk1C,EAAWM,GACxB,IAAIr1B,EAAS,GACTgE,EAAQ,GAEC,KAATnkB,GACFmgB,EAAS,IACTgE,EAAQ,KACU,MAATnkB,EACTmgB,EAAS,IACS,MAATngB,IACTmkB,EAAQ,KAIV,IAAIlmB,GAC2B,IAA7Bsc,EAASi6B,gBACL,EACAt3B,KAAK9mB,IACH,EACAi/C,EAAoBG,GAAer1B,EAAOz7B,OAASy/B,EAAMz/B,QAGjE,MAAM49C,EAAOniB,EAAS,IAAIoyB,OAAOt0C,GAAQkmB,GAER,IAA7B5J,EAASi6B,kBACXv2C,EAAOkiB,EAAOz7B,OAASuZ,EAAOkmB,EAAMz/B,OAEhCuZ,EAAOo3C,EAAoBG,KAC7BH,EAAoBG,GAAev3C,GAGrCC,EAAMs3C,GAAev3C,GAGvB+2C,EAAIQ,GAAelT,CACrB,CAGA6S,EAAWj5B,OAAO,EAAG,EAAG84B,GACxBI,EAAWl5B,OAAO,EAAG,EAAGhe,GAExBq3C,GAAY,EAEZ,MAAM/U,EAAQ,GAEd,OAAS+U,EAAWJ,EAAWzwD,QAAQ,CACrC,MAAMswD,EAAMG,EAAWI,GACjBr3C,EAAQk3C,EAAWG,GACzBC,GAAe,EAEf,MAAMhhC,EAAO,GAEb,OAASghC,EAAcF,GAAiB,CACtC,MAAMhT,EAAO0S,EAAIQ,IAAgB,GACjC,IAAIr1B,EAAS,GACTgE,EAAQ,GAEZ,IAAiC,IAA7B5J,EAASi6B,gBAA2B,CACtC,MAAMv2C,EACJo3C,EAAoBG,IAAgBt3C,EAAMs3C,IAAgB,GACtDx1C,EAAOk1C,EAAWM,GAEX,MAATx1C,EACFmgB,EAAS,IAAIoyB,OAAOt0C,GACF,KAAT+B,EACL/B,EAAO,GACTkiB,EAAS,IAAIoyB,OAAOt0C,EAAO,EAAI,IAC/BkmB,EAAQ,IAAIouB,OAAOt0C,EAAO,EAAI,MAE9BkiB,EAAS,IAAIoyB,OAAOt0C,EAAO,GAC3BkmB,EAAQhE,GAGVgE,EAAQ,IAAIouB,OAAOt0C,EAEvB,EAEgC,IAA5Bsc,EAASk7B,gBAA6BD,GACxChhC,EAAK6D,KAAK,MAIW,IAArBkC,EAAS+5B,UAGsB,IAA7B/5B,EAASi6B,iBAAsC,KAATlS,IACX,IAA5B/nB,EAASk7B,iBAA4BD,GAEtChhC,EAAK6D,KAAK,MAGqB,IAA7BkC,EAASi6B,iBACXhgC,EAAK6D,KAAK8H,GAGZ3L,EAAK6D,KAAKiqB,IAEuB,IAA7B/nB,EAASi6B,iBACXhgC,EAAK6D,KAAK8L,IAGa,IAArB5J,EAAS+5B,SACX9/B,EAAK6D,KAAK,MAIgB,IAA1BkC,EAASm7B,cACTF,IAAgBF,EAAkB,GAElC9gC,EAAK6D,KAAK,IAEd,CAEAmoB,EAAMnoB,MACsB,IAA1BkC,EAASm7B,aACLlhC,EAAKgG,KAAK,IAAInwB,QAAQ,MAAO,IAC7BmqB,EAAKgG,KAAK,IAElB,CAEA,OAAOgmB,EAAMhmB,KAAK,KACpB,C0CtIWm7B,CAAcV,EAAQ,CAC3Bh2C,QAEAu1C,kBAEAF,UAEAI,gBAEJ,CA4BA,SAASG,EAAqBtgC,EAAMiD,EAAO9qB,GACzC,MAAM7G,EAAW0uB,EAAK1uB,SACtB,IAAIgF,GAAS,EAEb,MAAM8lB,EAAS,GACTu/B,EAAU14B,EAAM5wB,MAAM,YAE5B,OAASiE,EAAQhF,EAASnB,QAIxBisB,EAAO9lB,GAASkqD,EAAgBlvD,EAASgF,GAAQ0pB,EAAMiD,EAAO9qB,GAKhE,OAFAwjD,IAEOv/B,CACT,CAeF,CC3PA,SAASilC,GAAUn3B,GAEjB,MAAMlK,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACrC6vB,EAAK1tB,KACZ0tB,EAAK5hB,QAAyB,8BAAf8rB,EAAM53B,IACvB,CAMA,SAASgvD,GAA8Bp3B,GACrC,MAAM/I,EAAShrB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GAE9C,GACEgxB,GACgB,aAAhBA,EAAO7uB,MACmB,kBAAnB6uB,EAAO/iB,QACd,CACA,MAAM4hB,EAAO7pB,KAAKmrB,MAAMnrB,KAAKmrB,MAAMnxB,OAAS,GACrC6vB,EAAK1tB,KACZ,MAAMwgC,EAAO9S,EAAK1uB,SAAS,GAE3B,GAAIwhC,GAAsB,SAAdA,EAAKxgC,KAAiB,CAChC,MAAMo0C,EAAWvlB,EAAO7vB,SACxB,IAEIiwD,EAFAjrD,GAAS,EAIb,OAASA,EAAQowC,EAASv2C,QAAQ,CAChC,MAAMqxD,EAAU9a,EAASpwC,GACzB,GAAqB,cAAjBkrD,EAAQlvD,KAAsB,CAChCivD,EAAkBC,EAClB,KACF,CACF,CAEID,IAAoBvhC,IAEtB8S,EAAKxjC,MAAQwjC,EAAKxjC,MAAMmJ,MAAM,GAEJ,IAAtBq6B,EAAKxjC,MAAMa,OACb6vB,EAAK1uB,SAAS82B,QAEdpI,EAAKrsB,UACLm/B,EAAKn/B,UACiC,iBAA/Bm/B,EAAKn/B,SAAS/C,MAAMopB,SAE3B8Y,EAAKn/B,SAAS/C,MAAMsvB,SACpB4S,EAAKn/B,SAAS/C,MAAMopB,SACpBgG,EAAKrsB,SAAS/C,MAAQ9C,OAAO4F,OAAO,CAAC,EAAGo/B,EAAKn/B,SAAS/C,QAG5D,CACF,CAEAuF,KAAKlE,KAAKi4B,EACZ,CAMA,SAASu3B,GAAyBzhC,EAAMmB,EAAQ8B,EAAO9qB,GACrD,MAAM26B,EAAO9S,EAAK1uB,SAAS,GACrBowD,EACoB,kBAAjB1hC,EAAK5hB,SAAyB00B,GAAsB,cAAdA,EAAKxgC,KAC9CqvD,EAAW,KAAO3hC,EAAK5hB,QAAU,IAAM,KAAO,KAC9Co9C,EAAUv4B,EAAMw4B,cAActjD,GAEhCupD,GACFlG,EAAQE,KAAKiG,GAGf,IAAIryD,EAAQ,GAAgBwyC,SAAS9hB,EAAMmB,EAAQ8B,EAAO,IACrD9qB,KACAqjD,EAAQ5wB,YAOb,OAJI82B,IACFpyD,EAAQA,EAAMwG,QAAQ,mCASxB,SAAe2pB,GACb,OAAOA,EAAKkiC,CACd,KAROryD,CAST,CCvIA,MAAMsyD,GAAY,CAChB10B,SA2YF,SAA2BJ,EAASC,EAAIwC,GACtC,IAAI7lB,EAAO,EACX,OAYA,SAASm4C,EAAgBp2C,GACvB,IAAc,KAATA,GAAwB,MAATA,IAAiB/B,EAAO,EAG1C,OAFAA,IACAojB,EAAQG,QAAQxhB,GACTo2C,EAET,GAAa,KAATp2C,GAAwB,IAAT/B,EAEjB,OADAojB,EAAQG,QAAQxhB,GACTq2C,EAET,OAAOvyB,EAAI9jB,EACb,EAYA,SAASq2C,EAAer2C,GAEtB,OAAgB,OAATA,EAAgB8jB,EAAI9jB,GAAQshB,EAAGthB,EACxC,CACF,EAnbEokB,SAAS,GAELwqB,GAAS,CACbntB,SA6bF,SAAwBJ,EAASC,EAAIwC,GAEnC,IAAIwyB,EAEAC,EAEA3yB,EACJ,OAAO4yB,EAYP,SAASA,EAAax2C,GAIpB,OAAa,KAATA,GAAwB,KAATA,EACVqhB,EAAQl1B,MAAM6iD,GAAOyH,EAAaC,EAAlCr1B,CAAuDrhB,GASnD,OAATA,GAAiB8gB,GAA0B9gB,IAASihB,GAAkBjhB,IAAkB,KAATA,GAAeghB,GAAmBhhB,GAC5Gy2C,EAAYz2C,IAErB4jB,GAAO,EACPvC,EAAQG,QAAQxhB,GACTw2C,EACT,CAYA,SAASE,EAAoB12C,GAY3B,OAVa,KAATA,EACFs2C,GAA0B,GAK1BC,EAA8BD,EAC9BA,OAA0B5hC,GAE5B2M,EAAQG,QAAQxhB,GACTw2C,CACT,CAWA,SAASC,EAAYz2C,GAGnB,OAAIu2C,GAA+BD,IAA4B1yB,EACtDE,EAAI9jB,GAENshB,EAAGthB,EACZ,CACF,EA/gBEokB,SAAS,GAELpV,GAAO,CACXyS,SAyhBF,SAAsBJ,EAASC,GAC7B,IAAIoN,EAAW,EACXioB,EAAY,EAChB,OAAOC,EAYP,SAASA,EAAW52C,GAClB,OAAa,KAATA,GACF0uB,IACArN,EAAQG,QAAQxhB,GACT42C,GAMI,KAAT52C,GAAe22C,EAAYjoB,EACtBmoB,EAAkB72C,GAMd,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,MAATA,EAC7MqhB,EAAQl1B,MAAM6iD,GAAO1tB,EAAIu1B,EAAzBx1B,CAA4CrhB,GAExC,OAATA,GAAiB8gB,GAA0B9gB,IAASihB,GAAkBjhB,GACjEshB,EAAGthB,IAEZqhB,EAAQG,QAAQxhB,GACT42C,EACT,CAYA,SAASC,EAAkB72C,GAMzB,OAJa,KAATA,GACF22C,IAEFt1B,EAAQG,QAAQxhB,GACT42C,CACT,CACF,EAplBExyB,SAAS,GAEL4qB,GAAQ,CACZvtB,SAkmBF,SAAuBJ,EAASC,EAAIwC,GAClC,OAAOkrB,EAYP,SAASA,EAAMhvC,GAEb,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,MAATA,GACvKqhB,EAAQG,QAAQxhB,GACTgvC,GAMI,KAAThvC,GACFqhB,EAAQG,QAAQxhB,GACT82C,GAMI,KAAT92C,GACFqhB,EAAQG,QAAQxhB,GACT+2C,GAIA,KAAT/2C,GAES,OAATA,GAAiB8gB,GAA0B9gB,IAASihB,GAAkBjhB,GAC7DshB,EAAGthB,GAEL8jB,EAAI9jB,EACb,CAeA,SAAS+2C,EAAkB/2C,GAGzB,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAe8gB,GAA0B9gB,IAASihB,GAAkBjhB,GAC/FshB,EAAGthB,GAELgvC,EAAMhvC,EACf,CAYA,SAAS82C,EAA6B92C,GAEpC,OAAOqgB,GAAWrgB,GAAQg3C,EAA8Bh3C,GAAQ8jB,EAAI9jB,EACtE,CAYA,SAASg3C,EAA8Bh3C,GAErC,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTgvC,GAEL3uB,GAAWrgB,IACbqhB,EAAQG,QAAQxhB,GACTg3C,GAIFlzB,EAAI9jB,EACb,CACF,EA3sBEokB,SAAS,GAEL6yB,GAAsB,CAC1Bx1B,SAytBF,SAAqCJ,EAASC,EAAIwC,GAChD,OAYA,SAAe9jB,GAGb,OADAqhB,EAAQG,QAAQxhB,GACTmkB,CACT,EAYA,SAASA,EAAMnkB,GAEb,OAAOugB,GAAkBvgB,GAAQ8jB,EAAI9jB,GAAQshB,EAAGthB,EAClD,CACF,EAzvBEokB,SAAS,GAEL8yB,GAAc,CAClBxzD,KAAM,cACN+9B,SAwMF,SAA6BJ,EAASC,EAAIwC,GACxC,MAAMhC,EAAOp3B,KACb,OAYA,SAAkBsV,GAChB,GAAa,KAATA,GAAwB,MAATA,IAAiBm3C,GAAYn0D,KAAK8+B,EAAMA,EAAK5C,WAAak4B,GAAmBt1B,EAAK5D,QACnG,OAAO4F,EAAI9jB,GAMb,OAJAqhB,EAAQz6B,MAAM,mBACdy6B,EAAQz6B,MAAM,sBAGPy6B,EAAQl1B,MAAMgqD,GAAW90B,EAAQM,QAAQitB,GAAQvtB,EAAQM,QAAQ3S,GAAMqoC,GAAWvzB,GAAMA,EAAxFzC,CAA6FrhB,EACtG,EAYA,SAASq3C,EAASr3C,GAGhB,OAFAqhB,EAAQ76B,KAAK,sBACb66B,EAAQ76B,KAAK,mBACN86B,EAAGthB,EACZ,CACF,EA/OEkf,SAAUi4B,IAENG,GAAmB,CACvB5zD,KAAM,mBACN+9B,SAwPF,SAAkCJ,EAASC,EAAIwC,GAC7C,MAAMhC,EAAOp3B,KACb,IAAI4hC,EAAS,GACT1I,GAAO,EACX,OAYA,SAAuB5jB,GACrB,IAAc,KAATA,GAAwB,MAATA,IAAiBu3C,GAAiBv0D,KAAK8+B,EAAMA,EAAK5C,YAAck4B,GAAmBt1B,EAAK5D,QAK1G,OAJAmD,EAAQz6B,MAAM,mBACdy6B,EAAQz6B,MAAM,uBACd0lC,GAAUrR,OAAOuZ,cAAcx0B,GAC/BqhB,EAAQG,QAAQxhB,GACTw3C,EAET,OAAO1zB,EAAI9jB,EACb,EAYA,SAASw3C,EAAqBx3C,GAE5B,GAAIqgB,GAAWrgB,IAASssB,EAAO5nC,OAAS,EAItC,OAFA4nC,GAAUrR,OAAOuZ,cAAcx0B,GAC/BqhB,EAAQG,QAAQxhB,GACTw3C,EAET,GAAa,KAATx3C,EAAa,CACf,MAAM2nC,EAAWrb,EAAOvhC,cACxB,GAAiB,SAAb48C,GAAoC,UAAbA,EAEzB,OADAtmB,EAAQG,QAAQxhB,GACTy3C,CAEX,CACA,OAAO3zB,EAAI9jB,EACb,CAYA,SAASy3C,EAAsBz3C,GAC7B,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACZ4jB,EACK8zB,GAET9zB,GAAO,EACA6zB,IAEF3zB,EAAI9jB,EACb,CAYA,SAAS03C,EAAc13C,GAGrB,OAAgB,OAATA,GAAiBygB,GAAazgB,IAAS8gB,GAA0B9gB,IAASihB,GAAkBjhB,IAASghB,GAAmBhhB,GAAQ8jB,EAAI9jB,GAAQqhB,EAAQM,QAAQitB,GAAQvtB,EAAQM,QAAQ3S,GAAM2oC,GAAgB7zB,EAA9DzC,CAAmErhB,EACxN,CAYA,SAAS23C,EAAc33C,GAGrB,OAFAqhB,EAAQ76B,KAAK,uBACb66B,EAAQ76B,KAAK,mBACN86B,EAAGthB,EACZ,CACF,EAnWEkf,SAAUq4B,IAENK,GAAgB,CACpBl0D,KAAM,gBACN+9B,SAwDF,SAA+BJ,EAASC,EAAIwC,GAC1C,MAAMhC,EAAOp3B,KAEb,IAAImtD,EAEAxkD,EACJ,OAYA,SAAe2M,GACb,IAAK83C,GAAS93C,KAAU+3C,GAAc/0D,KAAK8+B,EAAMA,EAAK5C,WAAak4B,GAAmBt1B,EAAK5D,QACzF,OAAO4F,EAAI9jB,GAIb,OAFAqhB,EAAQz6B,MAAM,mBACdy6B,EAAQz6B,MAAM,wBACPyoD,EAAMrvC,EACf,EAYA,SAASqvC,EAAMrvC,GACb,OAAI83C,GAAS93C,IACXqhB,EAAQG,QAAQxhB,GACTqvC,GAEI,KAATrvC,GACFqhB,EAAQG,QAAQxhB,GACTg4C,GAEFl0B,EAAI9jB,EACb,CAgBA,SAASg4C,EAAYh4C,GAEnB,OAAa,KAATA,EACKqhB,EAAQl1B,MAAM8qD,GAAqBgB,EAAkBC,EAArD72B,CAAqErhB,GAIjE,KAATA,GAAwB,KAATA,GAAeugB,GAAkBvgB,IAClD3M,GAAO,EACPguB,EAAQG,QAAQxhB,GACTg4C,GASFC,EAAiBj4C,EAC1B,CAYA,SAASk4C,EAAel4C,GAGtB,OAFAqhB,EAAQG,QAAQxhB,GAChB63C,GAAM,EACCG,CACT,CAYA,SAASC,EAAiBj4C,GAGxB,OAAI3M,GAAQwkD,GAAOx3B,GAAWyB,EAAK5C,WACjCmC,EAAQ76B,KAAK,wBACb66B,EAAQ76B,KAAK,mBACN86B,EAAGthB,IAEL8jB,EAAI9jB,EACb,CACF,EAhLEkf,SAAU64B,IAIN,GAAO,CAAC,EAiBd,IAAI,GAAO,GAGX,KAAO,GAAO,KACZ,GAAK,IAAQH,GACb,KACa,KAAT,GAAa,GAAO,GAAqB,KAAT,KAAa,GAAO,IAutB1D,SAAST,GAAYn3C,GACnB,OAAgB,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,MAATA,GAAgB8gB,GAA0B9gB,EAC/I,CAQA,SAASu3C,GAAiBv3C,GACxB,OAAQqgB,GAAWrgB,EACrB,CAMA,SAAS+3C,GAAc/3C,GAKrB,QAAkB,KAATA,GAAe83C,GAAS93C,GACnC,CAMA,SAAS83C,GAAS93C,GAChB,OAAgB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeugB,GAAkBvgB,EACvF,CAMA,SAASo3C,GAAmBl5B,GAC1B,IAAIrzB,EAAQqzB,EAAOx5B,OACfisB,GAAS,EACb,KAAO9lB,KAAS,CACd,MAAM4zB,EAAQP,EAAOrzB,GAAO,GAC5B,IAAoB,cAAf4zB,EAAM53B,MAAuC,eAAf43B,EAAM53B,QAA2B43B,EAAMsR,UAAW,CACnFpf,GAAS,EACT,KACF,CAIA,GAAI8N,EAAM05B,8BAA+B,CACvCxnC,GAAS,EACT,KACF,CACF,CAMA,OALIuN,EAAOx5B,OAAS,IAAMisB,IAGxBuN,EAAOA,EAAOx5B,OAAS,GAAG,GAAGyzD,+BAAgC,GAExDxnC,CACT,CAlxBA,GAAK,IAAMinC,GACX,GAAK,IAAMA,GACX,GAAK,IAAMA,GACX,GAAK,IAAMA,GACX,GAAK,IAAM,CAACA,GAAeN,IAC3B,GAAK,KAAO,CAACM,GAAeN,IAC5B,GAAK,IAAM,CAACM,GAAeV,IAC3B,GAAK,KAAO,CAACU,GAAeV,IClE5B,MAAMkB,GAAS,CACb32B,SAgdF,SAAwBJ,EAASC,EAAIwC,GACnC,MAAMhC,EAAOp3B,KACb,OAAO02B,GAAaC,GAKpB,SAAqBrhB,GACnB,MAAM2kB,EAAO7C,EAAK5D,OAAO4D,EAAK5D,OAAOx5B,OAAS,GAC9C,OAAOigC,GAAyB,gCAAjBA,EAAK,GAAG99B,MAA2F,IAAjD89B,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMjgC,OAAe48B,EAAGthB,GAAQ8jB,EAAI9jB,EACvI,GAR0C,8BAA+B,EAS3E,EA1dEokB,SAAS,GAiDX,SAASi0B,GAAiCh3B,EAASC,EAAIwC,GACrD,MAAMhC,EAAOp3B,KACb,IAAIG,EAAQi3B,EAAK5D,OAAOx5B,OACxB,MAAMgH,EAAUo2B,EAAKhD,OAAOw5B,eAAiBx2B,EAAKhD,OAAOw5B,aAAe,IAExE,IAAIxoB,EAGJ,KAAOjlC,KAAS,CACd,MAAM4zB,EAAQqD,EAAK5D,OAAOrzB,GAAO,GACjC,GAAmB,eAAf4zB,EAAM53B,KAAuB,CAC/BipC,EAAarR,EACb,KACF,CAGA,GAAmB,oBAAfA,EAAM53B,MAA6C,cAAf43B,EAAM53B,MAAuC,UAAf43B,EAAM53B,MAAmC,UAAf43B,EAAM53B,MAAmC,SAAf43B,EAAM53B,KAC9H,KAEJ,CACA,OAKA,SAAemZ,GACb,IAAK8vB,IAAeA,EAAWC,UAC7B,OAAOjM,EAAI9jB,GAEb,MAAMlL,EAAKg2B,GAAoBhJ,EAAK8C,eAAe,CACjDz/B,MAAO2qC,EAAWxqC,IAClBA,IAAKw8B,EAAKwB,SAEZ,GAA0B,KAAtBxuB,EAAGkmC,YAAY,KAActvC,EAAQmB,SAASiI,EAAG9H,MAAM,IACzD,OAAO82B,EAAI9jB,GAKb,OAHAqhB,EAAQz6B,MAAM,8BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,8BACN86B,EAAGthB,EACZ,CACF,CAIA,SAASu4C,GAAkCr6B,EAAQQ,GACjD,IAEIoR,EAFAjlC,EAAQqzB,EAAOx5B,OAKnB,KAAOmG,KACL,GAA8B,eAA1BqzB,EAAOrzB,GAAO,GAAGhE,MAA8C,UAArBq3B,EAAOrzB,GAAO,GAAgB,CAC1EilC,EAAa5R,EAAOrzB,GAAO,GAC3B,KACF,CAGFqzB,EAAOrzB,EAAQ,GAAG,GAAGhE,KAAO,OAC5Bq3B,EAAOrzB,EAAQ,GAAG,GAAGhE,KAAO,6BAI5B,MAAM7D,EAAO,CACX6D,KAAM,kBACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,EAAQ,GAAG,GAAG1F,OAC9CG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOA,EAAOx5B,OAAS,GAAG,GAAGY,MAIhDsjC,EAAS,CACb/hC,KAAM,wBACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,EAAQ,GAAG,GAAGvF,KAC9CA,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,EAAQ,GAAG,GAAGvF,MAG9CsjC,EAAOtjC,IAAImvB,SACXmU,EAAOtjC,IAAIipB,SACXqa,EAAOtjC,IAAIwgC,eAEX,MAAMjU,EAAS,CACbhrB,KAAM,wBACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAG2gC,EAAOtjC,KAChCA,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOA,EAAOx5B,OAAS,GAAG,GAAGS,QAGhDwgC,EAAQ,CACZ9+B,KAAM,cACNw3B,YAAa,SACbl5B,MAAO9C,OAAO4F,OAAO,CAAC,EAAG4pB,EAAO1sB,OAChCG,IAAKjD,OAAO4F,OAAO,CAAC,EAAG4pB,EAAOvsB,MAI1BkzD,EAAc,CAEpBt6B,EAAOrzB,EAAQ,GAAIqzB,EAAOrzB,EAAQ,GAAI,CAAC,QAAS7H,EAAM07B,GAEtDR,EAAOrzB,EAAQ,GAAIqzB,EAAOrzB,EAAQ,GAElC,CAAC,QAAS+9B,EAAQlK,GAAU,CAAC,OAAQkK,EAAQlK,GAE7C,CAAC,QAAS7M,EAAQ6M,GAAU,CAAC,QAASiH,EAAOjH,GAAU,CAAC,OAAQiH,EAAOjH,GAAU,CAAC,OAAQ7M,EAAQ6M,GAElGR,EAAOA,EAAOx5B,OAAS,GAAIw5B,EAAOA,EAAOx5B,OAAS,GAAI,CAAC,OAAQ1B,EAAM07B,IAErE,OADAR,EAAOhC,OAAOrxB,EAAOqzB,EAAOx5B,OAASmG,EAAQ,KAAM2tD,GAC5Ct6B,CACT,CAMA,SAASu6B,GAAwBp3B,EAASC,EAAIwC,GAC5C,MAAMhC,EAAOp3B,KACPgB,EAAUo2B,EAAKhD,OAAOw5B,eAAiBx2B,EAAKhD,OAAOw5B,aAAe,IACxE,IAEIjlD,EAFA4K,EAAO,EASX,OAYA,SAAe+B,GAKb,OAJAqhB,EAAQz6B,MAAM,mBACdy6B,EAAQz6B,MAAM,8BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,8BACNkyD,CACT,EAYA,SAASA,EAAU14C,GACjB,OAAa,KAATA,EAAoB8jB,EAAI9jB,IAC5BqhB,EAAQz6B,MAAM,yBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,yBACb66B,EAAQz6B,MAAM,yBACdy6B,EAAQz6B,MAAM,eAAey3B,YAAc,SACpCs6B,EACT,CAYA,SAASA,EAAS34C,GAChB,GAEA/B,EAAO,KAEE,KAAT+B,IAAgB3M,GAGP,OAAT2M,GAA0B,KAATA,GAAe8gB,GAA0B9gB,GACxD,OAAO8jB,EAAI9jB,GAEb,GAAa,KAATA,EAAa,CACfqhB,EAAQ76B,KAAK,eACb,MAAMi4B,EAAQ4C,EAAQ76B,KAAK,yBAC3B,OAAKkF,EAAQmB,SAASi+B,GAAoBhJ,EAAK8C,eAAenG,MAG9D4C,EAAQz6B,MAAM,8BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,8BACb66B,EAAQ76B,KAAK,mBACN86B,GANEwC,EAAI9jB,EAOf,CAMA,OALK8gB,GAA0B9gB,KAC7B3M,GAAO,GAET4K,IACAojB,EAAQG,QAAQxhB,GACA,KAATA,EAAc44C,EAAaD,CACpC,CAYA,SAASC,EAAW54C,GAClB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCqhB,EAAQG,QAAQxhB,GAChB/B,IACO06C,GAEFA,EAAS34C,EAClB,CACF,CAMA,SAAS64C,GAAwBx3B,EAASC,EAAIwC,GAC5C,MAAMhC,EAAOp3B,KACPgB,EAAUo2B,EAAKhD,OAAOw5B,eAAiBx2B,EAAKhD,OAAOw5B,aAAe,IAExE,IAAIvtB,EAGA13B,EAFA4K,EAAO,EAGX,OAYA,SAAe+B,GAMb,OALAqhB,EAAQz6B,MAAM,yBAAyB23B,YAAa,EACpD8C,EAAQz6B,MAAM,8BACdy6B,EAAQz6B,MAAM,oCACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oCACNsyD,CACT,EAYA,SAASA,EAAc94C,GACrB,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,+BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,+BACb66B,EAAQz6B,MAAM,oCACdy6B,EAAQz6B,MAAM,eAAey3B,YAAc,SACpCoM,GAEF3G,EAAI9jB,EACb,CAeA,SAASyqB,EAAYzqB,GACnB,GAEA/B,EAAO,KAEE,KAAT+B,IAAgB3M,GAGP,OAAT2M,GAA0B,KAATA,GAAe8gB,GAA0B9gB,GACxD,OAAO8jB,EAAI9jB,GAEb,GAAa,KAATA,EAAa,CACfqhB,EAAQ76B,KAAK,eACb,MAAMi4B,EAAQ4C,EAAQ76B,KAAK,oCAM3B,OALAukC,EAAaD,GAAoBhJ,EAAK8C,eAAenG,IACrD4C,EAAQz6B,MAAM,oCACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oCACb66B,EAAQ76B,KAAK,8BACNwkC,CACT,CAMA,OALKlK,GAA0B9gB,KAC7B3M,GAAO,GAET4K,IACAojB,EAAQG,QAAQxhB,GACA,KAATA,EAAc0qB,EAAcD,CACrC,CAeA,SAASC,EAAY1qB,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCqhB,EAAQG,QAAQxhB,GAChB/B,IACOwsB,GAEFA,EAAYzqB,EACrB,CAYA,SAASgrB,EAAWhrB,GAClB,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBACRkF,EAAQmB,SAASk+B,IACpBr/B,EAAQ2sB,KAAK0S,GAMR3J,GAAaC,EAAS03B,EAAiB,oCAEzCj1B,EAAI9jB,EACb,CAYA,SAAS+4C,EAAgB/4C,GAEvB,OAAOshB,EAAGthB,EACZ,CACF,CAMA,SAASg5C,GAA+B33B,EAASC,EAAIwC,GAUnD,OAAOzC,EAAQl1B,MAAM+3B,GAAW5C,EAAID,EAAQM,QAAQy2B,GAAQ92B,EAAIwC,GAClE,CAGA,SAASm1B,GAAyB53B,GAChCA,EAAQ76B,KAAK,wBACf,CClcO,SAAS0yD,GAAiBz1D,GAE/B,IAAI01D,GADa11D,GAAW,CAAC,GACP21D,YACtB,MAAMv6B,EAAY,CAChBn7B,KAAM,gBACN+9B,SAsFF,SAA+BJ,EAASC,EAAIwC,GAC1C,MAAM5E,EAAWx0B,KAAKw0B,SAChBhB,EAASxzB,KAAKwzB,OACpB,IAAIjgB,EAAO,EACX,OAGA,SAAe+B,GACb,GAAiB,MAAbkf,GAA0D,oBAAtChB,EAAOA,EAAOx5B,OAAS,GAAG,GAAGmC,KACnD,OAAOi9B,EAAI9jB,GAGb,OADAqhB,EAAQz6B,MAAM,kCACPq3B,EAAKje,EACd,EAGA,SAASie,EAAKje,GACZ,MAAMmgB,EAASkR,GAAkBnS,GACjC,GAAa,MAATlf,EAEF,OAAI/B,EAAO,EAAU6lB,EAAI9jB,IACzBqhB,EAAQG,QAAQxhB,GAChB/B,IACOggB,GAET,GAAIhgB,EAAO,IAAMk7C,EAAQ,OAAOr1B,EAAI9jB,GACpC,MAAMye,EAAQ4C,EAAQ76B,KAAK,kCACrB29B,EAAQkN,GAAkBrxB,GAGhC,OAFAye,EAAM+S,OAASrN,GAAmB,IAAVA,GAAezI,QAAQyE,GAC/C1B,EAAMgT,QAAUtR,GAAqB,IAAXA,GAAgBzE,QAAQyI,GAC3C7C,EAAGthB,EACZ,CACF,EArHEglB,WAsBF,SAAiC9G,EAAQQ,GACvC,IAAI7zB,GAAS,EAGb,OAASA,EAAQqzB,EAAOx5B,QAEtB,GAAyB,UAArBw5B,EAAOrzB,GAAO,IAA4C,mCAA1BqzB,EAAOrzB,GAAO,GAAGhE,MAA6Cq3B,EAAOrzB,GAAO,GAAG4mC,OAAQ,CACzH,IAAIn1B,EAAOzR,EAGX,KAAOyR,KAEL,GAAwB,SAApB4hB,EAAO5hB,GAAM,IAA0C,mCAAzB4hB,EAAO5hB,GAAM,GAAGzV,MAA6Cq3B,EAAO5hB,GAAM,GAAGk1B,OAE/GtT,EAAOrzB,GAAO,GAAGvF,IAAIipB,OAAS2P,EAAOrzB,GAAO,GAAG1F,MAAMopB,QAAW2P,EAAO5hB,GAAM,GAAGhX,IAAIipB,OAAS2P,EAAO5hB,GAAM,GAAGnX,MAAMopB,OAAQ,CACzH2P,EAAOrzB,GAAO,GAAGhE,KAAO,wBACxBq3B,EAAO5hB,GAAM,GAAGzV,KAAO,wBAGvB,MAAMwyD,EAAgB,CACpBxyD,KAAM,gBACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGnX,OACzCG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,GAAO,GAAGvF,MAIpCyc,EAAO,CACXlb,KAAM,oBACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGi2B,EAAO5hB,GAAM,GAAGhX,KACzCA,IAAKjD,OAAO4F,OAAO,CAAC,EAAGi2B,EAAOrzB,GAAO,GAAG1F,QAKpC0sC,EAAa,CAAC,CAAC,QAASwnB,EAAe36B,GAAU,CAAC,QAASR,EAAO5hB,GAAM,GAAIoiB,GAAU,CAAC,OAAQR,EAAO5hB,GAAM,GAAIoiB,GAAU,CAAC,QAAS3c,EAAM2c,IAC1I+R,EAAa/R,EAAQI,OAAOmB,WAAWwQ,WAAWxM,KACpDwM,GAEFvU,GAAO2V,EAAYA,EAAWntC,OAAQ,EAAGsgC,GAAWyL,EAAYvS,EAAOlxB,MAAMsP,EAAO,EAAGzR,GAAQ6zB,IAIjGxC,GAAO2V,EAAYA,EAAWntC,OAAQ,EAAG,CAAC,CAAC,OAAQqd,EAAM2c,GAAU,CAAC,QAASR,EAAOrzB,GAAO,GAAI6zB,GAAU,CAAC,OAAQR,EAAOrzB,GAAO,GAAI6zB,GAAU,CAAC,OAAQ26B,EAAe36B,KACtKxC,GAAOgC,EAAQ5hB,EAAO,EAAGzR,EAAQyR,EAAO,EAAGu1B,GAC3ChnC,EAAQyR,EAAOu1B,EAAWntC,OAAS,EACnC,KACF,CAEJ,CAEFmG,GAAS,EACT,OAASA,EAAQqzB,EAAOx5B,QACQ,mCAA1Bw5B,EAAOrzB,GAAO,GAAGhE,OACnBq3B,EAAOrzB,GAAO,GAAGhE,KAAO,QAG5B,OAAOq3B,CACT,GA1EA,OAHIi7B,UACFA,GAAS,GAEJ,CACLp3C,KAAM,CACJ,IAAO8c,GAET4R,WAAY,CACVxM,KAAM,CAACpF,IAET0S,iBAAkB,CAChBtN,KAAM,CAAC,MAyGb,CCpHO,MAAMq1B,GAIX,WAAAh2D,GAMEoH,KAAKs9B,IAAM,EACb,CAUA,GAAA5H,CAAIv1B,EAAOsxB,EAAQiE,IAmFrB,SAA2Bm5B,EAASC,EAAIr9B,EAAQiE,GAC9C,IAAIv1B,EAAQ,EAGZ,GAAe,IAAXsxB,GAA+B,IAAfiE,EAAI17B,OACtB,OAEF,KAAOmG,EAAQ0uD,EAAQvxB,IAAItjC,QAAQ,CACjC,GAAI60D,EAAQvxB,IAAIn9B,GAAO,KAAO2uD,EAW5B,OAVAD,EAAQvxB,IAAIn9B,GAAO,IAAMsxB,OAOzBo9B,EAAQvxB,IAAIn9B,GAAO,GAAGwtB,QAAQ+H,GAKhCv1B,GAAS,CACX,CACA0uD,EAAQvxB,IAAI3P,KAAK,CAACmhC,EAAIr9B,EAAQiE,GAChC,CA1GIq5B,CAAkB/uD,KAAMG,EAAOsxB,EAAQiE,EACzC,CAqBA,OAAAoB,CAAQtD,GAMN,GALAxzB,KAAKs9B,IAAI0xB,MAAK,SAAUC,EAAGC,GACzB,OAAOD,EAAE,GAAKC,EAAE,EAClB,IAGwB,IAApBlvD,KAAKs9B,IAAItjC,OACX,OAqBF,IAAImG,EAAQH,KAAKs9B,IAAItjC,OAErB,MAAMm1D,EAAO,GACb,KAAOhvD,EAAQ,GACbA,GAAS,EACTgvD,EAAKxhC,KAAK6F,EAAOlxB,MAAMtC,KAAKs9B,IAAIn9B,GAAO,GAAKH,KAAKs9B,IAAIn9B,GAAO,IAAKH,KAAKs9B,IAAIn9B,GAAO,IAGjFqzB,EAAOx5B,OAASgG,KAAKs9B,IAAIn9B,GAAO,GAElCgvD,EAAKxhC,KAAK,IAAI6F,IACdA,EAAOx5B,OAAS,EAChB,IAAIsI,EAAQ6sD,EAAK7gC,MACjB,KAAOhsB,GACLkxB,EAAO7F,QAAQrrB,GACfA,EAAQ6sD,EAAK7gC,MAIftuB,KAAKs9B,IAAItjC,OAAS,CACpB,ECnGK,SAASo1D,GAAc57B,EAAQrzB,GACpC,IAAIkvD,GAAiB,EAErB,MAAM96C,EAAQ,GACd,KAAOpU,EAAQqzB,EAAOx5B,QAAQ,CAC5B,MAAM4b,EAAQ4d,EAAOrzB,GACrB,GAAIkvD,GACF,GAAiB,UAAbz5C,EAAM,GAGc,iBAAlBA,EAAM,GAAGzZ,MACXoY,EAAMoZ,KAAmC,yBAA9B6F,EAAOrzB,EAAQ,GAAG,GAAGhE,KAAkC,OAAS,aAM1E,GAAsB,iBAAlByZ,EAAM,GAAGzZ,MAChB,GAAkC,yBAA9Bq3B,EAAOrzB,EAAQ,GAAG,GAAGhE,KAAiC,CACxD,MAAMmzD,EAAa/6C,EAAMva,OAAS,EAClCua,EAAM+6C,GAAoC,SAAtB/6C,EAAM+6C,GAAyB,SAAW,OAChE,OAGG,GAAsB,sBAAlB15C,EAAM,GAAGzZ,KAChB,UAEoB,UAAbyZ,EAAM,IAAoC,sBAAlBA,EAAM,GAAGzZ,OAC1CkzD,GAAiB,GAEnBlvD,GAAS,CACX,CACA,OAAOoU,CACT,CCXA,SAASg7C,GAAc54B,EAASC,EAAIwC,GAClC,MAAMhC,EAAOp3B,KACb,IAGIk5B,EAHA3lB,EAAO,EACPi8C,EAAQ,EAGZ,OAkBA,SAAel6C,GACb,IAAInV,EAAQi3B,EAAK5D,OAAOx5B,OAAS,EACjC,KAAOmG,GAAS,GAAG,CACjB,MAAMhE,EAAOi7B,EAAK5D,OAAOrzB,GAAO,GAAGhE,KACnC,GAAa,eAATA,GAEK,eAATA,EAAoC,MAAbgE,GACzB,CACA,MAAM85B,EAAO95B,GAAS,EAAIi3B,EAAK5D,OAAOrzB,GAAO,GAAGhE,KAAO,KACjD04B,EAAgB,cAAToF,GAAiC,aAATA,EAAsBw1B,EAAeC,EAG1E,GAAI76B,IAAS46B,GAAgBr4B,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MACvD,OAAOsP,EAAI9jB,GAEb,OAAOuf,EAAKvf,EACd,EAcA,SAASo6C,EAAcp6C,GAGrB,OAFAqhB,EAAQz6B,MAAM,aACdy6B,EAAQz6B,MAAM,YAgBhB,SAAsBoZ,GACpB,GAAa,MAATA,EACF,OAAOq6C,EAAar6C,GAgBtB,OAHA4jB,GAAO,EAEPs2B,GAAS,EACFG,EAAar6C,EACtB,CAlCSs6C,CAAat6C,EACtB,CAiDA,SAASq6C,EAAar6C,GACpB,OAAa,OAATA,EAEK8jB,EAAI9jB,GAET6gB,GAAmB7gB,GAEjBk6C,EAAQ,GACVA,EAAQ,EAGRp4B,EAAKkB,WAAY,EACjB3B,EAAQ76B,KAAK,YACb66B,EAAQz6B,MAAM,cACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,cACN+zD,GAIFz2B,EAAI9jB,GAET+gB,GAAc/gB,GAITohB,GAAaC,EAASg5B,EAAc,aAApCj5B,CAAkDphB,IAE3Dk6C,GAAS,EACLt2B,IACFA,GAAO,EAEP3lB,GAAQ,GAEG,MAAT+B,GACFqhB,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBAEbo9B,GAAO,EACAy2B,IAITh5B,EAAQz6B,MAAM,QACP4zD,EAAYx6C,IACrB,CAcA,SAASw6C,EAAYx6C,GACnB,OAAa,OAATA,GAA0B,MAATA,GAAgB8gB,GAA0B9gB,IAC7DqhB,EAAQ76B,KAAK,QACN6zD,EAAar6C,KAEtBqhB,EAAQG,QAAQxhB,GACA,KAATA,EAAcy6C,EAAgBD,EACvC,CAcA,SAASC,EAAcz6C,GACrB,OAAa,KAATA,GAAwB,MAATA,GACjBqhB,EAAQG,QAAQxhB,GACTw6C,GAEFA,EAAYx6C,EACrB,CAcA,SAASu6C,EAAmBv6C,GAK1B,OAHA8hB,EAAKkB,WAAY,EAGblB,EAAKhD,OAAOuE,KAAKvB,EAAKwB,MAAM9O,MACvBsP,EAAI9jB,IAEbqhB,EAAQz6B,MAAM,qBAEdg9B,GAAO,EACH7C,GAAc/gB,GACTohB,GAAaC,EAASq5B,EAAqB,aAAc54B,EAAKhD,OAAOmB,WAAW+D,QAAQC,KAAKp3B,SAAS,qBAAkB6nB,EAAY,EAApI0M,CAAuIphB,GAEzI06C,EAAoB16C,GAC7B,CAgBA,SAAS06C,EAAoB16C,GAC3B,OAAa,KAATA,GAAwB,KAATA,EACV26C,EAAyB36C,GAErB,MAATA,GACF4jB,GAAO,EAEPvC,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBACNo0D,GAIFC,EAAiB76C,EAC1B,CAaA,SAAS46C,EAAwB56C,GAC/B,OAAI+gB,GAAc/gB,GACTohB,GAAaC,EAASs5B,EAA0B,aAAhDv5B,CAA8DphB,GAEhE26C,EAAyB36C,EAClC,CAaA,SAAS26C,EAAyB36C,GAEhC,OAAa,KAATA,GACFk6C,GAAS,EACTt2B,GAAO,EACPvC,EAAQz6B,MAAM,wBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,wBACNs0D,GAII,KAAT96C,GACFk6C,GAAS,EAEFY,EAAgC96C,IAE5B,OAATA,GAAiB6gB,GAAmB7gB,GAC/B+6C,EAAuB/6C,GAEzB66C,EAAiB76C,EAC1B,CAaA,SAAS86C,EAAgC96C,GACvC,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,wBACPo0D,EAAoBh7C,IAItB66C,EAAiB76C,EAC1B,CAaA,SAASg7C,EAAoBh7C,GAC3B,OAAa,KAATA,GACFqhB,EAAQG,QAAQxhB,GACTg7C,GAII,KAATh7C,GACF4jB,GAAO,EACPvC,EAAQ76B,KAAK,wBACb66B,EAAQz6B,MAAM,wBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,wBACNy0D,IAET55B,EAAQ76B,KAAK,wBACNy0D,EAAiCj7C,GAC1C,CAaA,SAASi7C,EAAiCj7C,GACxC,OAAI+gB,GAAc/gB,GACTohB,GAAaC,EAAS05B,EAAwB,aAA9C35B,CAA4DphB,GAE9D+6C,EAAuB/6C,EAChC,CAaA,SAAS+6C,EAAuB/6C,GAC9B,OAAa,MAATA,EACK06C,EAAoB16C,IAEhB,OAATA,GAAiB6gB,GAAmB7gB,KAKjC4jB,GAAQ3lB,IAASi8C,GAKtB74B,EAAQ76B,KAAK,qBACb66B,EAAQ76B,KAAK,aAGN86B,EAAGthB,IAEL66C,EAAiB76C,EAC1B,CAaA,SAAS66C,EAAiB76C,GAExB,OAAO8jB,EAAI9jB,EACb,CAcA,SAASm6C,EAAan6C,GAKpB,OADAqhB,EAAQz6B,MAAM,YACPs0D,EAAal7C,EACtB,CAgBA,SAASk7C,EAAal7C,GACpB,OAAa,MAATA,GACFqhB,EAAQz6B,MAAM,oBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,oBACN00D,GAEI,OAATl7C,GAAiB6gB,GAAmB7gB,IACtCqhB,EAAQ76B,KAAK,YACN86B,EAAGthB,IAER+gB,GAAc/gB,GACTohB,GAAaC,EAAS65B,EAAc,aAApC95B,CAAkDphB,IAI3DqhB,EAAQz6B,MAAM,QACPu0D,EAAYn7C,GACrB,CAcA,SAASm7C,EAAYn7C,GACnB,OAAa,OAATA,GAA0B,MAATA,GAAgB8gB,GAA0B9gB,IAC7DqhB,EAAQ76B,KAAK,QACN00D,EAAal7C,KAEtBqhB,EAAQG,QAAQxhB,GACA,KAATA,EAAco7C,EAAgBD,EACvC,CAcA,SAASC,EAAcp7C,GACrB,OAAa,KAATA,GAAwB,MAATA,GACjBqhB,EAAQG,QAAQxhB,GACTm7C,GAEFA,EAAYn7C,EACrB,CACF,CAIA,SAASq7C,GAAan9B,EAAQQ,GAC5B,IAWI48B,EAEAC,EAEAC,EAfA3wD,GAAS,EACT4wD,GAA0B,EAE1BC,EAAU,EAEVC,EAAW,CAAC,EAAG,EAAG,EAAG,GAErBrZ,EAAO,CAAC,EAAG,EAAG,EAAG,GACjBsZ,GAAgC,EAChCC,EAAe,EAOnB,MAAM7zB,EAAM,IAAIsxB,GAChB,OAASzuD,EAAQqzB,EAAOx5B,QAAQ,CAC9B,MAAM4b,EAAQ4d,EAAOrzB,GACf4zB,EAAQne,EAAM,GACH,UAAbA,EAAM,GAEW,cAAfme,EAAM53B,MACR+0D,GAAgC,EAGX,IAAjBC,IACFC,GAAc9zB,EAAKtJ,EAASm9B,EAAcP,EAAcC,GACxDA,OAAc7mC,EACdmnC,EAAe,GAIjBP,EAAe,CACbz0D,KAAM,QACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGw2B,EAAMt5B,OAE/BG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGw2B,EAAMn5B,MAE/B0iC,EAAI5H,IAAIv1B,EAAO,EAAG,CAAC,CAAC,QAASywD,EAAc58B,MACnB,aAAfD,EAAM53B,MAAsC,sBAAf43B,EAAM53B,MAC5C40D,GAA0B,EAC1BD,OAAc9mC,EACdinC,EAAW,CAAC,EAAG,EAAG,EAAG,GACrBrZ,EAAO,CAAC,EAAGz3C,EAAQ,EAAG,EAAG,GAGrB+wD,IACFA,GAAgC,EAChCL,EAAc,CACZ10D,KAAM,YACN1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGw2B,EAAMt5B,OAE/BG,IAAKjD,OAAO4F,OAAO,CAAC,EAAGw2B,EAAMn5B,MAE/B0iC,EAAI5H,IAAIv1B,EAAO,EAAG,CAAC,CAAC,QAAS0wD,EAAa78B,MAE5Cg9B,EAAyB,sBAAfj9B,EAAM53B,KAA+B,EAAI00D,EAAc,EAAI,IAG9DG,GAA2B,SAAfj9B,EAAM53B,MAAkC,yBAAf43B,EAAM53B,MAAkD,yBAAf43B,EAAM53B,KAYnE,qBAAf43B,EAAM53B,OACX40D,EACFA,GAA0B,GAEN,IAAhBE,EAAS,KACXrZ,EAAK,GAAKA,EAAK,GACfkZ,EAAcO,GAAU/zB,EAAKtJ,EAASi9B,EAAUD,OAAShnC,EAAW8mC,IAEtEG,EAAWrZ,EACXA,EAAO,CAACqZ,EAAS,GAAI9wD,EAAO,EAAG,MApBjC4wD,GAA0B,EAGV,IAAZnZ,EAAK,KACa,IAAhBqZ,EAAS,KACXrZ,EAAK,GAAKA,EAAK,GACfkZ,EAAcO,GAAU/zB,EAAKtJ,EAASi9B,EAAUD,OAAShnC,EAAW8mC,GACpEG,EAAW,CAAC,EAAG,EAAG,EAAG,IAEvBrZ,EAAK,GAAKz3C,IAgBQ,cAAf4zB,EAAM53B,MACb+0D,GAAgC,EAChCC,EAAehxD,GACS,aAAf4zB,EAAM53B,MAAsC,sBAAf43B,EAAM53B,MAC5Cg1D,EAAehxD,EACK,IAAhB8wD,EAAS,IACXrZ,EAAK,GAAKA,EAAK,GACfkZ,EAAcO,GAAU/zB,EAAKtJ,EAASi9B,EAAUD,EAAS7wD,EAAO2wD,IAC3C,IAAZlZ,EAAK,KACdkZ,EAAcO,GAAU/zB,EAAKtJ,EAAS4jB,EAAMoZ,EAAS7wD,EAAO2wD,IAE9DE,EAAU,IACDA,GAA2B,SAAfj9B,EAAM53B,MAAkC,yBAAf43B,EAAM53B,MAAkD,yBAAf43B,EAAM53B,OAC7Fy7C,EAAK,GAAKz3C,EAEd,CAUA,IATqB,IAAjBgxD,GACFC,GAAc9zB,EAAKtJ,EAASm9B,EAAcP,EAAcC,GAE1DvzB,EAAIxG,QAAQ9C,EAAQR,QAKpBrzB,GAAS,IACAA,EAAQ6zB,EAAQR,OAAOx5B,QAAQ,CACtC,MAAM4b,EAAQoe,EAAQR,OAAOrzB,GACZ,UAAbyV,EAAM,IAAoC,UAAlBA,EAAM,GAAGzZ,OACnCyZ,EAAM,GAAGyzC,OAAS+F,GAAcp7B,EAAQR,OAAQrzB,GAEpD,CACA,OAAOqzB,CACT,CAcA,SAAS69B,GAAU/zB,EAAKtJ,EAASs9B,EAAON,EAASO,EAAQC,GAGvD,MAAMC,EAAwB,IAAZT,EAAgB,cAA4B,IAAZA,EAAgB,iBAAmB,YAYpE,IAAbM,EAAM,KACRE,EAAa52D,IAAMjD,OAAO4F,OAAO,CAAC,EAAGm0D,GAAS19B,EAAQR,OAAQ89B,EAAM,KACpEh0B,EAAI5H,IAAI47B,EAAM,GAAI,EAAG,CAAC,CAAC,OAAQE,EAAcx9B,MAU/C,MAAM4E,EAAM84B,GAAS19B,EAAQR,OAAQ89B,EAAM,IAkB3C,GAjBAE,EAAe,CACbr1D,KAAMs1D,EACNh3D,MAAO9C,OAAO4F,OAAO,CAAC,EAAGq7B,GAEzBh+B,IAAKjD,OAAO4F,OAAO,CAAC,EAAGq7B,IAEzB0E,EAAI5H,IAAI47B,EAAM,GAAI,EAAG,CAAC,CAAC,QAASE,EAAcx9B,KAW7B,IAAbs9B,EAAM,GAAU,CAClB,MAAMK,EAAeD,GAAS19B,EAAQR,OAAQ89B,EAAM,IAC9CM,EAAaF,GAAS19B,EAAQR,OAAQ89B,EAAM,IAE5CO,EAAa,CACjB11D,KA5Cc,eA6Cd1B,MAAO9C,OAAO4F,OAAO,CAAC,EAAGo0D,GACzB/2D,IAAKjD,OAAO4F,OAAO,CAAC,EAAGq0D,IAGzB,GADAt0B,EAAI5H,IAAI47B,EAAM,GAAI,EAAG,CAAC,CAAC,QAASO,EAAY79B,KAC5B,IAAZg9B,EAAe,CAEjB,MAAMv2D,EAAQu5B,EAAQR,OAAO89B,EAAM,IAC7B12D,EAAMo5B,EAAQR,OAAO89B,EAAM,IAMjC,GALA72D,EAAM,GAAGG,IAAMjD,OAAO4F,OAAO,CAAC,EAAG3C,EAAI,GAAGA,KACxCH,EAAM,GAAG0B,KAAO,YAChB1B,EAAM,GAAGk5B,YAAc,OAGnB29B,EAAM,GAAKA,EAAM,GAAK,EAAG,CAC3B,MAAMrC,EAAIqC,EAAM,GAAK,EACfpC,EAAIoC,EAAM,GAAKA,EAAM,GAAK,EAChCh0B,EAAI5H,IAAIu5B,EAAGC,EAAG,GAChB,CACF,CACA5xB,EAAI5H,IAAI47B,EAAM,GAAK,EAAG,EAAG,CAAC,CAAC,OAAQO,EAAY79B,IACjD,CAcA,YALehK,IAAXunC,IACFC,EAAa52D,IAAMjD,OAAO4F,OAAO,CAAC,EAAGm0D,GAAS19B,EAAQR,OAAQ+9B,IAC9Dj0B,EAAI5H,IAAI67B,EAAQ,EAAG,CAAC,CAAC,OAAQC,EAAcx9B,KAC3Cw9B,OAAexnC,GAEVwnC,CACT,CAYA,SAASJ,GAAc9zB,EAAKtJ,EAAS7zB,EAAOk3C,EAAOya,GAEjD,MAAMC,EAAQ,GACRC,EAAUN,GAAS19B,EAAQR,OAAQrzB,GACrC2xD,IACFA,EAAUl3D,IAAMjD,OAAO4F,OAAO,CAAC,EAAGy0D,GAClCD,EAAMpkC,KAAK,CAAC,OAAQmkC,EAAW99B,KAEjCqjB,EAAMz8C,IAAMjD,OAAO4F,OAAO,CAAC,EAAGy0D,GAC9BD,EAAMpkC,KAAK,CAAC,OAAQ0pB,EAAOrjB,IAC3BsJ,EAAI5H,IAAIv1B,EAAQ,EAAG,EAAG4xD,EACxB,CAOA,SAASL,GAASl+B,EAAQrzB,GACxB,MAAMyV,EAAQ4d,EAAOrzB,GACfomB,EAAoB,UAAb3Q,EAAM,GAAiB,QAAU,MAC9C,OAAOA,EAAM,GAAG2Q,EAClB,CC5yBA,MAAM0rC,GAAgB,CACpBj5D,KAAM,gBACN+9B,SAuBF,SAA+BJ,EAASC,EAAIwC,GAC1C,MAAMhC,EAAOp3B,KACb,OAYA,SAAcsV,GACZ,GAEkB,OAAlB8hB,EAAK5C,WAGJ4C,EAAKrC,mCACJ,OAAOqE,EAAI9jB,GAMb,OAJAqhB,EAAQz6B,MAAM,iBACdy6B,EAAQz6B,MAAM,uBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,uBACNwiC,CACT,EAYA,SAASA,EAAOhpB,GAId,OAAI8gB,GAA0B9gB,IAC5BqhB,EAAQz6B,MAAM,+BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,+BACN+pC,GAEI,KAATvwB,GAAwB,MAATA,GACjBqhB,EAAQz6B,MAAM,6BACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,6BACN+pC,GAEFzM,EAAI9jB,EACb,CAYA,SAASuwB,EAAMvwB,GACb,OAAa,KAATA,GACFqhB,EAAQz6B,MAAM,uBACdy6B,EAAQG,QAAQxhB,GAChBqhB,EAAQ76B,KAAK,uBACb66B,EAAQ76B,KAAK,iBACN29B,GAEFL,EAAI9jB,EACb,CAKA,SAASmkB,EAAMnkB,GAEb,OAAI6gB,GAAmB7gB,GACdshB,EAAGthB,GAKR+gB,GAAc/gB,GACTqhB,EAAQl1B,MAAM,CACnBs1B,SAAUm7B,IACTt7B,EAAIwC,EAFAzC,CAEKrhB,GAIP8jB,EAAI9jB,EACb,CACF,GAMA,SAAS48C,GAAkBv7B,EAASC,EAAIwC,GACtC,OAAO1C,GAAaC,GAYpB,SAAerhB,GAKb,OAAgB,OAATA,EAAgB8jB,EAAI9jB,GAAQshB,EAAGthB,EACxC,GAlBoC,aAmBtC,CC1IA,MAAM,GAAe,CAAC,EAWP,SAAS68C,GAAUp5D,GAGhC,MACM82B,EAAW92B,GAAW,GACtB4P,EAFgC,KAEpBA,OAEZypD,EACJzpD,EAAKypD,sBAAwBzpD,EAAKypD,oBAAsB,IACpDC,EACJ1pD,EAAK0pD,yBAA2B1pD,EAAK0pD,uBAAyB,IAC1DC,EACJ3pD,EAAK2pD,uBAAyB3pD,EAAK2pD,qBAAuB,IAE5DF,EAAoBzkC,KCNf,SAAa50B,GAClB,OAAOk8B,GAAkB,CRclB,CACL5d,KAAI,IC1BC,CACLgiB,SAAU,CACR,GAAM,CACJrgC,KAAM,wBACN+9B,SAAUo3B,GACVz2B,aAAc,CACZX,SAAUu3B,IAEZxyD,KAAMyyD,KAGVl3C,KAAM,CACJ,GAAM,CACJre,KAAM,kBACN+9B,SAAUg3B,IAEZ,GAAM,CACJ/0D,KAAM,2BACN08B,IAAK,QACLqB,SAAU42B,GACV3vB,UAAW6vB,MONfW,GAAiBz1D,GHjBZ,CACL+/B,KAAM,CACJS,KAAM,CACJvgC,KAAM,QACN+9B,SAAUw4B,GACVj1B,WAAYq2B,MCVX,CACLt5C,KAAM,CACJ,GAAM46C,MEwBZ,CDF2BM,CAAI1iC,IAC7BwiC,EAAuB1kC,KERhB,CxDZA,CACL2c,WAAY,CAACyZ,IACb7nD,MAAO,CACLs2D,gBAAiB/O,GACjBgP,qBAAsB/O,GACtBgP,oBAAqBhP,GACrBiP,mBAAoBjP,IAEtB5nD,KAAM,CACJ02D,gBAAiB1O,GACjB2O,qBAAsB5O,GACtB6O,oBAAqB/O,GACrBgP,mBAAoB/O,KCbjB,CACL1nD,MAAO,CACL02D,sBAAuB/N,GACvBgO,iCAAkC/N,GAClCgO,gBAAiB7N,GACjB8N,sBAAuB7N,IAEzBppD,KAAM,CACJ82D,sBAAuB5N,GACvB6N,iCAAkC9N,GAClC+N,gBAAiB1N,GACjB2N,sBAAuB5N,KCMpB,CACL5a,eAAgB,CAAC,UACjBruC,MAAO,CAACyyD,cAAe3I,IACvBlqD,KAAM,CAAC6yD,cAAe1I,K2CDjB,CACL/pD,MAAO,CACLm7C,MAAO+R,GACP4J,UAAWvJ,GACXwJ,YAAaxJ,GACbhS,SAAU+R,IAEZ1tD,KAAM,CACJwtC,SAAUogB,GACVrS,MAAOkS,GACPyJ,UAAW,GACXC,YAAa,GACbxb,SAAU,KClCP,CACL37C,KAAM,CACJo3D,0BAA2BhI,GAC3BiI,4BAA6BjI,GAC7B5pB,UAAW6pB,OQqBfmH,EAAqB3kC,KEUhB,SAAuB50B,GAC5B,MAAO,CACLm8B,WAAY,CxDRP,CACLuxB,OAAQ,CACN,CACEjE,UAAW,IACX/sB,OAAQ,aACRgE,MAAO,YACP8pB,eACAC,mBAEF,CACEhB,UAAW,IACX/sB,OAAQ,OACRgE,MAAO,YACP8pB,eACAC,mBAEF,CACEhB,UAAW,IACX/sB,OAAQ,OACRgE,MAAO,MACP8pB,eACAC,qBCvBC,CAELiD,OAAQ,CAAC,CAACjE,UAAW,IAAKe,YAAa,CAAC,WAAY,QAAS,eAC7DpL,SAAU,CAACH,sBAAoB3B,kBAAiB,KCK3C,CACLoQ,OAAQ,CACN,CACEjE,UAAW,IACXe,YAAa,WACbC,eAAgBuC,KAGpB5N,SAAU,CAAC/B,OAAQ8P,KsDFjByD,GAAmB5wD,GVxBhB,CACL0tD,OAAQ,CAAC,CAAC9rB,SAAS,EAAM6nB,UAAW,IAAK/oB,MAAO,UAChD0e,SAAU,CAACxM,SAAU2f,MU0BzB,CFpB4B8H,CAAcvjC,GAC1C,CG/BA,MAAMwjC,GAAK,OACL,GAAO,kBAkCb,SAASC,GAAkBn6D,GACzB,MAAMi4C,EAAQ,WAAWI,KAAKr4C,GAC9B,OAAOi4C,EAAQA,EAAM,GAAK,GAC5B,CAOA,SAASmiB,KACP,MAAO,GACT,C,eClCO,MAAM,GAAW,GAAM,OAUjB,GAAa,GAAM,SAUhC,SAAS,GAAMp3D,GACb,OAQA,SAAe0tB,GACb,MAAMF,EAASE,GAAQA,EAAKrsB,UAAYqsB,EAAKrsB,SAASrB,IAAU,CAAC,EAEjE,GACwB,iBAAfwtB,EAAMG,MACbH,EAAMG,KAAO,GACW,iBAAjBH,EAAMI,QACbJ,EAAMI,OAAS,EAEf,MAAO,CACLD,KAAMH,EAAMG,KACZC,OAAQJ,EAAMI,OACdlG,OAC0B,iBAAjB8F,EAAM9F,QAAuB8F,EAAM9F,QAAU,EAChD8F,EAAM9F,YACNmG,EAGZ,CACF,CAUO,SAAS,GAASH,GACvB,MAAMpvB,EAAQ,GAAWovB,GACnBjvB,EAAM,GAASivB,GAErB,GAAIpvB,GAASG,EACX,MAAO,CAACH,QAAOG,MAEnB,CC7BO,MA0EM,GAWX,SAKY4E,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,GAAoB,iBAATA,EACT,OAAOnH,MAAMF,QAAQqH,GAe7B,SAAoB20C,GAElB,MAAMhzC,EAAS,GACf,IAAIhB,GAAS,EAEb,OAASA,EAAQg0C,EAAMn6C,QACrBmH,EAAOhB,GAAS,GAAQg0C,EAAMh0C,IAGhC,OAAO,GAAYszC,GAMnB,SAASA,KAAO9hB,GACd,IAAIxxB,GAAS,EAEb,OAASA,EAAQgB,EAAOnH,QACtB,GAAImH,EAAOhB,GAAOi0C,MAAMp0C,KAAM2xB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqC,CAAWnyB,GA+ChD,SAAsBiC,GACpB,MAAM6yC,EAAuD,EAE7D,OAAO,GAAYnf,GAMnB,SAASA,EAAItL,GACX,MAAM0qB,EAAsD,EAK5D,IAAI97C,EAEJ,IAAKA,KAAOgJ,EACV,GAAI8yC,EAAa97C,KAAS67C,EAAc77C,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwD,CAAa+G,GAG/D,GAAoB,iBAATA,EACT,OA0ER,SAAqBiC,GACnB,OAAO,GAAYtF,GAKnB,SAASA,EAAK0tB,GACZ,OAAOA,GAAQA,EAAK1tB,OAASsF,CAC/B,CACF,CAnFe,CAAYjC,GAGrB,MAAM,IAAI4qB,MAAM,+CAEpB,EAsFF,SAAS,GAAYsqB,GACnB,OAMA,SAAev7C,EAAOgH,EAAO6qB,GAC3B,OAAOgG,QACL,GAAe73B,IACbu7C,EAAap8C,KACX0H,KACA7G,EACiB,iBAAVgH,EAAqBA,OAAQ6pB,EACpCgB,QAAUhB,GAGlB,CACF,CAEA,SAAS,KACP,OAAO,CACT,CAMA,SAAS,GAAe7wB,GACtB,OAAiB,OAAVA,GAAmC,iBAAVA,GAAsB,SAAUA,CAClE,CCnEA,MAAM,GAAQ,GAKD,IAAW,EAKX,IAAO,EAsDb,SAAS,GAAa6yB,EAAMxsB,EAAMu1C,EAAS1iB,GAEhD,IAAI5wB,EAEgB,mBAATjC,GAA0C,mBAAZu1C,GACvC1iB,EAAU0iB,EAEVA,EAAUv1C,GAGViC,EAAQjC,EAGV,MAAMkL,EAAK,GAAQjJ,GACbsS,EAAOse,GAAW,EAAI,GAS5B,SAAS2iB,EAAQnrB,EAAM1pB,EAAO80C,GAC5B,MAAM97C,EACJ0wB,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAG7C,GAA0B,iBAAf1wB,EAAMgD,KAAmB,CAClC,MAAMnD,EAEqB,iBAAlBG,EAAMu0B,QACTv0B,EAAMu0B,QAEc,iBAAfv0B,EAAMH,KACXG,EAAMH,UACNgxB,EAENryB,OAAOK,eAAek9C,EAAO,OAAQ,CACnC/7C,MACE,SAAiB0wB,EAAK1tB,MAAQnD,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOk8C,EAEP,SAASA,IAEP,IAEIC,EAEAtxB,EAEAuxB,EANAnvB,EAAS,GAQb,KAAKzmB,GAAQkL,EAAGmf,EAAM1pB,EAAO80C,EAAQA,EAAQj7C,OAAS,SAAMgwB,MAE1D/D,EA0CR,SAAkB9sB,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CAAC,GAAUA,GAGpB,OAAOA,QAAwC,GAAQ,CAACA,EAC1D,CApDiB,CAAS47C,EAAQlrB,EAAMorB,IAE5BhvB,EAAO,KAAO,IAChB,OAAOA,EAIX,GAAI,aAAc4D,GAAQA,EAAK1uB,SAAU,CACvC,MAAMm6C,EAA0C,EAEhD,GAAIA,EAAan6C,UArHL,SAqHiB8qB,EAAO,GAIlC,IAHApC,GAAUwO,EAAUijB,EAAan6C,SAASnB,QAAU,GAAK+Z,EACzDqhC,EAAeH,EAAQ3iB,OAAOgjB,GAEvBzxB,GAAU,GAAKA,EAASyxB,EAAan6C,SAASnB,QAAQ,CAC3D,MAAMk0B,EAAQonB,EAAan6C,SAAS0oB,GAIpC,GAFAsxB,EAAYH,EAAQ9mB,EAAOrK,EAAQuxB,EAAvBJ,GAERG,EAAU,KAAO,GACnB,OAAOA,EAGTtxB,EAC0B,iBAAjBsxB,EAAU,GAAkBA,EAAU,GAAKtxB,EAAS9P,CAC/D,CAEJ,CAEA,OAAOkS,CACT,CACF,CAzEA+uB,CAAQhpB,OAAMhC,EAAW,GAAzBgrB,EA0EF,CCrWA,MAAM,GAAe,CAAC,EAUP,SAASwe,GAAaz6D,GACnC,MAAM82B,EAAW92B,GAAW,GACtB06D,EAAkB5jC,EAAS4jC,iBAAmBC,GAC9CC,EAAsB,IAAIphB,OAAO,OAAOkhB,EAAgB3jC,KAAK,UAC7D5Z,GAAyB,IAAlB2Z,EAAS3Z,KAUtB,OAAO,SAAU8V,GACf,GAAaA,EAAM,QAAQ,SAAUnC,EAAMorB,GACzC,MAAM97C,EJjBL,SAA4BA,EAAOJ,GACnCA,EAEyB,iBAAZA,IAChBA,EAAU,CAACgE,MAAOhE,IAFlBA,EAAU,CAAC,EAKb,MAAM4G,EAAU5G,EAAQ66D,oBAAsBN,GAAoBC,GAElE,OAAOhjC,OAAOp3B,GAAOwG,QACD,SAAlB5G,EAAQgE,MAAmB,GAAOs2D,GAClCt6D,EAAQk3B,KA4BZ,SAAqBtwB,GACnB,OAAOk0D,EAWP,SAASA,EAAc16D,EAAOgH,EAAOg1B,GACnC,OAAiB,IAAVh1B,GAAeA,EAAQhH,EAAMa,SAAWm7B,EAAIn7B,OAC/C,GACA2F,EAAQxG,EACd,CACF,CA7CmB26D,CAAYn0D,GAAWA,EAE1C,CIIoBo0D,CAAmBlqC,EAAK1wB,MAAO,CAC3C4D,MAAO,OACPkzB,MAAM,IAGR,IAEG92B,EAAMgJ,SAAS,OAEf,GAAMhJ,IACLA,EAAM66D,WAAW,MACjB76D,EAAM66D,WAAW,OACjB76D,EAAM66D,WAAW,SAEnBL,EAAoBn0D,KAAKrG,GACzB,CACA,IAAI86D,GAAc,EACdj6D,EAASi7C,EAAQj7C,OAGrB,KAAOA,KAAU,CACf,MAAMgxB,EAASiqB,EAAQj7C,GACvB,GAAoB,SAAhBgxB,EAAO7uB,MAAmC,kBAAhB6uB,EAAO7uB,KAA0B,CAC7D83D,GAAc,EACd,KACF,CACF,CAGA,IAAInG,EAAc,CAChB3xD,KAAM,QACNovB,IAAKpyB,EACL8a,MAAO,KACP1M,IAAK,GACL/J,SAAU,GAASqsB,IAIjB3T,IAAS+9C,IACXnG,EAAc,CACZ3xD,KAAM,OACNovB,IAAKpyB,EACL8a,MAAO,KACP9Y,SAAU,CAAC2yD,GACXtwD,SAAU,GAASqsB,KAIvB,MAEM0mB,EAFS0E,EAAQA,EAAQj7C,OAAS,GAEhBmB,SACxBo1C,EAASA,EAASxlB,QAAQlB,IAASikC,CACrC,CACF,GACF,CACF,CAOO,MAAM4F,GAAyB,CACpC,OACA,MACA,OACA,MACA,MACA,MACA,Q,+CCrGF,MAAMQ,GAAgBC,IAAmB,IAAlB,SAAEh5D,GAAUg5D,EACjC,OACEC,EAAAA,cAACC,EAAAA,EAAOx2D,IAAG,CACTC,QAAS,CAAEgmB,QAAS,EAAG8E,EAAG,IAC1B0rC,YAAa,CAAExwC,QAAS,EAAG8E,EAAG,GAC9B2rC,SAAU,CAAEC,MAAM,GAClBj4D,WAAY,CAAER,SAAU,KAEvBZ,EACU,EAsFjB,OAlFsBs5D,IAAA,IAAC,YAAEC,GAAaD,EAAA,OACpCL,EAAAA,cAACF,GAAa,KACZE,EAAAA,cAACO,GAAAA,EAAM,CAACpgD,MAAM,QAAQsS,QAAS,EAAG+tC,GAAI,IACpCR,EAAAA,cAACS,EAAAA,EAAG,CAACC,EAAE,QACLV,EAAAA,cAACW,EAAAA,EAAO,CACNvtD,GAAG,KACH+L,KAAK,MACLyhD,WAAW,uCACXC,OAAO,OACPL,GAAI,GAEHF,EAAYzgD,OAGdygD,EAAYQ,aACXd,EAAAA,cAACe,EAAAA,EAAI,CAAC17C,SAAS,KAAKhE,MAAM,WAAWm/C,GAAI,GACtCF,EAAYQ,cAKnBd,EAAAA,cAACgB,GAAAA,EAAM,CAACvuC,QAAS,EAAGxS,KAAK,OAAOE,MAAM,cACpC6/C,EAAAA,cAACgB,GAAAA,EAAM,CAACvuC,QAAS,EAAGtS,MAAM,cACvBmgD,EAAY34D,UACXq4D,EAAAA,cAACS,EAAAA,EAAG,KACFT,EAAAA,cAACe,EAAAA,EAAI,CAACr7C,WAAW,SAASrE,MAAM,WAAWgE,SAAS,MAAK,YACzD26C,EAAAA,cAACe,EAAAA,EAAI,CAAC1/C,MAAM,YAAYi/C,EAAY34D,WAGvC24D,EAAYluD,MACX4tD,EAAAA,cAACS,EAAAA,EAAG,KACFT,EAAAA,cAACe,EAAAA,EAAI,CAACr7C,WAAW,SAASrE,MAAM,WAAWgE,SAAS,MAAK,QACzD26C,EAAAA,cAACe,EAAAA,EAAI,CAAC1/C,MAAM,YAAYi/C,EAAYluD,OAGvCkuD,EAAYW,UACXjB,EAAAA,cAACkB,EAAAA,EAAI,CACHtrD,KAAM0qD,EAAYW,SAClBE,YAAU,EACVC,OAAQ,CAAEv4C,eAAgB,QAC1Bw4C,GAAI,GAEJrB,EAAAA,cAACS,EAAAA,EAAG,CACFrtD,GAAG,SACHiO,MAAM,WACN+/C,OAAQ,CACN//C,MAAO,aACPxT,UAAW,oBAEb1F,WAAW,YAEX63D,EAAAA,cAAA,OAAKp1D,OAAO,KAAKJ,MAAM,KAAK8hB,KAAK,eAAetmB,QAAQ,aACtDg6D,EAAAA,cAAA,QAAM/5D,EAAE,kkBAQnBq6D,EAAYgB,WAAahB,EAAYgB,UAAU17D,OAAS,GACvDo6D,EAAAA,cAACuB,GAAAA,EAAI,CAAC9uC,QAAS,GACZ6tC,EAAYgB,UAAUp4B,KAAIs4B,GACzBxB,EAAAA,cAACyB,GAAAA,EAAQ,CAACp9D,IAAKm9D,GACbxB,EAAAA,cAAC0B,GAAAA,GAAG,CACFviD,KAAK,KACLwiD,YAAY,SACZC,QAAQ,SACRC,aAAa,OACbC,GAAI,EACJC,GAAI,GAEHP,QAOC,ECoHlB,OAtMsBzB,IAA0B,IAAzB,QAAEiC,EAAO,OAAEC,GAAQlC,EAExC,MAAMmC,EAAWF,EAAQG,gBAInBC,GAAYnC,EAAAA,EAAAA,GAAOQ,EAAAA,GAWnB4B,EAAY,CAChBC,GAAIjC,IAAmB,IAAlB,SAAEt5D,GAAUs5D,EACf,MAAMrqD,EAAKusD,IAAQx7D,EAAU,CAAEy7D,OAAO,IACtC,OACExC,EAAAA,cAACyC,EAAAA,GAAO,CAAC79D,KAAMoR,EAAIlN,UAAU,WAC3Bk3D,EAAAA,cAACW,EAAAA,EAAO,CACNvtD,GAAG,KACHiS,SAAS,OACTg8C,GAAI,GACJb,GAAI,EACJxqD,GAAIA,EACJqL,MAAM,WAELta,GAEK,EAGd27D,GAAIC,IAAmB,IAAlB,SAAE57D,GAAU47D,EACf,MAAM3sD,EAAKusD,IAAQx7D,EAAU,CAAEy7D,OAAO,IACtC,OACExC,EAAAA,cAACyC,EAAAA,GAAO,CAAC79D,KAAMoR,EAAIlN,UAAU,WAC3Bk3D,EAAAA,cAACW,EAAAA,EAAO,CACNvtD,GAAG,KACHiS,SAAS,SACTg8C,GAAI,GACJb,GAAI,EACJxqD,GAAIA,EACJqL,MAAM,WAELta,GAEK,EAGd67D,GAAIC,IAAmB,IAAlB,SAAE97D,GAAU87D,EACf,MAAM7sD,EAAKusD,IAAQx7D,EAAU,CAAEy7D,OAAO,IACtC,OACExC,EAAAA,cAACyC,EAAAA,GAAO,CAAC79D,KAAMoR,EAAIlN,UAAU,WAC3Bk3D,EAAAA,cAACW,EAAAA,EAAO,CAACvtD,GAAG,KAAKiS,SAAS,UAAUg8C,GAAI,EAAGb,GAAI,EAAGxqD,GAAIA,GACnDjP,GAEK,EAGd+7D,GAAIC,IAAmB,IAAlB,SAAEh8D,GAAUg8D,EACf,MAAM/sD,EAAKusD,IAAQx7D,EAAU,CAAEy7D,OAAO,IACtC,OACExC,EAAAA,cAACyC,EAAAA,GAAO,CAAC79D,KAAMoR,EAAIlN,UAAU,WAC3Bk3D,EAAAA,cAACW,EAAAA,EAAO,CAACvtD,GAAG,KAAKiS,SAAS,OAAOg8C,GAAI,EAAGb,GAAI,EAAGxqD,GAAIA,GAChDjP,GAEK,EAGdi8D,GAAIC,IAAmB,IAAlB,SAAEl8D,GAAUk8D,EACf,MAAMjtD,EAAKusD,IAAQx7D,EAAU,CAAEy7D,OAAO,IACtC,OACExC,EAAAA,cAACyC,EAAAA,GAAO,CAAC79D,KAAMoR,EAAIlN,UAAU,WAC3Bk3D,EAAAA,cAACW,EAAAA,EAAO,CAACvtD,GAAG,KAAKiS,SAAS,OAAOg8C,GAAI,EAAGb,GAAI,EAAGxqD,GAAIA,GAChDjP,GAEK,EAGdm8D,GAAIC,IAAmB,IAAlB,SAAEp8D,GAAUo8D,EACf,MAAMntD,EAAKusD,IAAQx7D,EAAU,CAAEy7D,OAAO,IACtC,OACExC,EAAAA,cAACyC,EAAAA,GAAO,CAAC79D,KAAMoR,EAAIlN,UAAU,WAC3Bk3D,EAAAA,cAACW,EAAAA,EAAO,CAACvtD,GAAG,KAAKiS,SAAS,OAAOg8C,GAAI,EAAGb,GAAI,EAAGxqD,GAAIA,GAChDjP,GAEK,EAKdq8D,EAAGC,IAAA,IAAC,SAAEt8D,GAAUs8D,EAAA,OAAKrD,EAAAA,cAACe,EAAAA,EAAI,CAACP,GAAI,GAAIz5D,EAAgB,EACnD8zD,EAAGyI,IAAA,IAAC,KAAE1tD,EAAI,SAAE7O,GAAUu8D,EAAA,OACpBtD,EAAAA,cAACkB,EAAAA,EAAI,CAACtrD,KAAMA,EAAMurD,YAAU,EAAC9/C,MAAM,WAAW3c,OAAO,UAClDqC,EACI,EAETw8D,GAAIC,IAAA,IAAC,KAAE5tD,EAAI,SAAE7O,GAAUy8D,EAAA,OAErBxD,EAAAA,cAACyD,EAAAA,GAAI,KACF18D,EAASmiC,KAAIw6B,IACZ,GAAgB,OAAZA,EAAG37D,KACL,OACEi4D,EAAAA,cAAC2D,EAAAA,GAAQ,KACP3D,EAAAA,cAAC4D,EAAAA,GAAQ,CAACxwD,GAAIywD,EAAAA,IACd7D,EAAAA,cAACe,EAAAA,EAAI,CAAC3tD,GAAG,QAAQswD,EAAGh9D,MAAMK,UAGhC,IAEG,EAGT+8D,IAAKC,IAAmB,IAAlB,IAAEz+D,EAAG,IAAE6N,GAAK4wD,EAChBC,QAAQC,IAAI,OAAQ3+D,GAEpB,MAAM4+D,EAAY5+D,EAAIo3B,MAAM,KAAKxC,MAC3Bod,EAAQ2qB,EAAO3mC,MAAKwoC,GAAOA,EAAIx+D,IAAIyI,SAASm2D,KAElD,GAAI5sB,EAAO,CACT,MAAM6sB,GAAkBC,EAAAA,EAAAA,GAAS9sB,EAAM6sB,iBACvC,OACEnE,EAAAA,cAACqE,EAAAA,EAAW,CACV/sB,MAAO6sB,EACPhxD,IAAKA,EACLxK,MAAO,CAAE27D,SAAU,MAAOC,UAAW,QAG3C,CAGA,OACEvE,EAAAA,cAAA,OACE16D,IAAKA,EAAIs6D,WAAW,WAAat6D,EAAM,UAAUA,IACjD6N,IAAKA,EACLxK,MAAO,CAAE27D,SAAU,SACnB,GAKR,OACEtE,EAAAA,cAACoC,EAAS7+D,OAAA4F,OAAA,CACRi6D,EAAG,CAAE5tB,KAAM,EAAGgvB,GAAI,IAzII,CACxB96D,QAAS,CAAEgmB,QAAS,GACpBwwC,YAAa,CAAExwC,QAAS,GACxBywC,SAAU,CAAEC,MAAM,GAClBj4D,WAAY,CAAER,SAAU,KAsID,CACrBqO,GAAG,2BACHyuD,GAAI,CACF,uBAAwB,CACtB75D,OAAQ,OACRJ,MAAO,OAGT,6BAA8B,CAC5Bq3D,aAAc,MACd6C,gBAAiB,WAGnB,mCAAoC,CAClCA,gBAAiB,WAGnB,oCAAqC,CACnCA,gBAAiB,WAGnB,6BAA8B,CAC5B7C,aAAc,MACd6C,gBAAiB,WAGnB,mCAAoC,CAClCA,gBAAiB,WAGnB,oCAAqC,CACnCA,gBAAiB,cAKrB1E,EAAAA,cAAC2E,GAAa,CAACrE,YAAa0B,EAAQ1B,cAGpCN,EAAAA,cAAA,eACEA,EAAAA,cAAC4E,GAAa,CACZrX,cAAe,CAAC4Q,GAAKiB,IACrBj4D,WAAYk7D,GAEXH,IAGK,EC3HhB,OA3FwBnC,IAA4B,IAA3B,SAAE8E,EAAQ,QAAEj+D,GAASm5D,EAC5C,OACEC,EAAAA,cAACS,EAAAA,EAAG,CACFrtD,GAAG,MACHhK,SAAS,SACT0B,IAAI,OACJs4D,EAAG,EACH0B,WAAW,MACXpkD,YAAY,aACZH,WAAW,OACXshD,aAAa,KACbkD,UAAU,qBACVC,UAAU,OACV78D,WAAW,WACX88D,QAAS,CACPhxD,QAAS,KACT7K,SAAU,WACV0B,IAAK,EACLD,KAAM,EACN8yB,MAAO,EACPunC,OAAQ,EACRrD,aAAc,KACdthD,WAAY,wEACZ4kD,eAAgB,YAChBC,QAAS,GAEXhE,OAAQ,CACN1gD,YAAa,aACbukD,QAAS,CACP1kD,WAAY,wEACZ4kD,eAAgB,cAGpBE,IAAK,CACH,uBAAwB,CAAE76D,MAAO,OACjC,6BAA8B,CAC5Bk6D,gBAAiB,eAEnB,6BAA8B,CAC5BA,gBAAiB,2BACjB7C,aAAc,OAEhB,mCAAoC,CAClC6C,gBAAiB,8BAIrB1E,EAAAA,cAACe,EAAAA,EAAI,CACH17C,SAAS,KACTK,WAAW,SACXrE,MAAM,aACNm/C,GAAI,GACL,gBAGDR,EAAAA,cAACO,GAAAA,EAAM,CAACpgD,MAAM,UAAUsS,QAAS,IAC9BoyC,EAAS37B,KAAI,CAACiE,EAASphC,IACtBi0D,EAAAA,cAACkB,EAAAA,GAAI,CACH78D,IAAK0H,EACL8nB,GAAIsZ,EAAQn3B,GACZsvD,KAAK,EACLC,QAAQ,EACR91C,QAAS,IACT9nB,SAAU,IACVkR,QAASjS,EACT+B,MAAO,CAAEkgB,eAAgB,SAEzBm3C,EAAAA,cAACe,EAAAA,EAAI,CACH17C,SAAS,KACTmgD,GAAoB,EAAhBr4B,EAAQs4B,MACZ1D,GAAI,EACJv2C,OAAO,UACPnK,MAAyB,IAAlB8rB,EAAQs4B,MAAc,aAAe,WAC5C//C,WAA8B,IAAlBynB,EAAQs4B,MAAc,SAAW,SAC7C/1C,QAA2B,IAAlByd,EAAQs4B,MAAc,EAAI,GACnCrE,OAAQ,CACN//C,MAAO,aACPqjD,gBAAiB,4BACjB7C,aAAc,MAEhB15D,WAAW,YAEVglC,EAAQttB,WAKb,EC4CV,OAvGwBkgD,IAAe,IAAD2F,EAAA,IAAb,KAAEnxD,GAAMwrD,EAC/B,MAAM,eAAE4F,GAAmBpxD,GACpBswD,EAAUe,GAAe5F,EAAAA,SAAe,KACxC6F,EAAWC,GAAgB9F,EAAAA,UAAe,GAWjD,OATAA,EAAAA,WAAgB,KACd4F,EAnBgC1D,KAClC,MAAM6D,EAAe,qBASrB,OAR0B7D,EACvBxlC,MAAM,MACNnQ,QAAOmJ,GAAQA,EAAKsnB,MAAM+oB,KAC1B78B,KAAI88B,IACH,MAAMP,EAAQO,EAAWhpB,MAAM,OAAO,GAAGp3C,OACnCia,EAAQmmD,EAAWz6D,QAAQ,aAAc,IAAIswB,OACnD,MAAO,CAAEhc,QAAO7J,GAAIusD,IAAQ1iD,EAAO,CAAE2iD,OAAO,IAASiD,QAAO,GAExC,EASVQ,CAA4BN,EAAexD,kBACvD+D,EAAAA,GAAUC,SACH,KACLC,EAAAA,GAAOC,YAAYhpC,OAAO,SAC1B+oC,EAAAA,GAAOC,YAAYhpC,OAAO,MAAM,IAEjC,CAACsoC,IAGF3F,EAAAA,cAACsG,EAAAA,EAAM,KAELtG,EAAAA,cAACS,EAAAA,EAAG,CACFn2D,QAAS,CAAEkrC,KAAM,QAAS+wB,GAAI,QAC9Bn9D,SAAS,QACT87D,OAAO,OACPvnC,MAAM,OACNynC,OAAO,MAEPpF,EAAAA,cAACwG,EAAAA,EAAU,CACT,aAAW,2BACXvpC,KAAM+iC,EAAAA,cAACl6D,EAAa,MACpB+S,QAASA,IAAMitD,GAAcD,GAC7BlE,YAAY,SACZE,aAAa,UAKjB7B,EAAAA,cAACv5D,EAAM,CACLE,OAAQk/D,EACRh/D,UAAU,QACVD,QAASA,IAAMk/D,GAAa,GAC5B3mD,KAAK,MAEL6gD,EAAAA,cAACyG,EAAAA,EAAa,MACdzG,EAAAA,cAACn2D,EAAa,KACZm2D,EAAAA,cAAC0G,EAAAA,EAAiB,MAClB1G,EAAAA,cAAC2G,EAAAA,EAAY,KAAC,YACd3G,EAAAA,cAAC4G,EAAAA,EAAU,KACT5G,EAAAA,cAAC6G,GAAe,CAAChC,SAAUA,EAAUj+D,QAASA,IAAMk/D,GAAa,QAMvE9F,EAAAA,cAAC8G,EAAAA,EAAS,CAACC,KAAK,eAAehF,GAAI,GACjC/B,EAAAA,cAACS,EAAAA,EAAG,CAACn2D,QAAQ,OAAO08D,IAAK,IAEvBhH,EAAAA,cAACS,EAAAA,EAAG,CAACwG,KAAK,IAAIF,KAAK,SACjB/G,EAAAA,cAACkH,GAAa,CACZlF,QAAS2D,EACT1D,QAA4C,QAApCyD,EAAAC,EAAerF,YAAY6G,iBAAS,IAAAzB,OAAA,EAApCA,EAAsCx8B,KAAIoO,IAAK,CACrDhyC,IAAKgyC,EAAM8vB,UACXjD,gBAAiB7sB,EAAM+vB,gBAAgBlD,sBAClC,MAKXnE,EAAAA,cAACS,EAAAA,EAAG,CACFn2D,QAAS,CAAEkrC,KAAM,OAAQ+wB,GAAI,SAC7B7F,EAAE,QACF4G,WAAY,EACZl+D,SAAS,WACTwB,OAAO,eAEPo1D,EAAAA,cAAC6G,GAAe,CAAChC,SAAUA,OAI1B,C,mBC1Gb,IAAI0C,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,EAAe,GA8OnB,SAASlsC,EAAKmsC,GACZ,OAAOA,EAAMA,EAAIz8D,QAAQu8D,EAAYC,GAAgBA,CACvD,CAnOA5iE,EAAOC,QAAU,SAAUuD,EAAOhE,GAChC,GAAqB,iBAAVgE,EACT,MAAM,IAAImvB,UAAU,mCAGtB,IAAKnvB,EAAO,MAAO,GAEnBhE,EAAUA,GAAW,CAAC,EAKtB,IAAIsjE,EAAS,EACTtyC,EAAS,EAOb,SAASuyC,EAAeF,GACtB,IAAItmB,EAAQsmB,EAAIhrB,MAAMwqB,GAClB9lB,IAAOumB,GAAUvmB,EAAM97C,QAC3B,IAAID,EAAIqiE,EAAI5f,YAvCF,MAwCVzyB,GAAUhwB,EAAIqiE,EAAIpiE,OAASD,EAAIgwB,EAASqyC,EAAIpiE,MAC9C,CAOA,SAASwD,IACP,IAAI/C,EAAQ,CAAEqvB,KAAMuyC,EAAQtyC,OAAQA,GACpC,OAAO,SAAUF,GAGf,OAFAA,EAAKrsB,SAAW,IAAI++D,EAAS9hE,GAC7B+hE,IACO3yC,CACT,CACF,CAUA,SAAS0yC,EAAS9hE,GAChBuF,KAAKvF,MAAQA,EACbuF,KAAKpF,IAAM,CAAEkvB,KAAMuyC,EAAQtyC,OAAQA,GACnC/pB,KAAK8qB,OAAS/xB,EAAQ+xB,MACxB,CAKAyxC,EAAS3kE,UAAUyQ,QAAUtL,EAE7B,IAAI0/D,EAAa,GAQjB,SAASrsC,EAAMssC,GACb,IAAIC,EAAM,IAAIvyC,MACZrxB,EAAQ+xB,OAAS,IAAMuxC,EAAS,IAAMtyC,EAAS,KAAO2yC,GAQxD,GANAC,EAAIpyC,OAASmyC,EACbC,EAAIC,SAAW7jE,EAAQ+xB,OACvB6xC,EAAI7yC,KAAOuyC,EACXM,EAAI5yC,OAASA,EACb4yC,EAAI7xC,OAAS/tB,GAEThE,EAAQ8jE,OAGV,MAAMF,EAFNF,EAAW9uC,KAAKgvC,EAIpB,CAQA,SAASvrB,EAAM3xC,GACb,IAAIq9D,EAAIr9D,EAAG+xC,KAAKz0C,GAChB,GAAK+/D,EAAL,CACA,IAAIV,EAAMU,EAAE,GAGZ,OAFAR,EAAeF,GACfr/D,EAAQA,EAAMuF,MAAM85D,EAAIpiE,QACjB8iE,CAJO,CAKhB,CAKA,SAASN,IACPprB,EAAMyqB,EACR,CAQA,SAASkB,EAAS/lD,GAChB,IAAIgmD,EAEJ,IADAhmD,EAAQA,GAAS,GACTgmD,EAAI90B,MACA,IAAN80B,GACFhmD,EAAM2W,KAAKqvC,GAGf,OAAOhmD,CACT,CAQA,SAASkxB,IACP,IAAIhe,EAAM1sB,IACV,GAnJgB,KAmJKT,EAAMysB,OAAO,IAlJvB,KAkJyCzsB,EAAMysB,OAAO,GAAjE,CAGA,IADA,IAAIzvB,EAAI,EAENoiE,GAAgBp/D,EAAMysB,OAAOzvB,KAtJpB,KAuJIgD,EAAMysB,OAAOzvB,IAxJZ,KAwJmCgD,EAAMysB,OAAOzvB,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDoiE,IAAiBp/D,EAAMysB,OAAOzvB,EAAI,GACpC,OAAOq2B,EAAM,0BAGf,IAAIgsC,EAAMr/D,EAAMuF,MAAM,EAAGvI,EAAI,GAM7B,OALAgwB,GAAU,EACVuyC,EAAeF,GACfr/D,EAAQA,EAAMuF,MAAMvI,GACpBgwB,GAAU,EAEHG,EAAI,CACT/tB,KApKa,UAqKb+rC,QAASk0B,GAvBgE,CAyB7E,CAQA,SAASp0B,IACP,IAAI9d,EAAM1sB,IAGNsE,EAAOsvC,EAAM0qB,GACjB,GAAKh6D,EAAL,CAIA,GAHAomC,KAGKkJ,EAAM2qB,GAAc,OAAO3rC,EAAM,wBAGtC,IAAI6sC,EAAM7rB,EAAM4qB,GAEZkB,EAAMhzC,EAAI,CACZ/tB,KA7LiB,cA8LjB0D,SAAUowB,EAAKnuB,EAAK,GAAGnC,QAAQg8D,EAAeQ,IAC9ChjE,MAAO8jE,EACHhtC,EAAKgtC,EAAI,GAAGt9D,QAAQg8D,EAAeQ,IACnCA,IAMN,OAFA/qB,EAAM6qB,GAECiB,CApBU,CAqBnB,CAyBA,OADAV,IAjBA,WACE,IAKIW,EALAC,EAAQ,GAMZ,IAJAL,EAASK,GAIDD,EAAOn1B,MACA,IAATm1B,IACFC,EAAMzvC,KAAKwvC,GACXJ,EAASK,IAIb,OAAOA,CACT,CAGOC,EACT,C,oCCzPA,IAAIC,EAAmBt9D,MAAQA,KAAKs9D,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACxD,EACA5lE,OAAOK,eAAewB,EAAS,aAAc,CAAEL,OAAO,IACtDK,EAAA,QAgBA,SAAuBuD,EAAOw9C,GAC1B,IAAIrqB,EAAc,KAClB,IAAKnzB,GAA0B,iBAAVA,EACjB,OAAOmzB,EAEX,IAAImtC,GAAe,EAAII,EAAsB30D,SAAS/L,GAClD2gE,EAAkC,mBAAbnjB,EAczB,OAbA8iB,EAAaM,SAAQ,SAAU31B,GAC3B,GAAyB,gBAArBA,EAAY7rC,KAAhB,CAGA,IAAI0D,EAAWmoC,EAAYnoC,SAAU1G,EAAQ6uC,EAAY7uC,MACrDukE,EACAnjB,EAAS16C,EAAU1G,EAAO6uC,GAErB7uC,KACL+2B,EAAcA,GAAe,CAAC,GAClBrwB,GAAY1G,EAP5B,CASJ,IACO+2B,CACX,EApCA,IAAIutC,EAAwBH,EAAgB,EAAQ,M,mBCDpD/jE,EAAOC,QAoBP,SAAe2tB,GACb,GAAsB,iBAAXA,EACT,OAAO,EAGT,IAAIiqB,EAAQjqB,EAAOiqB,MAAMwsB,GACzB,IAAKxsB,EACH,OAAO,EAGT,IAAIysB,EAA0BzsB,EAAM,GACpC,IAAKysB,EACH,OAAO,EAGT,GAAIC,EAAkBt+D,KAAKq+D,IACvBE,EAAqBv+D,KAAKq+D,GAC5B,OAAO,EAGT,OAAO,CACT,EAjCA,IAAID,EAAsB,uBAEtBE,EAAoB,sCACpBC,EAAuB,oB,mBCfzB,IAAsB/oB,IAYL,WACjB,IAAIgpB,EAAUrhB,KAAKwC,MAAM,k2KACrB8e,EAAUthB,KAAKwC,MAAM,wmCAEzB,SAASx/C,EAASwnB,EAAQpuB,GACxB,GAAsB,iBAAXouB,EACT,MAAM,IAAIiD,MAAM,qCAOlB,IAAI8zC,EAASD,GAJbllE,EAA8B,iBAAZA,EACd,CAAC+0D,YAAa/0D,GACdA,GAAW,CAAC,GAEamlE,SAAW,CAAC,EAErCpQ,OAAsC9jC,IAAxBjxB,EAAQ+0D,YAA4B,IAAM/0D,EAAQ+0D,YAEhE79B,OAAwBjG,IAAjBjxB,EAAQk3B,MAA4Bl3B,EAAQk3B,KAEnDkuC,EAAOh3C,EAAO/mB,YAAY0wB,MAAM,IAEjCstC,QAAO,SAAUn4C,EAAQo4C,GACxB,IAAIC,EAAaJ,EAAOG,GAIxB,YAHmBr0C,IAAfs0C,IAA0BA,EAAaN,EAAQK,SAChCr0C,IAAfs0C,IAA0BA,EAAaD,GACvCC,IAAexQ,IAAawQ,EAAa,KACtCr4C,EAASq4C,EAEb3+D,QAAQ5G,EAAQ04B,QAAU,2BAA4B,GAC3D,GAAG,IAkBL,OAhBI14B,EAAQk6C,SACVkrB,EAAOA,EAAKx+D,QAAQ,kBAAmB,KAGrCswB,IACFkuC,EAAOA,EAAKluC,QAKdkuC,EAAOA,EAAKx+D,QAAQ,OAAQmuD,GAExB/0D,EAAQ69D,QACVuH,EAAOA,EAAK99D,eAGP89D,CACT,CAMA,OAJAx+D,EAAQlG,OAAS,SAAU8kE,GACzB5mE,OAAO4F,OAAOygE,EAASO,EACzB,EAEO5+D,CACT,EAjEIpG,EAAOC,QAAUw7C,IACjBz7C,EAAOC,QAAP,QAA4Bw7C,G,mICIhC,MAAMkmB,GAAY,QAChB,SAAoBpgE,EAAOgC,GACzB,MAAM,UAAEI,EAAS,cAAEshE,KAAkBpjE,IAAS,OAAiBN,GACzD0D,GAAS,OAAe,YAAa1D,GAC3C,OAAuB,IAAAa,KACrB,IAAOkC,IACP,CACEf,MACAI,WAAW,IAAAa,IAAG,mBAAoBb,MAC/B9B,EACHgE,MAAO,IACFZ,KACAggE,GAAiB,CAClB9/D,QAAS,OACTC,cAAe,SACf8/D,WAAY,YAKtB,IAEFvD,EAAU/gE,YAAc,W,2FCzBxB,MAAMw6D,GAAS,E,QAAA,IAAW,CAAC75D,EAAOgC,KAAwB,IAAAnB,KAAI,IAAO,CAAE4Y,MAAO,YAAazZ,EAAOY,UAAW,SAAUoB,UACvH63D,EAAOx6D,YAAc,Q,6ICGrB,MAAOukE,EAAmBC,IAAgB,OAAc,CACtD3lE,KAAM,mBACN4lE,aAAc,kGAEV9I,GAAM,QAAW,CAACh7D,EAAOgC,KAC7B,MAAM0B,GAAS,OAAoB,MAAO1D,GACpC+jE,GAAW,OAAiB/jE,GAC5BgkE,EAAkB,CACtBpgE,QAAS,cACTqgE,cAAe,MACfN,WAAY,SACZ/F,SAAU,UACPl6D,EAAOwgE,WAEZ,OAAuB,IAAArjE,KAAI+iE,EAAmB,CAAEvlE,MAAOqF,EAAQrD,UAA0B,IAAAQ,KAAI,IAAO+X,KAAM,CAAE5W,SAAQ+hE,EAAUz/D,MAAO0/D,KAAqB,IAE5JhJ,EAAI37D,YAAc,OACD,QAAW,CAACW,EAAOgC,KAClC,MAAM0B,EAASmgE,IACf,OAAuB,IAAAhjE,KAAI,IAAO+X,KAAM,CAAE5W,MAAKmiE,UAAW,KAAMnkE,EAAOsE,MAAOZ,EAAO0M,OAAQ,IAEtF/Q,YAAc,YACH,QAAW,CAACW,EAAOgC,KAAwB,IAAAnB,KAAI,EAAAujE,EAAM,CAAEpiE,MAAKiiE,cAAe,MAAOI,UAAW,YAAarkE,MAClHX,YAAc,eACL,QAAW,CAACW,EAAOgC,KAAwB,IAAAnB,KAAI,EAAAujE,EAAM,CAAEpiE,MAAKiiE,cAAe,MAAOK,YAAa,YAAatkE,MACpHX,YAAc,eAC3B,MAAMklE,EAAgBvkE,IAA0B,IAAAa,KAAI,EAAAujE,EAAM,CAAEH,cAAe,UAAW3kE,QAAS,iBAAkBU,EAAOK,UAA0B,IAAAQ,KAChJ,OACA,CACE+kB,KAAM,eACNrmB,EAAG,iIAGPglE,EAAallE,YAAc,gBACJ,QACrB,CAACW,EAAOgC,KACN,MAAM,WAAEwiE,EAAU,SAAEnkE,KAAaC,GAASN,EAEpCykE,EAAY,CAChB7gE,QAAS,OACT+/D,WAAY,SACZe,eAAgB,SAChB3gE,QAAS,OALI8/D,IAMHc,aAEZ,OAAuB,IAAA9jE,KACrB,IAAO+jE,OACP,CACE5iE,MACA,aAAc,WACX1B,EACHe,KAAM,SACN8M,SAAUq2D,EACVlgE,MAAOmgE,EACPpkE,SAAUA,IAA4B,IAAAQ,KAAI0jE,EAAc,CAAC,IAE5D,IAGUllE,YAAc,gB,gJC7D7B,MAAMw7D,GAAO,QAAW,SAAe76D,EAAOgC,GAC5C,MAAM,QACJ+pB,EAAU,SAAQ,SAClB84C,EAAQ,SACRC,EAAQ,SACRzkE,EAAQ,QACR0kE,EAAO,UACPnkE,EAAS,MACT6Y,EAAK,UACLrX,EAAS,mBACT4iE,KACG1kE,GACDN,EACEilE,GAAY,IAAAC,UAChB,IAAMF,EAAqB,EAAAG,SAAS3iC,IAAIniC,GAAU,CAAC+yB,EAAO/tB,KAA0B,IAAAxE,KAAIk6D,EAAU,CAAE16D,SAAU+yB,GAAS/tB,KAAUhF,GACjI,CAACA,EAAU2kE,IAEb,OAAuB,IAAAnkE,KAAI,IAAOkC,IAAK,CAAEf,MAAKI,WAAW,IAAAa,IAAG,cAAeb,MAAe9B,EAAMD,UAA0B,IAAAQ,KACxH,IAAOg8D,GACP,CACEz6D,UAAW,oBACXkC,MAAO,CACLV,QAAS,OACTwhE,SAAU,OACVV,eAAgBK,EAChBpB,WAAYlqD,EACZ5V,cAAejD,EACfykE,cAAe,OACf/E,IAAKv0C,EACLu5C,UAAWT,EACXU,OAAQT,EACRhW,QAAS,KAEXzuD,SAAU4kE,KAGhB,IACApK,EAAKx7D,YAAc,OACnB,MAAM07D,GAAW,QACf,SAAmB/6D,EAAOgC,GACxB,MAAM,UAAEI,KAAc9B,GAASN,EAC/B,OAAuB,IAAAa,KACrB,IAAOm8D,GACP,CACEh7D,MACAsC,MAAO,CAAEV,QAAS,OAAQ+/D,WAAY,cACtCvhE,WAAW,IAAAa,IAAG,wBAAyBb,MACpC9B,GAGT,IAEFy6D,EAAS17D,YAAc,U","sources":["webpack://atharv-kulkarni/./node_modules/extend/index.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/icons/dist/esm/Hamburger.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/modal/drawer.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/transition/slide.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/modal/drawer-content.mjs","webpack://atharv-kulkarni/./node_modules/estree-util-is-identifier-name/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/hast-util-whitespace/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/esm/index.mjs","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/unist-util-stringify-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/vfile-message/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/comma-separated-tokens/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/space-separated-tokens/index.js","webpack://atharv-kulkarni/./node_modules/html-url-attributes/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-chunked/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://atharv-kulkarni/./node_modules/micromark-util-subtokenize/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-combine-extensions/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-character/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-space/index.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/initialize/content.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/initialize/document.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/content.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/initialize/flow.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/initialize/text.js","webpack://atharv-kulkarni/./node_modules/micromark-util-resolve-all/index.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/create-tokenizer.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/list.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-destination/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-label/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-title/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-whitespace/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-normalize-identifier/index.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://atharv-kulkarni/./node_modules/micromark-util-html-tag-name/index.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://atharv-kulkarni/./node_modules/decode-named-character-reference/index.dom.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://atharv-kulkarni/./node_modules/micromark-util-classify-character/index.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/constructs.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/preprocess.js","webpack://atharv-kulkarni/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-decode-string/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/postprocess.js","webpack://atharv-kulkarni/./node_modules/micromark/lib/parse.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/types.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-sanitize-uri/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://atharv-kulkarni/./node_modules/trim-lines/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/bail/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/trough/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unified/lib/callable-instance.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-autolink-literal/node_modules/ccount/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://atharv-kulkarni/./node_modules/markdown-table/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://atharv-kulkarni/./node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-phrasing/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://atharv-kulkarni/./node_modules/longest-streak/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://atharv-kulkarni/./node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/remark-gfm/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm/lib/index.js","webpack://atharv-kulkarni/./node_modules/collapse-white-space/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/node_modules/unist-util-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/lib/index.js","webpack://atharv-kulkarni/./src/components/TemplateComponents/Project/ProjectHeader.js","webpack://atharv-kulkarni/./src/components/TemplateComponents/Project/ProjectDetail.js","webpack://atharv-kulkarni/./src/components/TableOfContents.js","webpack://atharv-kulkarni/./src/templates/project.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/inline-style-parser/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/cjs/index.js","webpack://atharv-kulkarni/./node_modules/is-url/index.js","webpack://atharv-kulkarni/./node_modules/slugify/slugify.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/container/container.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/stack/v-stack.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/tag/tag.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react/dist/esm/wrap/wrap.mjs"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import { createIcon } from '@chakra-ui/react';\n\nconst HamburgerIcon = createIcon({\n  displayName: \"HamburgerIcon\",\n  viewBox: \"0 0 24 24\",\n  d: \"M 3 5 A 1.0001 1.0001 0 1 0 3 7 L 21 7 A 1.0001 1.0001 0 1 0 21 5 L 3 5 z M 3 11 A 1.0001 1.0001 0 1 0 3 13 L 21 13 A 1.0001 1.0001 0 1 0 21 11 L 3 11 z M 3 17 A 1.0001 1.0001 0 1 0 3 19 L 21 19 A 1.0001 1.0001 0 1 0 21 17 L 3 17 z\"\n});\n\nexport { HamburgerIcon };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { createContext } from '@chakra-ui/utils';\nimport { Modal } from './modal.mjs';\nexport { ModalBody as DrawerBody } from './modal-body.mjs';\nexport { ModalCloseButton as DrawerCloseButton } from './modal-close-button.mjs';\nexport { ModalFooter as DrawerFooter } from './modal-footer.mjs';\nexport { ModalHeader as DrawerHeader } from './modal-header.mjs';\nexport { ModalOverlay as DrawerOverlay } from './modal-overlay.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\n\nconst [DrawerContextProvider, useDrawerContext] = createContext();\nconst placementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" }\n};\nfunction getDrawerPlacement(placement, dir) {\n  if (!placement)\n    return;\n  return placementMap[placement]?.[dir] ?? placement;\n}\nfunction Drawer(props) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const drawerStyleConfig = theme.components?.Drawer;\n  const placement = getDrawerPlacement(placementProp, theme.direction);\n  return /* @__PURE__ */ jsx(DrawerContextProvider, { value: { placement }, children: /* @__PURE__ */ jsx(\n    Modal,\n    {\n      isOpen,\n      onClose,\n      styleConfig: drawerStyleConfig,\n      ...rest,\n      children\n    }\n  ) });\n}\n\nexport { Drawer, useDrawerContext };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { forwardRef } from 'react';\nimport { getSlideTransition, TRANSITION_EASINGS, withDelay } from './transition-utils.mjs';\n\nconst defaultTransition = {\n  exit: {\n    duration: 0.15,\n    ease: TRANSITION_EASINGS.easeInOut\n  },\n  enter: {\n    type: \"spring\",\n    damping: 25,\n    stiffness: 180\n  }\n};\nconst variants = {\n  exit: ({ direction, transition, transitionEnd, delay }) => {\n    const { exit: exitStyles } = getSlideTransition({ direction });\n    return {\n      ...exitStyles,\n      transition: transition?.exit ?? withDelay.exit(defaultTransition.exit, delay),\n      transitionEnd: transitionEnd?.exit\n    };\n  },\n  enter: ({ direction, transitionEnd, transition, delay }) => {\n    const { enter: enterStyles } = getSlideTransition({ direction });\n    return {\n      ...enterStyles,\n      transition: transition?.enter ?? withDelay.enter(defaultTransition.enter, delay),\n      transitionEnd: transitionEnd?.enter\n    };\n  }\n};\nconst Slide = forwardRef(\n  function Slide2(props, ref) {\n    const {\n      direction = \"right\",\n      style,\n      unmountOnExit,\n      in: isOpen,\n      className,\n      transition,\n      transitionEnd,\n      delay,\n      motionProps,\n      animatePresenceProps,\n      ...rest\n    } = props;\n    const transitionStyles = getSlideTransition({ direction });\n    const computedStyle = Object.assign(\n      { position: \"fixed\" },\n      transitionStyles.position,\n      style\n    );\n    const show = unmountOnExit ? isOpen && unmountOnExit : true;\n    const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\";\n    const custom = { transitionEnd, transition, direction, delay };\n    return /* @__PURE__ */ jsx(AnimatePresence, { ...animatePresenceProps, custom, children: show && /* @__PURE__ */ jsx(\n      motion.div,\n      {\n        ...rest,\n        ref,\n        initial: \"exit\",\n        className: cx(\"chakra-slide\", className),\n        animate,\n        exit: \"exit\",\n        custom,\n        variants,\n        style: computedStyle,\n        ...motionProps\n      }\n    ) });\n  }\n);\nSlide.displayName = \"Slide\";\n\nexport { Slide };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useDrawerContext } from './drawer.mjs';\nimport { useModalContext, useModalStyles } from './modal.mjs';\nimport { ModalFocusScope } from './modal-focus.mjs';\nimport { Slide } from '../transition/slide.mjs';\nimport { chakra } from '../system/factory.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\n\nconst MotionDiv = chakra(Slide);\nconst DrawerContent = forwardRef(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      motionProps,\n      containerProps: rootProps,\n      ...rest\n    } = props;\n    const { getDialogProps, getDialogContainerProps, isOpen } = useModalContext();\n    const dialogProps = getDialogProps(rest, ref);\n    const containerProps = getDialogContainerProps(rootProps);\n    const _className = cx(\"chakra-modal__content\", className);\n    const styles = useModalStyles();\n    const dialogStyles = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog\n    };\n    const dialogContainerStyles = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"$100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer\n    };\n    const { placement } = useDrawerContext();\n    return /* @__PURE__ */ jsx(ModalFocusScope, { children: /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...containerProps,\n        className: \"chakra-modal__content-container\",\n        __css: dialogContainerStyles,\n        children: /* @__PURE__ */ jsx(\n          MotionDiv,\n          {\n            motionProps,\n            direction: placement,\n            in: isOpen,\n            className: _className,\n            ...dialogProps,\n            __css: dialogStyles,\n            children\n          }\n        )\n      }\n    ) });\n  }\n);\nDrawerContent.displayName = \"DrawerContent\";\n\nexport { DrawerContent };\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g\nconst html = /[\\t\\n\\v\\f\\r ]+/g\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string') {\n    options = {style: options}\n  }\n\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace\n\n  return String(value).replace(\n    options.style === 'html' ? html : js,\n    options.trim ? trimFactory(replace) : replace\n  )\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length\n      ? ''\n      : replace(value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {Image, Link, RootContent, Root} from 'mdast'\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {ReadonlyArray<string> | null | undefined} [imageExtensions]\n *   File extensions (without dot) to treat as images (default:\n *   `defaultImageExtensions`).\n * @property {boolean | null | undefined} [link]\n *   Whether to wrap the image with a link to it (default: `true`).\n */\n\nimport {collapseWhiteSpace} from 'collapse-white-space'\nimport isUrl from 'is-url'\nimport {position} from 'unist-util-position'\nimport {visitParents} from 'unist-util-visit-parents'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Add a simpler image syntax.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function remarkImages(options) {\n  const settings = options || emptyOptions\n  const imageExtensions = settings.imageExtensions || defaultImageExtensions\n  const imageExtensionRegex = new RegExp(`\\\\.(${imageExtensions.join('|')})$`)\n  const link = settings.link !== false\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visitParents(tree, 'text', function (node, parents) {\n      const value = collapseWhiteSpace(node.value, {\n        style: 'html',\n        trim: true\n      })\n\n      if (\n        // Cannot contain whitespace (collapsed, so there can only be spaces):\n        !value.includes(' ') &&\n        // Looks like a URL or path:\n        (isUrl(value) ||\n          value.startsWith('/') ||\n          value.startsWith('./') ||\n          value.startsWith('../')) &&\n        // Ends in known extension:\n        imageExtensionRegex.test(value)\n      ) {\n        let interactive = false\n        let length = parents.length\n\n        // Check if we’re in interactive content.\n        while (length--) {\n          const parent = parents[length]\n          if (parent.type === 'link' || parent.type === 'linkReference') {\n            interactive = true\n            break\n          }\n        }\n\n        /** @type {Image | Link} */\n        let replacement = {\n          type: 'image',\n          url: value,\n          title: null,\n          alt: '',\n          position: position(node)\n        }\n\n        // Add a link if we’re not already in one.\n        if (link && !interactive) {\n          replacement = {\n            type: 'link',\n            url: value,\n            title: null,\n            children: [replacement],\n            position: position(node)\n          }\n        }\n\n        const parent = parents[parents.length - 1]\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        siblings[siblings.indexOf(node)] = replacement\n      }\n    })\n  }\n}\n\n/**\n * Extensions recognized as images by default.\n *\n * @type {ReadonlyArray<string>}\n */\nexport const defaultImageExtensions = [\n  'avif',\n  'gif',\n  'jpeg',\n  'jpg',\n  'png',\n  'svg',\n  'webp'\n]\n","import {\n    Box,\n    Heading,\n    HStack,\n    Link,\n    Tag,\n    Text,\n    VStack,\n    Wrap,\n    WrapItem,\n} from '@chakra-ui/react'\nimport { motion } from 'framer-motion'\nimport React from 'react'\n\nconst FadeInSection = ({ children }) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      viewport={{ once: true }}\n      transition={{ duration: 0.6 }}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nconst ProjectHeader = ({ frontmatter }) => (\n  <FadeInSection>\n    <VStack align=\"start\" spacing={6} mb={12}>\n      <Box w=\"full\">\n        <Heading \n          as=\"h1\" \n          size=\"2xl\" \n          bgGradient=\"linear(to-r, purple.500, purple.700)\"\n          bgClip=\"text\"\n          mb={4}\n        >\n          {frontmatter.title}\n        </Heading>\n        \n        {frontmatter.description && (\n          <Text fontSize=\"lg\" color=\"gray.600\" mb={4}>\n            {frontmatter.description}\n          </Text>\n        )}\n      </Box>\n\n      <HStack spacing={8} wrap=\"wrap\" align=\"flex-start\">\n        <HStack spacing={8} align=\"flex-start\">\n          {frontmatter.duration && (\n            <Box>\n              <Text fontWeight=\"medium\" color=\"gray.500\" fontSize=\"sm\">Duration</Text>\n              <Text color=\"gray.700\">{frontmatter.duration}</Text>\n            </Box>\n          )}\n          {frontmatter.role && (\n            <Box>\n              <Text fontWeight=\"medium\" color=\"gray.500\" fontSize=\"sm\">Role</Text>\n              <Text color=\"gray.700\">{frontmatter.role}</Text>\n            </Box>\n          )}\n          {frontmatter.repoLink && (\n            <Link \n              href={frontmatter.repoLink}\n              isExternal\n              _hover={{ textDecoration: 'none' }}\n              mt={4}\n            >\n              <Box\n                as=\"button\"\n                color=\"gray.600\"\n                _hover={{ \n                  color: 'purple.500',\n                  transform: 'translateY(-2px)'\n                }}\n                transition=\"all 0.2s\"\n              >\n                <svg height=\"20\" width=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                  <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n                </svg>\n              </Box>\n            </Link>\n          )}\n        </HStack>\n      </HStack>\n\n      {frontmatter.techStack && frontmatter.techStack.length > 0 && (\n        <Wrap spacing={2}>\n          {frontmatter.techStack.map(tech => (\n            <WrapItem key={tech}>\n              <Tag \n                size=\"md\" \n                colorScheme=\"purple\" \n                variant=\"subtle\"\n                borderRadius=\"full\"\n                px={3}\n                py={1}\n              >\n                {tech}\n              </Tag>\n            </WrapItem>\n          ))}\n        </Wrap>\n      )}\n    </VStack>\n  </FadeInSection>\n)\n\nexport default ProjectHeader ","/* eslint-disable react/prop-types */\n// src/components/ProjectDetail.js\nimport { ChevronRightIcon } from '@chakra-ui/icons'\nimport {\n  Box,\n  Heading,\n\n  Link,\n  List,\n  ListIcon,\n  ListItem,\n  Text,\n} from '@chakra-ui/react'\nimport { motion } from 'framer-motion'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { Element } from 'react-scroll'\nimport gfm from 'remark-gfm'\nimport remarkImages from 'remark-images'\nimport slugify from 'slugify'\nimport ProjectHeader from './ProjectHeader'\n\n\nconst ProjectDetail = ({ project, images }) => {\n  // Destructuring props for ease of access\n  const markdown = project.rawMarkdownBody\n  // console.log('Images: ', images)\n\n  // Framer Motion component and hook\n  const MotionBox = motion(Box)\n\n  // Animation settings for Framer Motion\n  const animationSettings = {\n    initial: { opacity: 0 },\n    whileInView: { opacity: 1 },\n    viewport: { once: true },\n    transition: { duration: 0.8 },\n  }\n\n  // Custom renderers for markdown elements\n  const renderers = {\n    h1: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading\n            as=\"h1\"\n            fontSize=\"2rem\"\n            mt={14}\n            mb={4}\n            id={id}\n            color=\"#3a3a3a\"\n          >\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h2: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading\n            as=\"h2\"\n            fontSize=\"1.5rem\"\n            mt={10}\n            mb={4}\n            id={id}\n            color=\"#4a4a4a\"\n          >\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h3: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h3\" fontSize=\"1.25rem\" mt={8} mb={3} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h4: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h4\" fontSize=\"1rem\" mt={4} mb={2} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h5: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h5\" fontSize=\"1rem\" mt={4} mb={2} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h6: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h6\" fontSize=\"1rem\" mt={4} mb={2} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n\n    // ... add other heading levels if needed\n    p: ({ children }) => <Text mb={4}>{children}</Text>,\n    a: ({ href, children }) => (\n      <Link href={href} isExternal color=\"teal.500\" target=\"_blank\">\n        {children}\n      </Link>\n    ),\n    ul: ({ href, children }) => (\n      // console.log('ul', children)\n      <List>\n        {children.map(li => {\n          if (li.type === 'li') {\n            return (\n              <ListItem>\n                <ListIcon as={ChevronRightIcon} />\n                <Text as=\"span\">{li.props.children}</Text>\n              </ListItem>\n            )\n          }\n        })}\n      </List>\n    ),\n    // Updating the image renderer to use GatsbyImage\n    img: ({ src, alt }) => {\n      console.log('src:', src)\n      // Find the image in the images array using the filename\n      const imageName = src.split('/').pop() // Get filename from path\n      const image = images.find(img => img.src.includes(imageName))\n      \n      if (image) {\n        const gatsbyImageData = getImage(image.gatsbyImageData)\n        return (\n          <GatsbyImage\n            image={gatsbyImageData}\n            alt={alt}\n            style={{ maxWidth: '40%', marginTop: '1em' }}\n          />\n        )\n      }\n      \n      // Fallback: if image not found in Gatsby images, use the direct URL\n      return (\n        <img \n          src={src.startsWith('/static') ? src : `/static${src}`} \n          alt={alt} \n          style={{ maxWidth: '100%' }} \n        />\n      )\n    },\n  }\n\n  return (\n    <MotionBox\n      p={{ base: 2, md: 4 }}\n      {...animationSettings}\n      id=\"project-detail-container\"\n      sx={{\n        '&::-webkit-scrollbar': {\n          height: '10px',\n          width: '5px',\n        },\n\n        '&::-webkit-scrollbar-track': {\n          borderRadius: '5px',\n          backgroundColor: '#DFE9EB',\n        },\n\n        '&::-webkit-scrollbar-track:hover': {\n          backgroundColor: '#B8C0C2',\n        },\n\n        '&::-webkit-scrollbar-track:active': {\n          backgroundColor: '#B8C0C2',\n        },\n\n        '&::-webkit-scrollbar-thumb': {\n          borderRadius: '5px',\n          backgroundColor: '#7D58E3',\n        },\n\n        '&::-webkit-scrollbar-thumb:hover': {\n          backgroundColor: '#553C9A',\n        },\n\n        '&::-webkit-scrollbar-thumb:active': {\n          backgroundColor: '#8D63FF',\n        },\n      }}\n    >\n      {/* Project Header Section */}\n      <ProjectHeader frontmatter={project.frontmatter} />\n\n      {/* Article Content */}\n      <article>\n        <ReactMarkdown\n          remarkPlugins={[gfm, remarkImages]}\n          components={renderers}\n        >\n          {markdown}\n        </ReactMarkdown>\n      </article>\n    </MotionBox>\n  )\n}\n\nexport default ProjectDetail\n","import React from 'react'\nimport { Box, Text, VStack, Divider } from '@chakra-ui/react'\nimport { Link } from 'react-scroll'\n\nconst TableOfContents = ({ headings, onClose }) => {\n  return (\n    <Box\n      as=\"nav\"\n      position=\"sticky\"\n      top=\"2rem\"\n      p={4}\n      borderLeft=\"1px\"\n      borderColor=\"purple.200\"\n      background=\"none\"\n      borderRadius=\"lg\"\n      maxHeight=\"calc(100vh - 6rem)\"\n      overflowY=\"auto\"\n      transition=\"all 0.2s\"\n      _before={{\n        content: '\"\"',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        borderRadius: 'lg',\n        background: 'linear-gradient(to right, rgba(255,255,255,0.5), rgba(255,255,255,0))',\n        backdropFilter: 'blur(4px)',\n        zIndex: -1,\n      }}\n      _hover={{\n        borderColor: \"purple.300\",\n        _before: {\n          background: 'linear-gradient(to right, rgba(255,255,255,0.7), rgba(255,255,255,0))',\n          backdropFilter: 'blur(8px)',\n        }\n      }}\n      css={{\n        '&::-webkit-scrollbar': { width: '4px' },\n        '&::-webkit-scrollbar-track': { \n          backgroundColor: 'transparent',\n        },\n        '&::-webkit-scrollbar-thumb': { \n          backgroundColor: 'rgba(159, 122, 234, 0.3)',\n          borderRadius: '4px'\n        },\n        '&::-webkit-scrollbar-thumb:hover': {\n          backgroundColor: 'rgba(159, 122, 234, 0.5)',\n        }\n      }}\n    >\n      <Text \n        fontSize=\"sm\" \n        fontWeight=\"medium\" \n        color=\"purple.600\"\n        mb={3}\n      >\n        On this page\n      </Text>\n      <VStack align=\"stretch\" spacing={0.5}>\n        {headings.map((heading, index) => (\n          <Link\n            key={index}\n            to={heading.id}\n            spy={true}\n            smooth={true}\n            offset={-100}\n            duration={500}\n            onClick={onClose}\n            style={{ textDecoration: 'none' }}\n          >\n            <Text\n              fontSize=\"sm\"\n              pl={heading.level * 3}\n              py={1}\n              cursor=\"pointer\"\n              color={heading.level === 1 ? \"purple.600\" : \"gray.600\"}\n              fontWeight={heading.level === 1 ? \"medium\" : \"normal\"}\n              opacity={heading.level === 1 ? 1 : 0.8}\n              _hover={{ \n                color: 'purple.500',\n                backgroundColor: 'rgba(159, 122, 234, 0.08)',\n                borderRadius: 'md'\n              }}\n              transition=\"all 0.2s\"\n            >\n              {heading.title}\n            </Text>\n          </Link>\n        ))}\n      </VStack>\n    </Box>\n  )\n}\n\nexport default TableOfContents ","/* eslint-disable react/prop-types */\nimport { ChevronRightIcon, HamburgerIcon } from '@chakra-ui/icons'\nimport { Box, IconButton, Drawer, DrawerOverlay, DrawerContent, DrawerCloseButton, DrawerHeader, DrawerBody, Container } from '@chakra-ui/react'\nimport { graphql } from 'gatsby'\nimport React from 'react'\nimport {\n  Events,\n  animateScroll as scroll,\n  Link as ScrollLink,\n  scrollSpy,\n} from 'react-scroll'\nimport slugify from 'slugify'\nimport Layout from '../components/Layout'\nimport ProjectDetail from '../components/TemplateComponents/Project/ProjectDetail'\nimport ProjectMetadata from '../components/TemplateComponents/Project/ProjectMetadata'\nimport styles from '../styles/projectTemplate.module.scss'\nimport TableOfContents from '../components/TableOfContents'\n\n// Extract headings from markdownRemark.rawMarkdownBody\nconst extractHeadingsFromMarkdown = markdown => {\n  const headingRegex = /^(#{1,6})\\s+(.+)/gm\n  const extractedHeadings = markdown\n    .split('\\n')\n    .filter(line => line.match(headingRegex))\n    .map(rawHeading => {\n      const level = rawHeading.match(/^#+/)[0].length // Count the number of '#' characters\n      const title = rawHeading.replace(/^#{1,6}\\s+/, '').trim()\n      return { title, id: slugify(title, { lower: true }), level }\n    })\n  return extractedHeadings\n}\n\nconst ProjectTemplate = ({ data }) => {\n  const { markdownRemark } = data\n  const [headings, setHeadings] = React.useState([])\n  const [isTocOpen, setIsTocOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    setHeadings(extractHeadingsFromMarkdown(markdownRemark.rawMarkdownBody))\n    scrollSpy.update()\n    return () => {\n      Events.scrollEvent.remove('begin')\n      Events.scrollEvent.remove('end')\n    }\n  }, [markdownRemark])\n\n  return (\n    <Layout>\n      {/* Mobile TOC Toggle */}\n      <Box \n        display={{ base: 'block', lg: 'none' }} \n        position=\"fixed\"\n        bottom=\"20px\"\n        right=\"20px\"\n        zIndex=\"10\"\n      >\n        <IconButton\n          aria-label=\"Toggle Table of Contents\"\n          icon={<HamburgerIcon />}\n          onClick={() => setIsTocOpen(!isTocOpen)}\n          colorScheme=\"purple\"\n          borderRadius=\"full\"\n        />\n      </Box>\n\n      {/* Mobile TOC Drawer */}\n      <Drawer\n        isOpen={isTocOpen}\n        placement=\"right\"\n        onClose={() => setIsTocOpen(false)}\n        size=\"xs\"\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Contents</DrawerHeader>\n          <DrawerBody>\n            <TableOfContents headings={headings} onClose={() => setIsTocOpen(false)} />\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n\n      {/* Main Content */}\n      <Container maxW=\"container.xl\" py={8}>\n        <Box display=\"flex\" gap={12}>\n          {/* Main Content Area */}\n          <Box flex=\"1\" maxW=\"860px\">\n            <ProjectDetail\n              project={markdownRemark}\n              images={markdownRemark.frontmatter.imagesUrl?.map(image => ({\n                src: image.publicURL,\n                gatsbyImageData: image.childImageSharp.gatsbyImageData,\n              })) || []}\n            />\n          </Box>\n\n          {/* Desktop TOC */}\n          <Box\n            display={{ base: 'none', lg: 'block' }}\n            w=\"280px\"\n            flexShrink={0}\n            position=\"relative\"\n            height=\"fit-content\"\n          >\n            <TableOfContents headings={headings} />\n          </Box>\n        </Box>\n      </Container>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      rawMarkdownBody\n      frontmatter {\n        title\n        description\n        imagesUrl {\n          publicURL\n          childImageSharp {\n            gatsbyImageData(layout: CONSTRAINED)\n          }\n        }\n        sections\n        techStack\n        duration\n        role\n        repoLink: liveLink\n      }\n    }\n  }\n`\n\nexport default ProjectTemplate\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\n/**\n * Expose `isUrl`.\n */\n\nmodule.exports = isUrl;\n\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\n\nfunction isUrl(string){\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  var match = string.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n\n  var everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (localhostDomainRE.test(everythingAfterProtocol) ||\n      nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n\n  return false;\n}\n","\n;(function (name, root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory()\n    module.exports['default'] = factory()\n  }\n  /* istanbul ignore next */\n  else if (typeof define === 'function' && define.amd) {\n    define(factory)\n  }\n  else {\n    root[name] = factory()\n  }\n}('slugify', this, function () {\n  var charMap = JSON.parse('{\"$\":\"dollar\",\"%\":\"percent\",\"&\":\"and\",\"<\":\"less\",\">\":\"greater\",\"|\":\"or\",\"¢\":\"cent\",\"£\":\"pound\",\"¤\":\"currency\",\"¥\":\"yen\",\"©\":\"(c)\",\"ª\":\"a\",\"®\":\"(r)\",\"º\":\"o\",\"À\":\"A\",\"Á\":\"A\",\"Â\":\"A\",\"Ã\":\"A\",\"Ä\":\"A\",\"Å\":\"A\",\"Æ\":\"AE\",\"Ç\":\"C\",\"È\":\"E\",\"É\":\"E\",\"Ê\":\"E\",\"Ë\":\"E\",\"Ì\":\"I\",\"Í\":\"I\",\"Î\":\"I\",\"Ï\":\"I\",\"Ð\":\"D\",\"Ñ\":\"N\",\"Ò\":\"O\",\"Ó\":\"O\",\"Ô\":\"O\",\"Õ\":\"O\",\"Ö\":\"O\",\"Ø\":\"O\",\"Ù\":\"U\",\"Ú\":\"U\",\"Û\":\"U\",\"Ü\":\"U\",\"Ý\":\"Y\",\"Þ\":\"TH\",\"ß\":\"ss\",\"à\":\"a\",\"á\":\"a\",\"â\":\"a\",\"ã\":\"a\",\"ä\":\"a\",\"å\":\"a\",\"æ\":\"ae\",\"ç\":\"c\",\"è\":\"e\",\"é\":\"e\",\"ê\":\"e\",\"ë\":\"e\",\"ì\":\"i\",\"í\":\"i\",\"î\":\"i\",\"ï\":\"i\",\"ð\":\"d\",\"ñ\":\"n\",\"ò\":\"o\",\"ó\":\"o\",\"ô\":\"o\",\"õ\":\"o\",\"ö\":\"o\",\"ø\":\"o\",\"ù\":\"u\",\"ú\":\"u\",\"û\":\"u\",\"ü\":\"u\",\"ý\":\"y\",\"þ\":\"th\",\"ÿ\":\"y\",\"Ā\":\"A\",\"ā\":\"a\",\"Ă\":\"A\",\"ă\":\"a\",\"Ą\":\"A\",\"ą\":\"a\",\"Ć\":\"C\",\"ć\":\"c\",\"Č\":\"C\",\"č\":\"c\",\"Ď\":\"D\",\"ď\":\"d\",\"Đ\":\"DJ\",\"đ\":\"dj\",\"Ē\":\"E\",\"ē\":\"e\",\"Ė\":\"E\",\"ė\":\"e\",\"Ę\":\"e\",\"ę\":\"e\",\"Ě\":\"E\",\"ě\":\"e\",\"Ğ\":\"G\",\"ğ\":\"g\",\"Ģ\":\"G\",\"ģ\":\"g\",\"Ĩ\":\"I\",\"ĩ\":\"i\",\"Ī\":\"i\",\"ī\":\"i\",\"Į\":\"I\",\"į\":\"i\",\"İ\":\"I\",\"ı\":\"i\",\"Ķ\":\"k\",\"ķ\":\"k\",\"Ļ\":\"L\",\"ļ\":\"l\",\"Ľ\":\"L\",\"ľ\":\"l\",\"Ł\":\"L\",\"ł\":\"l\",\"Ń\":\"N\",\"ń\":\"n\",\"Ņ\":\"N\",\"ņ\":\"n\",\"Ň\":\"N\",\"ň\":\"n\",\"Ō\":\"O\",\"ō\":\"o\",\"Ő\":\"O\",\"ő\":\"o\",\"Œ\":\"OE\",\"œ\":\"oe\",\"Ŕ\":\"R\",\"ŕ\":\"r\",\"Ř\":\"R\",\"ř\":\"r\",\"Ś\":\"S\",\"ś\":\"s\",\"Ş\":\"S\",\"ş\":\"s\",\"Š\":\"S\",\"š\":\"s\",\"Ţ\":\"T\",\"ţ\":\"t\",\"Ť\":\"T\",\"ť\":\"t\",\"Ũ\":\"U\",\"ũ\":\"u\",\"Ū\":\"u\",\"ū\":\"u\",\"Ů\":\"U\",\"ů\":\"u\",\"Ű\":\"U\",\"ű\":\"u\",\"Ų\":\"U\",\"ų\":\"u\",\"Ŵ\":\"W\",\"ŵ\":\"w\",\"Ŷ\":\"Y\",\"ŷ\":\"y\",\"Ÿ\":\"Y\",\"Ź\":\"Z\",\"ź\":\"z\",\"Ż\":\"Z\",\"ż\":\"z\",\"Ž\":\"Z\",\"ž\":\"z\",\"Ə\":\"E\",\"ƒ\":\"f\",\"Ơ\":\"O\",\"ơ\":\"o\",\"Ư\":\"U\",\"ư\":\"u\",\"ǈ\":\"LJ\",\"ǉ\":\"lj\",\"ǋ\":\"NJ\",\"ǌ\":\"nj\",\"Ș\":\"S\",\"ș\":\"s\",\"Ț\":\"T\",\"ț\":\"t\",\"ə\":\"e\",\"˚\":\"o\",\"Ά\":\"A\",\"Έ\":\"E\",\"Ή\":\"H\",\"Ί\":\"I\",\"Ό\":\"O\",\"Ύ\":\"Y\",\"Ώ\":\"W\",\"ΐ\":\"i\",\"Α\":\"A\",\"Β\":\"B\",\"Γ\":\"G\",\"Δ\":\"D\",\"Ε\":\"E\",\"Ζ\":\"Z\",\"Η\":\"H\",\"Θ\":\"8\",\"Ι\":\"I\",\"Κ\":\"K\",\"Λ\":\"L\",\"Μ\":\"M\",\"Ν\":\"N\",\"Ξ\":\"3\",\"Ο\":\"O\",\"Π\":\"P\",\"Ρ\":\"R\",\"Σ\":\"S\",\"Τ\":\"T\",\"Υ\":\"Y\",\"Φ\":\"F\",\"Χ\":\"X\",\"Ψ\":\"PS\",\"Ω\":\"W\",\"Ϊ\":\"I\",\"Ϋ\":\"Y\",\"ά\":\"a\",\"έ\":\"e\",\"ή\":\"h\",\"ί\":\"i\",\"ΰ\":\"y\",\"α\":\"a\",\"β\":\"b\",\"γ\":\"g\",\"δ\":\"d\",\"ε\":\"e\",\"ζ\":\"z\",\"η\":\"h\",\"θ\":\"8\",\"ι\":\"i\",\"κ\":\"k\",\"λ\":\"l\",\"μ\":\"m\",\"ν\":\"n\",\"ξ\":\"3\",\"ο\":\"o\",\"π\":\"p\",\"ρ\":\"r\",\"ς\":\"s\",\"σ\":\"s\",\"τ\":\"t\",\"υ\":\"y\",\"φ\":\"f\",\"χ\":\"x\",\"ψ\":\"ps\",\"ω\":\"w\",\"ϊ\":\"i\",\"ϋ\":\"y\",\"ό\":\"o\",\"ύ\":\"y\",\"ώ\":\"w\",\"Ё\":\"Yo\",\"Ђ\":\"DJ\",\"Є\":\"Ye\",\"І\":\"I\",\"Ї\":\"Yi\",\"Ј\":\"J\",\"Љ\":\"LJ\",\"Њ\":\"NJ\",\"Ћ\":\"C\",\"Џ\":\"DZ\",\"А\":\"A\",\"Б\":\"B\",\"В\":\"V\",\"Г\":\"G\",\"Д\":\"D\",\"Е\":\"E\",\"Ж\":\"Zh\",\"З\":\"Z\",\"И\":\"I\",\"Й\":\"J\",\"К\":\"K\",\"Л\":\"L\",\"М\":\"M\",\"Н\":\"N\",\"О\":\"O\",\"П\":\"P\",\"Р\":\"R\",\"С\":\"S\",\"Т\":\"T\",\"У\":\"U\",\"Ф\":\"F\",\"Х\":\"H\",\"Ц\":\"C\",\"Ч\":\"Ch\",\"Ш\":\"Sh\",\"Щ\":\"Sh\",\"Ъ\":\"U\",\"Ы\":\"Y\",\"Ь\":\"\",\"Э\":\"E\",\"Ю\":\"Yu\",\"Я\":\"Ya\",\"а\":\"a\",\"б\":\"b\",\"в\":\"v\",\"г\":\"g\",\"д\":\"d\",\"е\":\"e\",\"ж\":\"zh\",\"з\":\"z\",\"и\":\"i\",\"й\":\"j\",\"к\":\"k\",\"л\":\"l\",\"м\":\"m\",\"н\":\"n\",\"о\":\"o\",\"п\":\"p\",\"р\":\"r\",\"с\":\"s\",\"т\":\"t\",\"у\":\"u\",\"ф\":\"f\",\"х\":\"h\",\"ц\":\"c\",\"ч\":\"ch\",\"ш\":\"sh\",\"щ\":\"sh\",\"ъ\":\"u\",\"ы\":\"y\",\"ь\":\"\",\"э\":\"e\",\"ю\":\"yu\",\"я\":\"ya\",\"ё\":\"yo\",\"ђ\":\"dj\",\"є\":\"ye\",\"і\":\"i\",\"ї\":\"yi\",\"ј\":\"j\",\"љ\":\"lj\",\"њ\":\"nj\",\"ћ\":\"c\",\"ѝ\":\"u\",\"џ\":\"dz\",\"Ґ\":\"G\",\"ґ\":\"g\",\"Ғ\":\"GH\",\"ғ\":\"gh\",\"Қ\":\"KH\",\"қ\":\"kh\",\"Ң\":\"NG\",\"ң\":\"ng\",\"Ү\":\"UE\",\"ү\":\"ue\",\"Ұ\":\"U\",\"ұ\":\"u\",\"Һ\":\"H\",\"һ\":\"h\",\"Ә\":\"AE\",\"ә\":\"ae\",\"Ө\":\"OE\",\"ө\":\"oe\",\"Ա\":\"A\",\"Բ\":\"B\",\"Գ\":\"G\",\"Դ\":\"D\",\"Ե\":\"E\",\"Զ\":\"Z\",\"Է\":\"E\\'\",\"Ը\":\"Y\\'\",\"Թ\":\"T\\'\",\"Ժ\":\"JH\",\"Ի\":\"I\",\"Լ\":\"L\",\"Խ\":\"X\",\"Ծ\":\"C\\'\",\"Կ\":\"K\",\"Հ\":\"H\",\"Ձ\":\"D\\'\",\"Ղ\":\"GH\",\"Ճ\":\"TW\",\"Մ\":\"M\",\"Յ\":\"Y\",\"Ն\":\"N\",\"Շ\":\"SH\",\"Չ\":\"CH\",\"Պ\":\"P\",\"Ջ\":\"J\",\"Ռ\":\"R\\'\",\"Ս\":\"S\",\"Վ\":\"V\",\"Տ\":\"T\",\"Ր\":\"R\",\"Ց\":\"C\",\"Փ\":\"P\\'\",\"Ք\":\"Q\\'\",\"Օ\":\"O\\'\\'\",\"Ֆ\":\"F\",\"և\":\"EV\",\"ء\":\"a\",\"آ\":\"aa\",\"أ\":\"a\",\"ؤ\":\"u\",\"إ\":\"i\",\"ئ\":\"e\",\"ا\":\"a\",\"ب\":\"b\",\"ة\":\"h\",\"ت\":\"t\",\"ث\":\"th\",\"ج\":\"j\",\"ح\":\"h\",\"خ\":\"kh\",\"د\":\"d\",\"ذ\":\"th\",\"ر\":\"r\",\"ز\":\"z\",\"س\":\"s\",\"ش\":\"sh\",\"ص\":\"s\",\"ض\":\"dh\",\"ط\":\"t\",\"ظ\":\"z\",\"ع\":\"a\",\"غ\":\"gh\",\"ف\":\"f\",\"ق\":\"q\",\"ك\":\"k\",\"ل\":\"l\",\"م\":\"m\",\"ن\":\"n\",\"ه\":\"h\",\"و\":\"w\",\"ى\":\"a\",\"ي\":\"y\",\"ً\":\"an\",\"ٌ\":\"on\",\"ٍ\":\"en\",\"َ\":\"a\",\"ُ\":\"u\",\"ِ\":\"e\",\"ْ\":\"\",\"٠\":\"0\",\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"پ\":\"p\",\"چ\":\"ch\",\"ژ\":\"zh\",\"ک\":\"k\",\"گ\":\"g\",\"ی\":\"y\",\"۰\":\"0\",\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\",\"฿\":\"baht\",\"ა\":\"a\",\"ბ\":\"b\",\"გ\":\"g\",\"დ\":\"d\",\"ე\":\"e\",\"ვ\":\"v\",\"ზ\":\"z\",\"თ\":\"t\",\"ი\":\"i\",\"კ\":\"k\",\"ლ\":\"l\",\"მ\":\"m\",\"ნ\":\"n\",\"ო\":\"o\",\"პ\":\"p\",\"ჟ\":\"zh\",\"რ\":\"r\",\"ს\":\"s\",\"ტ\":\"t\",\"უ\":\"u\",\"ფ\":\"f\",\"ქ\":\"k\",\"ღ\":\"gh\",\"ყ\":\"q\",\"შ\":\"sh\",\"ჩ\":\"ch\",\"ც\":\"ts\",\"ძ\":\"dz\",\"წ\":\"ts\",\"ჭ\":\"ch\",\"ხ\":\"kh\",\"ჯ\":\"j\",\"ჰ\":\"h\",\"Ṣ\":\"S\",\"ṣ\":\"s\",\"Ẁ\":\"W\",\"ẁ\":\"w\",\"Ẃ\":\"W\",\"ẃ\":\"w\",\"Ẅ\":\"W\",\"ẅ\":\"w\",\"ẞ\":\"SS\",\"Ạ\":\"A\",\"ạ\":\"a\",\"Ả\":\"A\",\"ả\":\"a\",\"Ấ\":\"A\",\"ấ\":\"a\",\"Ầ\":\"A\",\"ầ\":\"a\",\"Ẩ\":\"A\",\"ẩ\":\"a\",\"Ẫ\":\"A\",\"ẫ\":\"a\",\"Ậ\":\"A\",\"ậ\":\"a\",\"Ắ\":\"A\",\"ắ\":\"a\",\"Ằ\":\"A\",\"ằ\":\"a\",\"Ẳ\":\"A\",\"ẳ\":\"a\",\"Ẵ\":\"A\",\"ẵ\":\"a\",\"Ặ\":\"A\",\"ặ\":\"a\",\"Ẹ\":\"E\",\"ẹ\":\"e\",\"Ẻ\":\"E\",\"ẻ\":\"e\",\"Ẽ\":\"E\",\"ẽ\":\"e\",\"Ế\":\"E\",\"ế\":\"e\",\"Ề\":\"E\",\"ề\":\"e\",\"Ể\":\"E\",\"ể\":\"e\",\"Ễ\":\"E\",\"ễ\":\"e\",\"Ệ\":\"E\",\"ệ\":\"e\",\"Ỉ\":\"I\",\"ỉ\":\"i\",\"Ị\":\"I\",\"ị\":\"i\",\"Ọ\":\"O\",\"ọ\":\"o\",\"Ỏ\":\"O\",\"ỏ\":\"o\",\"Ố\":\"O\",\"ố\":\"o\",\"Ồ\":\"O\",\"ồ\":\"o\",\"Ổ\":\"O\",\"ổ\":\"o\",\"Ỗ\":\"O\",\"ỗ\":\"o\",\"Ộ\":\"O\",\"ộ\":\"o\",\"Ớ\":\"O\",\"ớ\":\"o\",\"Ờ\":\"O\",\"ờ\":\"o\",\"Ở\":\"O\",\"ở\":\"o\",\"Ỡ\":\"O\",\"ỡ\":\"o\",\"Ợ\":\"O\",\"ợ\":\"o\",\"Ụ\":\"U\",\"ụ\":\"u\",\"Ủ\":\"U\",\"ủ\":\"u\",\"Ứ\":\"U\",\"ứ\":\"u\",\"Ừ\":\"U\",\"ừ\":\"u\",\"Ử\":\"U\",\"ử\":\"u\",\"Ữ\":\"U\",\"ữ\":\"u\",\"Ự\":\"U\",\"ự\":\"u\",\"Ỳ\":\"Y\",\"ỳ\":\"y\",\"Ỵ\":\"Y\",\"ỵ\":\"y\",\"Ỷ\":\"Y\",\"ỷ\":\"y\",\"Ỹ\":\"Y\",\"ỹ\":\"y\",\"–\":\"-\",\"‘\":\"\\'\",\"’\":\"\\'\",\"“\":\"\\\\\\\"\",\"”\":\"\\\\\\\"\",\"„\":\"\\\\\\\"\",\"†\":\"+\",\"•\":\"*\",\"…\":\"...\",\"₠\":\"ecu\",\"₢\":\"cruzeiro\",\"₣\":\"french franc\",\"₤\":\"lira\",\"₥\":\"mill\",\"₦\":\"naira\",\"₧\":\"peseta\",\"₨\":\"rupee\",\"₩\":\"won\",\"₪\":\"new shequel\",\"₫\":\"dong\",\"€\":\"euro\",\"₭\":\"kip\",\"₮\":\"tugrik\",\"₯\":\"drachma\",\"₰\":\"penny\",\"₱\":\"peso\",\"₲\":\"guarani\",\"₳\":\"austral\",\"₴\":\"hryvnia\",\"₵\":\"cedi\",\"₸\":\"kazakhstani tenge\",\"₹\":\"indian rupee\",\"₺\":\"turkish lira\",\"₽\":\"russian ruble\",\"₿\":\"bitcoin\",\"℠\":\"sm\",\"™\":\"tm\",\"∂\":\"d\",\"∆\":\"delta\",\"∑\":\"sum\",\"∞\":\"infinity\",\"♥\":\"love\",\"元\":\"yuan\",\"円\":\"yen\",\"﷼\":\"rial\",\"ﻵ\":\"laa\",\"ﻷ\":\"laa\",\"ﻹ\":\"lai\",\"ﻻ\":\"la\"}')\n  var locales = JSON.parse('{\"bg\":{\"Й\":\"Y\",\"Ц\":\"Ts\",\"Щ\":\"Sht\",\"Ъ\":\"A\",\"Ь\":\"Y\",\"й\":\"y\",\"ц\":\"ts\",\"щ\":\"sht\",\"ъ\":\"a\",\"ь\":\"y\"},\"de\":{\"Ä\":\"AE\",\"ä\":\"ae\",\"Ö\":\"OE\",\"ö\":\"oe\",\"Ü\":\"UE\",\"ü\":\"ue\",\"ß\":\"ss\",\"%\":\"prozent\",\"&\":\"und\",\"|\":\"oder\",\"∑\":\"summe\",\"∞\":\"unendlich\",\"♥\":\"liebe\"},\"es\":{\"%\":\"por ciento\",\"&\":\"y\",\"<\":\"menor que\",\">\":\"mayor que\",\"|\":\"o\",\"¢\":\"centavos\",\"£\":\"libras\",\"¤\":\"moneda\",\"₣\":\"francos\",\"∑\":\"suma\",\"∞\":\"infinito\",\"♥\":\"amor\"},\"fr\":{\"%\":\"pourcent\",\"&\":\"et\",\"<\":\"plus petit\",\">\":\"plus grand\",\"|\":\"ou\",\"¢\":\"centime\",\"£\":\"livre\",\"¤\":\"devise\",\"₣\":\"franc\",\"∑\":\"somme\",\"∞\":\"infini\",\"♥\":\"amour\"},\"pt\":{\"%\":\"porcento\",\"&\":\"e\",\"<\":\"menor\",\">\":\"maior\",\"|\":\"ou\",\"¢\":\"centavo\",\"∑\":\"soma\",\"£\":\"libra\",\"∞\":\"infinito\",\"♥\":\"amor\"},\"uk\":{\"И\":\"Y\",\"и\":\"y\",\"Й\":\"Y\",\"й\":\"y\",\"Ц\":\"Ts\",\"ц\":\"ts\",\"Х\":\"Kh\",\"х\":\"kh\",\"Щ\":\"Shch\",\"щ\":\"shch\",\"Г\":\"H\",\"г\":\"h\"},\"vi\":{\"Đ\":\"D\",\"đ\":\"d\"},\"da\":{\"Ø\":\"OE\",\"ø\":\"oe\",\"Å\":\"AA\",\"å\":\"aa\",\"%\":\"procent\",\"&\":\"og\",\"|\":\"eller\",\"$\":\"dollar\",\"<\":\"mindre end\",\">\":\"større end\"},\"nb\":{\"&\":\"og\",\"Å\":\"AA\",\"Æ\":\"AE\",\"Ø\":\"OE\",\"å\":\"aa\",\"æ\":\"ae\",\"ø\":\"oe\"},\"it\":{\"&\":\"e\"},\"nl\":{\"&\":\"en\"},\"sv\":{\"&\":\"och\",\"Å\":\"AA\",\"Ä\":\"AE\",\"Ö\":\"OE\",\"å\":\"aa\",\"ä\":\"ae\",\"ö\":\"oe\"}}')\n\n  function replace (string, options) {\n    if (typeof string !== 'string') {\n      throw new Error('slugify: string argument expected')\n    }\n\n    options = (typeof options === 'string')\n      ? {replacement: options}\n      : options || {}\n\n    var locale = locales[options.locale] || {}\n\n    var replacement = options.replacement === undefined ? '-' : options.replacement\n\n    var trim = options.trim === undefined ? true : options.trim\n\n    var slug = string.normalize().split('')\n      // replace characters based on charMap\n      .reduce(function (result, ch) {\n        var appendChar = locale[ch];\n        if (appendChar === undefined) appendChar = charMap[ch];\n        if (appendChar === undefined) appendChar = ch;\n        if (appendChar === replacement) appendChar = ' ';\n        return result + appendChar\n          // remove not allowed characters\n          .replace(options.remove || /[^\\w\\s$*_+~.()'\"!\\-:@]+/g, '')\n      }, '');\n\n    if (options.strict) {\n      slug = slug.replace(/[^A-Za-z0-9\\s]/g, '');\n    }\n\n    if (trim) {\n      slug = slug.trim()\n    }\n\n    // Replace spaces with replacement character, treating multiple consecutive\n    // spaces as a single space.\n    slug = slug.replace(/\\s+/g, replacement);\n\n    if (options.lower) {\n      slug = slug.toLowerCase()\n    }\n\n    return slug\n  }\n\n  replace.extend = function (customMap) {\n    Object.assign(charMap, customMap)\n  }\n\n  return replace\n}))\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Container = forwardRef(\n  function Container2(props, ref) {\n    const { className, centerContent, ...rest } = omitThemingProps(props);\n    const styles = useStyleConfig(\"Container\", props);\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        className: cx(\"chakra-container\", className),\n        ...rest,\n        __css: {\n          ...styles,\n          ...centerContent && {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          }\n        }\n      }\n    );\n  }\n);\nContainer.displayName = \"Container\";\n\nexport { Container };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { Stack } from './stack.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\n\nconst VStack = forwardRef((props, ref) => /* @__PURE__ */ jsx(Stack, { align: \"center\", ...props, direction: \"column\", ref }));\nVStack.displayName = \"VStack\";\n\nexport { VStack };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { createContext } from '@chakra-ui/utils';\nimport { Icon } from '../icon/icon.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst [TagStylesProvider, useTagStyles] = createContext({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `\n});\nconst Tag = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props);\n  const ownProps = omitThemingProps(props);\n  const containerStyles = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container\n  };\n  return /* @__PURE__ */ jsx(TagStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(chakra.span, { ref, ...ownProps, __css: containerStyles }) });\n});\nTag.displayName = \"Tag\";\nconst TagLabel = forwardRef((props, ref) => {\n  const styles = useTagStyles();\n  return /* @__PURE__ */ jsx(chakra.span, { ref, noOfLines: 1, ...props, __css: styles.label });\n});\nTagLabel.displayName = \"TagLabel\";\nconst TagLeftIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginEnd: \"0.5rem\", ...props }));\nTagLeftIcon.displayName = \"TagLeftIcon\";\nconst TagRightIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginStart: \"0.5rem\", ...props }));\nTagRightIcon.displayName = \"TagRightIcon\";\nconst TagCloseIcon = (props) => /* @__PURE__ */ jsx(Icon, { verticalAlign: \"inherit\", viewBox: \"0 0 512 512\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  }\n) });\nTagCloseIcon.displayName = \"TagCloseIcon\";\nconst TagCloseButton = forwardRef(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props;\n    const styles = useTagStyles();\n    const btnStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton\n    };\n    return /* @__PURE__ */ jsx(\n      chakra.button,\n      {\n        ref,\n        \"aria-label\": \"close\",\n        ...rest,\n        type: \"button\",\n        disabled: isDisabled,\n        __css: btnStyles,\n        children: children || /* @__PURE__ */ jsx(TagCloseIcon, {})\n      }\n    );\n  }\n);\nTagCloseButton.displayName = \"TagCloseButton\";\n\nexport { Tag, TagCloseButton, TagLabel, TagLeftIcon, TagRightIcon, useTagStyles };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useMemo, Children } from 'react';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Wrap = forwardRef(function Wrap2(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const _children = useMemo(\n    () => shouldWrapChildren ? Children.map(children, (child, index) => /* @__PURE__ */ jsx(WrapItem, { children: child }, index)) : children,\n    [children, shouldWrapChildren]\n  );\n  return /* @__PURE__ */ jsx(chakra.div, { ref, className: cx(\"chakra-wrap\", className), ...rest, children: /* @__PURE__ */ jsx(\n    chakra.ul,\n    {\n      className: \"chakra-wrap__list\",\n      __css: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: justify,\n        alignItems: align,\n        flexDirection: direction,\n        listStyleType: \"none\",\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        padding: \"0\"\n      },\n      children: _children\n    }\n  ) });\n});\nWrap.displayName = \"Wrap\";\nconst WrapItem = forwardRef(\n  function WrapItem2(props, ref) {\n    const { className, ...rest } = props;\n    return /* @__PURE__ */ jsx(\n      chakra.li,\n      {\n        ref,\n        __css: { display: \"flex\", alignItems: \"flex-start\" },\n        className: cx(\"chakra-wrap__listitem\", className),\n        ...rest\n      }\n    );\n  }\n);\nWrapItem.displayName = \"WrapItem\";\n\nexport { Wrap, WrapItem };\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","HamburgerIcon","displayName","viewBox","d","DrawerContextProvider","useDrawerContext","placementMap","start","ltr","rtl","end","Drawer","props","isOpen","onClose","placement","placementProp","children","rest","theme","drawerStyleConfig","components","dir","getDrawerPlacement","direction","jsx","styleConfig","defaultTransition","exit","duration","ease","easeInOut","enter","type","damping","stiffness","variants","transition","transitionEnd","delay","exitStyles","enterStyles","Slide","forwardRef","ref","style","unmountOnExit","in","className","motionProps","animatePresenceProps","transitionStyles","computedStyle","assign","position","show","animate","custom","AnimatePresence","div","initial","cx","MotionDiv","DrawerContent","containerProps","rootProps","getDialogProps","getDialogContainerProps","dialogProps","_className","styles","dialogStyles","display","flexDirection","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","__css","nameRe","nameReJsx","emptyOptions","test","re","empty","replace","Schema","property","normal","space","this","merge","definitions","index","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","prop","properties","info","transform","attributes","includes","xlink","_","slice","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cy","defaultAction","descent","diffuseConstant","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","charAt","toUpperCase","hastToReact","point","pointStart","node","line","column","undefined","stringifyPosition","pos","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","ancestors","cause","message","ruleId","source","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","TypeError","filePath","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","push","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","dashes","find","Number","isNaN","settings","join","padRight","padLeft","trim","styleObject","replacer","error","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","combineExtensions","extensions","all","syntaxExtension","extension","hook","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","consume","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","document","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","match","endPosition","TextDecoder","lastIndex","exec","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","revert","subtype","suffix","contents","listItemLoose","trimLines","last","lines","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","createState","footnoteById","handlers","nodes","trimMarkdownSpaceStart","handle","passThrough","shallow","unknownHandler","defaultUnknownHandler","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","toHast","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","middlewareIndex","callback","output","middleware","wrapped","fnExpectsCallback","done","then","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","formatHeadingAsSetext","literalWithBreak","setext","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","js","replaceLineEnding","replaceSpace","remarkImages","imageExtensions","defaultImageExtensions","imageExtensionRegex","preserveLineEndings","dropOrReplace","trimFactory","collapseWhiteSpace","startsWith","interactive","FadeInSection","_ref","React","motion","whileInView","viewport","once","_ref2","frontmatter","VStack","mb","Box","w","Heading","bgGradient","bgClip","description","Text","HStack","repoLink","Link","isExternal","_hover","mt","techStack","Wrap","tech","WrapItem","Tag","colorScheme","variant","borderRadius","px","py","project","images","markdown","rawMarkdownBody","MotionBox","renderers","h1","slugify","lower","Element","h2","_ref3","h3","_ref4","h4","_ref5","h5","_ref6","h6","_ref7","p","_ref8","_ref9","ul","_ref10","List","li","ListItem","ListIcon","ChevronRightIcon","img","_ref11","console","log","imageName","gatsbyImageData","getImage","GatsbyImage","maxWidth","marginTop","md","sx","backgroundColor","ProjectHeader","ReactMarkdown","headings","borderLeft","maxHeight","overflowY","_before","bottom","backdropFilter","zIndex","css","spy","smooth","pl","level","_markdownRemark$front","markdownRemark","setHeadings","isTocOpen","setIsTocOpen","headingRegex","rawHeading","extractHeadingsFromMarkdown","scrollSpy","update","Events","scrollEvent","Layout","lg","IconButton","DrawerOverlay","DrawerCloseButton","DrawerHeader","DrawerBody","TableOfContents","Container","maxW","gap","flex","ProjectDetail","imagesUrl","publicURL","childImageSharp","flexShrink","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","m","comments","c","val","ret","decl","decls","declarations","__importDefault","mod","__esModule","inline_style_parser_1","hasIterator","forEach","protocolAndDomainRE","everythingAfterProtocol","localhostDomainRE","nonLocalhostDomainRE","charMap","locales","locale","slug","reduce","ch","appendChar","customMap","centerContent","alignItems","TagStylesProvider","useTagStyles","errorMessage","ownProps","containerStyles","verticalAlign","container","noOfLines","I","marginEnd","marginStart","TagCloseIcon","isDisabled","btnStyles","justifyContent","closeButton","button","spacingX","spacingY","justify","shouldWrapChildren","_children","useMemo","Children","flexWrap","listStyleType","columnGap","rowGap"],"sourceRoot":""}