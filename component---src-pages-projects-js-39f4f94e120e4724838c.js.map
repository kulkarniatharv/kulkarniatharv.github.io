{"version":3,"file":"component---src-pages-projects-js-39f4f94e120e4724838c.js","mappings":"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","sources":["webpack://atharv-kulkarni/./node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-NEK3OOAM.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/icons/dist/chunk-XEKRR764.mjs","webpack://atharv-kulkarni/./src/components/ProjectsSection.js","webpack://atharv-kulkarni/./src/components/TableOfContents.js","webpack://atharv-kulkarni/./src/components/Projects.js","webpack://atharv-kulkarni/./src/pages/projects.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-7OLJDQMT.mjs"],"sourcesContent":["// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","'use client'\nimport {\n  Grid\n} from \"./chunk-JARCRF6W.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n//# sourceMappingURL=chunk-NEK3OOAM.mjs.map","'use client'\n\n// src/ArrowForward.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nvar ArrowForwardIcon = createIcon({\n  d: \"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\",\n  displayName: \"ArrowForwardIcon\"\n});\n\nexport {\n  ArrowForwardIcon\n};\n//# sourceMappingURL=chunk-XEKRR764.mjs.map","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport { Box, Button, Heading, SimpleGrid, IconButton } from '@chakra-ui/react'\nimport { ArrowForwardIcon } from '@chakra-ui/icons'\nimport ProjectCard from './ProjectCard'\n\nimport * as projectsStyles from '../styles/projects.module.scss'\n\nconst ProjectsSection = ({ section, projects }) => (\n  <Box\n    my={8}\n    display=\"flex\"\n    flexDirection=\"column\"\n    justifyContent=\"center\"\n    id={section}\n    borderTop={1}\n    borderRight={1}\n    borderWidth={1}\n    borderColor=\"blackAlpha.300\"\n    borderRadius=\"lg\"\n    p={6}\n    mx={4}\n  >\n    <Heading\n      as=\"h2\"\n      size=\"xl\"\n      mb={4}\n      mx={4}\n      textAlign=\"center\"\n      alignSelf=\"flex-start\"\n    >\n      {section}\n    </Heading>\n    <SimpleGrid columns={{ base: 1, md: 2 }} gap={4} justifyContent=\"center\">\n      {projects.slice(0, 2).map(project => (\n        <ProjectCard key={project.slug} project={project} />\n      ))}\n    </SimpleGrid>\n    {projects.length > 2 && (\n      <Box textAlign=\"center\" mt={4}>\n        <Link to={`/sections/${section}`}>\n          {/* <Button variant=\"outline\">See all</Button> */}\n          <IconButton\n            size=\"md\"\n            fontSize=\"lg\"\n            variant=\"outline\"\n            colorScheme=\"red\"\n            isRound\n            icon={<ArrowForwardIcon />}\n            aria-label=\"Explore more projects\"\n          />\n        </Link>\n      </Box>\n    )}\n  </Box>\n)\n\nexport default ProjectsSection\n","/* eslint-disable react/prop-types */\n// TableOfContents.js\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport { Box, SimpleGrid, Button, Heading } from '@chakra-ui/react'\n\nconst TableOfContents = ({ sectionGroups }) => (\n  <Box p={5} mx={4} rounded=\"md\" marginBottom={5} textAlign=\"center\">\n    <Box maxW=\"600px\" margin=\"auto\">\n      <SimpleGrid columns={{ base: 2 }} spacing={5}>\n        {Object.keys(sectionGroups).map(section => (\n          <Link key={section} to={`#${section}`}>\n            <Button variant=\"outline\" colorScheme=\"red\" w=\"100%\">\n              {section}\n            </Button>\n          </Link>\n        ))}\n      </SimpleGrid>\n    </Box>\n  </Box>\n)\n\nexport default TableOfContents\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { Box, Heading } from '@chakra-ui/react'\nimport * as projectsStyles from '../styles/projects.module.scss'\nimport ProjectsSection from './ProjectsSection'\nimport TableOfContents from './TableOfContents'\n\nconst Projects = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/projects/\" } }) {\n        nodes {\n          frontmatter {\n            title\n            description\n            sections\n            slug\n            imageurl {\n              childImageSharp {\n                gatsbyImageData(layout: CONSTRAINED)\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const allProjects = data.allMarkdownRemark.nodes.map(node => ({\n    ...node.frontmatter,\n    slug: node.frontmatter.slug,\n  }))\n\n  const sectionGroups = allProjects.reduce((groups, project) => {\n    project.sections.forEach(section => {\n      groups[section] = groups[section] || []\n      groups[section].push(project)\n    })\n    return groups\n  }, {})\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n      <Heading as=\"h1\" size=\"3xl\" my={40} textAlign=\"center\">\n        My Projects\n      </Heading>\n      <TableOfContents sectionGroups={sectionGroups} />\n      {Object.entries(sectionGroups).map(([section, projects]) => (\n        <ProjectsSection key={section} section={section} projects={projects} />\n      ))}\n    </Box>\n  )\n}\n\nexport default Projects\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Projects from '../components/Projects'\n\nexport default function ProjectsPage({ data }) {\n  return (\n    <Layout>\n      <Projects projects={data.projects.nodes} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  {\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          slug\n          sections\n        }\n      }\n    }\n  }\n`\n","'use client'\n\n// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n//# sourceMappingURL=chunk-7OLJDQMT.mjs.map"],"names":["Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","keys","reduce","result","key","SimpleGrid","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","theme","templateColumns","width","value","_value","n","widthToColumns","jsx","gap","columnGap","rowGap","displayName","ArrowForwardIcon","d","_ref","section","projects","React","Box","my","display","flexDirection","justifyContent","id","borderTop","borderRight","borderWidth","borderColor","borderRadius","p","mx","Heading","as","size","mb","textAlign","alignSelf","base","md","slice","project","ProjectCard","slug","length","mt","Link","to","IconButton","fontSize","variant","colorScheme","isRound","icon","sectionGroups","rounded","marginBottom","maxW","margin","Button","w","Projects","useStaticQuery","allMarkdownRemark","nodes","node","frontmatter","groups","sections","forEach","push","TableOfContents","entries","ProjectsSection","ProjectsPage","data","Layout","styles","className","h2","cx","__css"],"sourceRoot":""}