{"version":3,"file":"component---src-templates-project-js-05cb25a6ad2c39c3ff21.js","mappings":"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","sources":["webpack://atharv-kulkarni/./node_modules/extend/index.js","webpack://atharv-kulkarni/./src/components/TemplateComponents/Project/ProjectMetadata.js","webpack://atharv-kulkarni/./node_modules/estree-util-is-identifier-name/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/hast-util-whitespace/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/esm/index.mjs","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-stringify-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/vfile-message/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/comma-separated-tokens/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/space-separated-tokens/index.js","webpack://atharv-kulkarni/./node_modules/html-url-attributes/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-chunked/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-subtokenize/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-combine-extensions/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-character/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-space/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/content.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js","webpack://atharv-kulkarni/./node_modules/micromark-util-resolve-all/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/list.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-destination/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-label/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-title/index.js","webpack://atharv-kulkarni/./node_modules/micromark-factory-whitespace/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-normalize-identifier/index.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://atharv-kulkarni/./node_modules/micromark-util-html-tag-name/index.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://atharv-kulkarni/./node_modules/decode-named-character-reference/index.dom.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://atharv-kulkarni/./node_modules/micromark-util-classify-character/index.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://atharv-kulkarni/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/constructs.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js","webpack://atharv-kulkarni/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-decode-string/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/micromark/lib/parse.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/types.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://atharv-kulkarni/./node_modules/@ungap/structured-clone/esm/index.js","webpack://atharv-kulkarni/./node_modules/micromark-util-sanitize-uri/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://atharv-kulkarni/./node_modules/trim-lines/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-rehype/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/bail/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/trough/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unified/lib/callable-instance.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/lib/index.js","webpack://atharv-kulkarni/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-autolink-literal/node_modules/ccount/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://atharv-kulkarni/./node_modules/markdown-table/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-string/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://atharv-kulkarni/./node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-phrasing/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/longest-streak/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-string/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit/lib/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/longest-streak/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://atharv-kulkarni/./node_modules/remark-gfm/lib/index.js","webpack://atharv-kulkarni/./node_modules/micromark-extension-gfm/index.js","webpack://atharv-kulkarni/./node_modules/mdast-util-gfm/lib/index.js","webpack://atharv-kulkarni/./node_modules/collapse-white-space/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/node_modules/unist-util-position/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/node_modules/unist-util-is/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/node_modules/unist-util-visit-parents/lib/index.js","webpack://atharv-kulkarni/./node_modules/remark-images/lib/index.js","webpack://atharv-kulkarni/./src/components/TemplateComponents/Project/ProjectDetail.js","webpack://atharv-kulkarni/./src/templates/project.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/inline-style-parser/index.js","webpack://atharv-kulkarni/./node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/cjs/index.js","webpack://atharv-kulkarni/./node_modules/is-url/index.js","webpack://atharv-kulkarni/./node_modules/slugify/slugify.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/icons/dist/chunk-6RTX462E.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-2OOHT3W5.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-46CXQZ4E.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-7ELO524Q.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-7OLJDQMT.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-ZFQCCYWD.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-ZHMYA64R.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-5VJV6UNA.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/react-children-utils/dist/index.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/tag/dist/chunk-RPO2WXNL.mjs"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// src/components/ProjectMetadata.js\n\nimport React from 'react'\nimport {\n  Box,\n  Heading,\n  Text,\n  Link,\n  HStack,\n  Wrap,\n  WrapItem,\n  Tag,\n} from '@chakra-ui/react'\nimport { motion } from 'framer-motion'\n\nconst ProjectMetadata = ({ project }) => {\n  // Destructuring props for ease of access\n  const { title, techStack, duration, role, repoLink, liveLink } =\n    project.frontmatter\n\n  // Framer Motion component\n  const MotionBox = motion(Box)\n\n  // Animation settings for Framer Motion\n  const animationSettings = {\n    initial: { opacity: 0, translateY: 50 },\n    animate: { opacity: 1, translateY: 0 },\n    exit: { opacity: 0, translateY: -50 },\n    transition: { duration: 0.5 },\n  }\n\n  return (\n    <MotionBox p={4} m={4} {...animationSettings}>\n      <Heading as=\"h1\" size=\"2xl\" mb={2}>\n        {title}\n      </Heading>\n      <Box my=\"10\">\n        {techStack && (\n          <Text mb={1}>\n            <strong>Tech Stack: </strong>\n            {\n              // techStack.join(', ')\n              <Wrap my=\"5\">\n                {techStack.map(skill => (\n                  <WrapItem key={skill}>\n                    <Tag\n                      size=\"md\"\n                      variant=\"solid\"\n                      colorScheme=\"purple\"\n                      borderRadius=\"full\"\n                    >\n                      {skill}\n                    </Tag>\n                  </WrapItem>\n                ))}\n              </Wrap>\n            }\n          </Text>\n        )}\n        {duration && <Text mb={1}>Duration: {duration}</Text>}\n        {role && <Text mb={1}>Role: {role}</Text>}\n        <HStack spacing={4}>\n          {repoLink && (\n            <Link href={repoLink} isExternal>\n              GitHub\n            </Link>\n          )}\n          {liveLink && (\n            <Link href={liveLink} isExternal>\n              Live Project\n            </Link>\n          )}\n        </HStack>\n      </Box>\n    </MotionBox>\n  )\n}\n\nexport default ProjectMetadata\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is PhrasingContent} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      'link',\n      'linkReference',\n      'strong',\n      'text'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g\nconst html = /[\\t\\n\\v\\f\\r ]+/g\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string') {\n    options = {style: options}\n  }\n\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace\n\n  return String(value).replace(\n    options.style === 'html' ? html : js,\n    options.trim ? trimFactory(replace) : replace\n  )\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length\n      ? ''\n      : replace(value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').RootContent} RootContent\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {ReadonlyArray<string> | null | undefined} [imageExtensions]\n *   File extensions (without dot) to treat as images (default:\n *   `defaultImageExtensions`).\n */\n\nimport {collapseWhiteSpace} from 'collapse-white-space'\nimport isUrl from 'is-url'\nimport {position} from 'unist-util-position'\nimport {visitParents} from 'unist-util-visit-parents'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Add a simpler image syntax.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function remarkImages(options) {\n  const settings = options || emptyOptions\n  const imageExtensions = settings.imageExtensions || defaultImageExtensions\n  const imageExtensionRegex = new RegExp(`\\\\.(${imageExtensions.join('|')})$`)\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visitParents(tree, 'text', function (node, parents) {\n      const value = collapseWhiteSpace(node.value, {\n        style: 'html',\n        trim: true\n      })\n\n      if (\n        // Cannot contain whitespace (collapsed, so there can only be spaces):\n        !value.includes(' ') &&\n        // Looks like a URL or path:\n        (isUrl(value) ||\n          value.startsWith('/') ||\n          value.startsWith('./') ||\n          value.startsWith('../')) &&\n        // Ends in known extension:\n        imageExtensionRegex.test(value)\n      ) {\n        let interactive = false\n        let length = parents.length\n\n        // Check if we’re in interactive content.\n        while (length--) {\n          const parent = parents[length]\n          if (parent.type === 'link' || parent.type === 'linkReference') {\n            interactive = true\n            break\n          }\n        }\n\n        /** @type {Image | Link} */\n        let replacement = {\n          type: 'image',\n          url: value,\n          title: null,\n          alt: '',\n          position: position(node)\n        }\n\n        // Add a link if we’re not already in one.\n        if (!interactive) {\n          replacement = {\n            type: 'link',\n            url: value,\n            title: null,\n            children: [replacement],\n            position: position(node)\n          }\n        }\n\n        const parent = parents[parents.length - 1]\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        siblings[siblings.indexOf(node)] = replacement\n      }\n    })\n  }\n}\n\n/**\n * Extensions recognized as images by default.\n *\n * @type {ReadonlyArray<string>}\n */\nexport const defaultImageExtensions = [\n  'avif',\n  'gif',\n  'jpeg',\n  'jpg',\n  'png',\n  'svg',\n  'webp'\n]\n","/* eslint-disable react/prop-types */\n// src/components/ProjectDetail.js\nimport React from 'react'\nimport {\n  Box,\n  VStack,\n  Heading,\n  Text,\n  Image,\n  Link,\n  List,\n  ListIcon,\n  ListItem,\n} from '@chakra-ui/react'\nimport { ChevronRightIcon } from '@chakra-ui/icons'\nimport { motion } from 'framer-motion'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport remarkImages from 'remark-images'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { Element } from 'react-scroll'\nimport slugify from 'slugify'\n\nconst ProjectDetail = ({ project }) => {\n  // Destructuring props for ease of access\n  const { markdown } = project\n\n  // React.useEffect(() => {\n  //   const headingRegex = /^(#{1,6})\\s+(.+)/gm\n  //   const extractedHeadings = markdown\n  //     .split('\\n')\n  //     .filter(line => line.match(headingRegex))\n  //     .map(rawHeading => {\n  //       const title = rawHeading.replace(/^(#{1,6})\\s+/, '').trim()\n  //       return { title, id: slugify(title, { lower: true }) }\n  //     })\n\n  //   // Pass headings up to the parent component\n  //   if (onHeadingsExtracted) {\n  //     setLocalExtractedHeadings(extractedHeadings)\n  //     onHeadingsExtracted(extractedHeadings)\n  //   }\n  // }, [markdown, onHeadingsExtracted])\n\n  // Framer Motion component and hook\n  const MotionBox = motion(Box)\n\n  // Animation settings for Framer Motion\n  const animationSettings = {\n    initial: { opacity: 0 },\n    whileInView: { opacity: 1 },\n    viewport: { once: true },\n    transition: { duration: 0.8 },\n  }\n\n  // Custom renderers for markdown elements\n  const renderers = {\n    h1: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading\n            as=\"h1\"\n            fontSize=\"2rem\"\n            mt={14}\n            mb={4}\n            id={id}\n            color=\"#3a3a3a\"\n          >\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h2: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading\n            as=\"h2\"\n            fontSize=\"1.5rem\"\n            mt={10}\n            mb={4}\n            id={id}\n            color=\"#4a4a4a\"\n          >\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h3: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h3\" fontSize=\"1.25rem\" mt={8} mb={3} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h4: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h4\" fontSize=\"1rem\" mt={4} mb={2} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h5: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h5\" fontSize=\"1rem\" mt={4} mb={2} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n    h6: ({ children }) => {\n      const id = slugify(children, { lower: true })\n      return (\n        <Element name={id} className=\"element\">\n          <Heading as=\"h6\" fontSize=\"1rem\" mt={4} mb={2} id={id}>\n            {children}\n          </Heading>\n        </Element>\n      )\n    },\n\n    // ... add other heading levels if needed\n    p: ({ children }) => <Text mb={4}>{children}</Text>,\n    a: ({ href, children }) => (\n      <Link href={href} isExternal color=\"teal.500\">\n        {children}\n      </Link>\n    ),\n    ul: ({ href, children }) => (\n      // console.log('ul', children)\n      <List>\n        {children.map(li => {\n          if (li.type === 'li') {\n            return (\n              <ListItem>\n                <ListIcon as={ChevronRightIcon} />\n                <Text as=\"span\">{li.props.children}</Text>\n              </ListItem>\n            )\n          }\n        })}\n      </List>\n    ),\n  }\n\n  return (\n    <MotionBox\n      p={4}\n      m={4}\n      {...animationSettings}\n      maxHeight=\"calc(100vh - 200px)\"\n      overflowY=\"auto\"\n      id=\"project-detail-container\"\n      sx={{\n        '&::-webkit-scrollbar': {\n          height: '10px',\n          width: '5px',\n        },\n\n        '&::-webkit-scrollbar-track': {\n          borderRadius: '5px',\n          backgroundColor: '#DFE9EB',\n        },\n\n        '&::-webkit-scrollbar-track:hover': {\n          backgroundColor: '#B8C0C2',\n        },\n\n        '&::-webkit-scrollbar-track:active': {\n          backgroundColor: '#B8C0C2',\n        },\n\n        '&::-webkit-scrollbar-thumb': {\n          borderRadius: '5px',\n          backgroundColor: '#7D58E3',\n        },\n\n        '&::-webkit-scrollbar-thumb:hover': {\n          backgroundColor: '#553C9A',\n        },\n\n        '&::-webkit-scrollbar-thumb:active': {\n          backgroundColor: '#8D63FF',\n        },\n      }}\n      maxW=\"1000px\"\n    >\n      <article>\n        <ReactMarkdown\n          remarkPlugins={[gfm, remarkImages]}\n          components={renderers}\n        >\n          {markdown}\n        </ReactMarkdown>\n      </article>\n    </MotionBox>\n  )\n}\n\nexport default ProjectDetail\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { graphql } from 'gatsby'\nimport { Box, Grid, GridItem, Heading, Text } from '@chakra-ui/react'\nimport { ChevronRightIcon } from '@chakra-ui/icons'\nimport {\n  Link as ScrollLink,\n  Events,\n  animateScroll as scroll,\n  scrollSpy,\n} from 'react-scroll'\nimport slugify from 'slugify'\nimport Layout from '../components/Layout'\nimport ProjectMetadata from '../components/TemplateComponents/Project/ProjectMetadata'\nimport ProjectDetail from '../components/TemplateComponents/Project/ProjectDetail'\nimport * as styles from '../styles/projectTemplate.scss'\n\n// Extract headings from markdownRemark.rawMarkdownBody\nconst extractHeadingsFromMarkdown = markdown => {\n  const headingRegex = /^(#{1,6})\\s+(.+)/gm\n  const extractedHeadings = markdown\n    .split('\\n')\n    .filter(line => line.match(headingRegex))\n    .map(rawHeading => {\n      const level = rawHeading.match(/^#+/)[0].length // Count the number of '#' characters\n      const title = rawHeading.replace(/^#{1,6}\\s+/, '').trim()\n      return { title, id: slugify(title, { lower: true }), level }\n    })\n  return extractedHeadings\n}\n\nconst TableOfContents = ({ headings }) => (\n  <Box\n    as=\"nav\"\n    p=\"4\"\n    borderLeft=\"1px\"\n    borderColor=\"gray.200\"\n    ml=\"4\"\n    overflowY=\"auto\"\n    sx={{\n      '&::-webkit-scrollbar': {\n        height: '10px',\n        width: '5px',\n      },\n\n      '&::-webkit-scrollbar-track': {\n        borderRadius: '5px',\n        backgroundColor: '#DFE9EB',\n      },\n\n      '&::-webkit-scrollbar-track:hover': {\n        backgroundColor: '#B8C0C2',\n      },\n\n      '&::-webkit-scrollbar-track:active': {\n        backgroundColor: '#B8C0C2',\n      },\n\n      '&::-webkit-scrollbar-thumb': {\n        borderRadius: '5px',\n        backgroundColor: '#7D58E3',\n      },\n\n      '&::-webkit-scrollbar-thumb:hover': {\n        backgroundColor: '#553C9A',\n      },\n\n      '&::-webkit-scrollbar-thumb:active': {\n        backgroundColor: '#8D63FF',\n      },\n    }}\n  >\n    <Text fontWeight=\"bold\">Table of contents</Text>\n    {headings.map((heading, index) => (\n      <Box\n        key={index}\n        _hover={{ bg: 'gray.100' }}\n        borderRadius=\"md\"\n        style={{ paddingLeft: `${heading.level - 1}rem`, marginTop: '0.5rem' }} // Apply indentation based on heading level\n      >\n        <ScrollLink\n          key={index}\n          containerId=\"project-detail-container\"\n          to={heading.id}\n          activeStyle={{ fontWeight: 'bold' }}\n          spy\n          smooth\n          offset={-70}\n          duration={500}\n          // style={{\n          //   display: 'block',\n          //   transition: 'background-color 0.2s ease-in-out',\n          // }}\n        >\n          <Text fontSize=\"sm\">\n            <ChevronRightIcon />\n            {heading.title}\n          </Text>\n        </ScrollLink>\n      </Box>\n    ))}\n  </Box>\n)\n\nconst ProjectTemplate = ({ data }) => {\n  // const project = data.markdownRemark\n  const { markdownRemark } = data\n  const [headings, setHeadings] = React.useState([])\n\n  // console.log('headings:', headings)\n\n  // const headings = extractHeadings(markdownRemark.rawMarkdownBody)\n\n  React.useEffect(() => {\n    setHeadings(extractHeadingsFromMarkdown(markdownRemark.rawMarkdownBody))\n\n    Events.scrollEvent.register('begin', function () {\n      // console.log('begin', arguments)\n    })\n\n    Events.scrollEvent.register('end', function () {\n      // console.log('end', arguments)\n    })\n\n    scrollSpy.update()\n\n    return () => {\n      Events.scrollEvent.remove('begin')\n      Events.scrollEvent.remove('end')\n    }\n  }, [markdownRemark])\n\n  return (\n    <Layout>\n      <Grid\n        templateColumns={{ sm: 'repeat(1, 1fr)', md: 'repeat(6, 1fr)' }}\n        gap={4}\n        className={styles.projectTemplatePage}\n      >\n        <GridItem colSpan={{ sm: 1, md: 2 }}>\n          <Box\n            as=\"aside\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            placeItems=\"left\"\n            position=\"sticky\"\n            top=\"0\" // Adjust the top value as needed, e.g., top=\"100px\" if you have a header\n            maxHeight=\"calc(100vh - 200px)\" // Adjust the offset if there is a header\n            // overflowY=\"auto\" // Allows scrolling within the sidebar if content overflows\n            ml=\"10\"\n            mx=\"5\"\n          >\n            <ProjectMetadata project={markdownRemark} />\n            <TableOfContents headings={headings} />\n          </Box>\n        </GridItem>\n        <GridItem colSpan={{ sm: 1, md: 4 }}>\n          <ProjectDetail\n            project={{ markdown: markdownRemark.rawMarkdownBody }}\n            onHeadingsExtracted={setHeadings}\n          />\n        </GridItem>\n      </Grid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      rawMarkdownBody\n      frontmatter {\n        title\n        description\n        imageurl {\n          childImageSharp {\n            gatsbyImageData(layout: CONSTRAINED)\n          }\n        }\n        sections\n        techStack\n        duration\n        role\n        repoLink: liveLink\n      }\n    }\n  }\n`\n\nexport default ProjectTemplate\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\nexports.default = StyleToObject;\n//# sourceMappingURL=index.js.map","\n/**\n * Expose `isUrl`.\n */\n\nmodule.exports = isUrl;\n\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\n\nfunction isUrl(string){\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  var match = string.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n\n  var everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (localhostDomainRE.test(everythingAfterProtocol) ||\n      nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n\n  return false;\n}\n","\n;(function (name, root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory()\n    module.exports['default'] = factory()\n  }\n  /* istanbul ignore next */\n  else if (typeof define === 'function' && define.amd) {\n    define(factory)\n  }\n  else {\n    root[name] = factory()\n  }\n}('slugify', this, function () {\n  var charMap = JSON.parse('{\"$\":\"dollar\",\"%\":\"percent\",\"&\":\"and\",\"<\":\"less\",\">\":\"greater\",\"|\":\"or\",\"¢\":\"cent\",\"£\":\"pound\",\"¤\":\"currency\",\"¥\":\"yen\",\"©\":\"(c)\",\"ª\":\"a\",\"®\":\"(r)\",\"º\":\"o\",\"À\":\"A\",\"Á\":\"A\",\"Â\":\"A\",\"Ã\":\"A\",\"Ä\":\"A\",\"Å\":\"A\",\"Æ\":\"AE\",\"Ç\":\"C\",\"È\":\"E\",\"É\":\"E\",\"Ê\":\"E\",\"Ë\":\"E\",\"Ì\":\"I\",\"Í\":\"I\",\"Î\":\"I\",\"Ï\":\"I\",\"Ð\":\"D\",\"Ñ\":\"N\",\"Ò\":\"O\",\"Ó\":\"O\",\"Ô\":\"O\",\"Õ\":\"O\",\"Ö\":\"O\",\"Ø\":\"O\",\"Ù\":\"U\",\"Ú\":\"U\",\"Û\":\"U\",\"Ü\":\"U\",\"Ý\":\"Y\",\"Þ\":\"TH\",\"ß\":\"ss\",\"à\":\"a\",\"á\":\"a\",\"â\":\"a\",\"ã\":\"a\",\"ä\":\"a\",\"å\":\"a\",\"æ\":\"ae\",\"ç\":\"c\",\"è\":\"e\",\"é\":\"e\",\"ê\":\"e\",\"ë\":\"e\",\"ì\":\"i\",\"í\":\"i\",\"î\":\"i\",\"ï\":\"i\",\"ð\":\"d\",\"ñ\":\"n\",\"ò\":\"o\",\"ó\":\"o\",\"ô\":\"o\",\"õ\":\"o\",\"ö\":\"o\",\"ø\":\"o\",\"ù\":\"u\",\"ú\":\"u\",\"û\":\"u\",\"ü\":\"u\",\"ý\":\"y\",\"þ\":\"th\",\"ÿ\":\"y\",\"Ā\":\"A\",\"ā\":\"a\",\"Ă\":\"A\",\"ă\":\"a\",\"Ą\":\"A\",\"ą\":\"a\",\"Ć\":\"C\",\"ć\":\"c\",\"Č\":\"C\",\"č\":\"c\",\"Ď\":\"D\",\"ď\":\"d\",\"Đ\":\"DJ\",\"đ\":\"dj\",\"Ē\":\"E\",\"ē\":\"e\",\"Ė\":\"E\",\"ė\":\"e\",\"Ę\":\"e\",\"ę\":\"e\",\"Ě\":\"E\",\"ě\":\"e\",\"Ğ\":\"G\",\"ğ\":\"g\",\"Ģ\":\"G\",\"ģ\":\"g\",\"Ĩ\":\"I\",\"ĩ\":\"i\",\"Ī\":\"i\",\"ī\":\"i\",\"Į\":\"I\",\"į\":\"i\",\"İ\":\"I\",\"ı\":\"i\",\"Ķ\":\"k\",\"ķ\":\"k\",\"Ļ\":\"L\",\"ļ\":\"l\",\"Ľ\":\"L\",\"ľ\":\"l\",\"Ł\":\"L\",\"ł\":\"l\",\"Ń\":\"N\",\"ń\":\"n\",\"Ņ\":\"N\",\"ņ\":\"n\",\"Ň\":\"N\",\"ň\":\"n\",\"Ō\":\"O\",\"ō\":\"o\",\"Ő\":\"O\",\"ő\":\"o\",\"Œ\":\"OE\",\"œ\":\"oe\",\"Ŕ\":\"R\",\"ŕ\":\"r\",\"Ř\":\"R\",\"ř\":\"r\",\"Ś\":\"S\",\"ś\":\"s\",\"Ş\":\"S\",\"ş\":\"s\",\"Š\":\"S\",\"š\":\"s\",\"Ţ\":\"T\",\"ţ\":\"t\",\"Ť\":\"T\",\"ť\":\"t\",\"Ũ\":\"U\",\"ũ\":\"u\",\"Ū\":\"u\",\"ū\":\"u\",\"Ů\":\"U\",\"ů\":\"u\",\"Ű\":\"U\",\"ű\":\"u\",\"Ų\":\"U\",\"ų\":\"u\",\"Ŵ\":\"W\",\"ŵ\":\"w\",\"Ŷ\":\"Y\",\"ŷ\":\"y\",\"Ÿ\":\"Y\",\"Ź\":\"Z\",\"ź\":\"z\",\"Ż\":\"Z\",\"ż\":\"z\",\"Ž\":\"Z\",\"ž\":\"z\",\"Ə\":\"E\",\"ƒ\":\"f\",\"Ơ\":\"O\",\"ơ\":\"o\",\"Ư\":\"U\",\"ư\":\"u\",\"ǈ\":\"LJ\",\"ǉ\":\"lj\",\"ǋ\":\"NJ\",\"ǌ\":\"nj\",\"Ș\":\"S\",\"ș\":\"s\",\"Ț\":\"T\",\"ț\":\"t\",\"ə\":\"e\",\"˚\":\"o\",\"Ά\":\"A\",\"Έ\":\"E\",\"Ή\":\"H\",\"Ί\":\"I\",\"Ό\":\"O\",\"Ύ\":\"Y\",\"Ώ\":\"W\",\"ΐ\":\"i\",\"Α\":\"A\",\"Β\":\"B\",\"Γ\":\"G\",\"Δ\":\"D\",\"Ε\":\"E\",\"Ζ\":\"Z\",\"Η\":\"H\",\"Θ\":\"8\",\"Ι\":\"I\",\"Κ\":\"K\",\"Λ\":\"L\",\"Μ\":\"M\",\"Ν\":\"N\",\"Ξ\":\"3\",\"Ο\":\"O\",\"Π\":\"P\",\"Ρ\":\"R\",\"Σ\":\"S\",\"Τ\":\"T\",\"Υ\":\"Y\",\"Φ\":\"F\",\"Χ\":\"X\",\"Ψ\":\"PS\",\"Ω\":\"W\",\"Ϊ\":\"I\",\"Ϋ\":\"Y\",\"ά\":\"a\",\"έ\":\"e\",\"ή\":\"h\",\"ί\":\"i\",\"ΰ\":\"y\",\"α\":\"a\",\"β\":\"b\",\"γ\":\"g\",\"δ\":\"d\",\"ε\":\"e\",\"ζ\":\"z\",\"η\":\"h\",\"θ\":\"8\",\"ι\":\"i\",\"κ\":\"k\",\"λ\":\"l\",\"μ\":\"m\",\"ν\":\"n\",\"ξ\":\"3\",\"ο\":\"o\",\"π\":\"p\",\"ρ\":\"r\",\"ς\":\"s\",\"σ\":\"s\",\"τ\":\"t\",\"υ\":\"y\",\"φ\":\"f\",\"χ\":\"x\",\"ψ\":\"ps\",\"ω\":\"w\",\"ϊ\":\"i\",\"ϋ\":\"y\",\"ό\":\"o\",\"ύ\":\"y\",\"ώ\":\"w\",\"Ё\":\"Yo\",\"Ђ\":\"DJ\",\"Є\":\"Ye\",\"І\":\"I\",\"Ї\":\"Yi\",\"Ј\":\"J\",\"Љ\":\"LJ\",\"Њ\":\"NJ\",\"Ћ\":\"C\",\"Џ\":\"DZ\",\"А\":\"A\",\"Б\":\"B\",\"В\":\"V\",\"Г\":\"G\",\"Д\":\"D\",\"Е\":\"E\",\"Ж\":\"Zh\",\"З\":\"Z\",\"И\":\"I\",\"Й\":\"J\",\"К\":\"K\",\"Л\":\"L\",\"М\":\"M\",\"Н\":\"N\",\"О\":\"O\",\"П\":\"P\",\"Р\":\"R\",\"С\":\"S\",\"Т\":\"T\",\"У\":\"U\",\"Ф\":\"F\",\"Х\":\"H\",\"Ц\":\"C\",\"Ч\":\"Ch\",\"Ш\":\"Sh\",\"Щ\":\"Sh\",\"Ъ\":\"U\",\"Ы\":\"Y\",\"Ь\":\"\",\"Э\":\"E\",\"Ю\":\"Yu\",\"Я\":\"Ya\",\"а\":\"a\",\"б\":\"b\",\"в\":\"v\",\"г\":\"g\",\"д\":\"d\",\"е\":\"e\",\"ж\":\"zh\",\"з\":\"z\",\"и\":\"i\",\"й\":\"j\",\"к\":\"k\",\"л\":\"l\",\"м\":\"m\",\"н\":\"n\",\"о\":\"o\",\"п\":\"p\",\"р\":\"r\",\"с\":\"s\",\"т\":\"t\",\"у\":\"u\",\"ф\":\"f\",\"х\":\"h\",\"ц\":\"c\",\"ч\":\"ch\",\"ш\":\"sh\",\"щ\":\"sh\",\"ъ\":\"u\",\"ы\":\"y\",\"ь\":\"\",\"э\":\"e\",\"ю\":\"yu\",\"я\":\"ya\",\"ё\":\"yo\",\"ђ\":\"dj\",\"є\":\"ye\",\"і\":\"i\",\"ї\":\"yi\",\"ј\":\"j\",\"љ\":\"lj\",\"њ\":\"nj\",\"ћ\":\"c\",\"ѝ\":\"u\",\"џ\":\"dz\",\"Ґ\":\"G\",\"ґ\":\"g\",\"Ғ\":\"GH\",\"ғ\":\"gh\",\"Қ\":\"KH\",\"қ\":\"kh\",\"Ң\":\"NG\",\"ң\":\"ng\",\"Ү\":\"UE\",\"ү\":\"ue\",\"Ұ\":\"U\",\"ұ\":\"u\",\"Һ\":\"H\",\"һ\":\"h\",\"Ә\":\"AE\",\"ә\":\"ae\",\"Ө\":\"OE\",\"ө\":\"oe\",\"Ա\":\"A\",\"Բ\":\"B\",\"Գ\":\"G\",\"Դ\":\"D\",\"Ե\":\"E\",\"Զ\":\"Z\",\"Է\":\"E\\'\",\"Ը\":\"Y\\'\",\"Թ\":\"T\\'\",\"Ժ\":\"JH\",\"Ի\":\"I\",\"Լ\":\"L\",\"Խ\":\"X\",\"Ծ\":\"C\\'\",\"Կ\":\"K\",\"Հ\":\"H\",\"Ձ\":\"D\\'\",\"Ղ\":\"GH\",\"Ճ\":\"TW\",\"Մ\":\"M\",\"Յ\":\"Y\",\"Ն\":\"N\",\"Շ\":\"SH\",\"Չ\":\"CH\",\"Պ\":\"P\",\"Ջ\":\"J\",\"Ռ\":\"R\\'\",\"Ս\":\"S\",\"Վ\":\"V\",\"Տ\":\"T\",\"Ր\":\"R\",\"Ց\":\"C\",\"Փ\":\"P\\'\",\"Ք\":\"Q\\'\",\"Օ\":\"O\\'\\'\",\"Ֆ\":\"F\",\"և\":\"EV\",\"ء\":\"a\",\"آ\":\"aa\",\"أ\":\"a\",\"ؤ\":\"u\",\"إ\":\"i\",\"ئ\":\"e\",\"ا\":\"a\",\"ب\":\"b\",\"ة\":\"h\",\"ت\":\"t\",\"ث\":\"th\",\"ج\":\"j\",\"ح\":\"h\",\"خ\":\"kh\",\"د\":\"d\",\"ذ\":\"th\",\"ر\":\"r\",\"ز\":\"z\",\"س\":\"s\",\"ش\":\"sh\",\"ص\":\"s\",\"ض\":\"dh\",\"ط\":\"t\",\"ظ\":\"z\",\"ع\":\"a\",\"غ\":\"gh\",\"ف\":\"f\",\"ق\":\"q\",\"ك\":\"k\",\"ل\":\"l\",\"م\":\"m\",\"ن\":\"n\",\"ه\":\"h\",\"و\":\"w\",\"ى\":\"a\",\"ي\":\"y\",\"ً\":\"an\",\"ٌ\":\"on\",\"ٍ\":\"en\",\"َ\":\"a\",\"ُ\":\"u\",\"ِ\":\"e\",\"ْ\":\"\",\"٠\":\"0\",\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"پ\":\"p\",\"چ\":\"ch\",\"ژ\":\"zh\",\"ک\":\"k\",\"گ\":\"g\",\"ی\":\"y\",\"۰\":\"0\",\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\",\"฿\":\"baht\",\"ა\":\"a\",\"ბ\":\"b\",\"გ\":\"g\",\"დ\":\"d\",\"ე\":\"e\",\"ვ\":\"v\",\"ზ\":\"z\",\"თ\":\"t\",\"ი\":\"i\",\"კ\":\"k\",\"ლ\":\"l\",\"მ\":\"m\",\"ნ\":\"n\",\"ო\":\"o\",\"პ\":\"p\",\"ჟ\":\"zh\",\"რ\":\"r\",\"ს\":\"s\",\"ტ\":\"t\",\"უ\":\"u\",\"ფ\":\"f\",\"ქ\":\"k\",\"ღ\":\"gh\",\"ყ\":\"q\",\"შ\":\"sh\",\"ჩ\":\"ch\",\"ც\":\"ts\",\"ძ\":\"dz\",\"წ\":\"ts\",\"ჭ\":\"ch\",\"ხ\":\"kh\",\"ჯ\":\"j\",\"ჰ\":\"h\",\"Ṣ\":\"S\",\"ṣ\":\"s\",\"Ẁ\":\"W\",\"ẁ\":\"w\",\"Ẃ\":\"W\",\"ẃ\":\"w\",\"Ẅ\":\"W\",\"ẅ\":\"w\",\"ẞ\":\"SS\",\"Ạ\":\"A\",\"ạ\":\"a\",\"Ả\":\"A\",\"ả\":\"a\",\"Ấ\":\"A\",\"ấ\":\"a\",\"Ầ\":\"A\",\"ầ\":\"a\",\"Ẩ\":\"A\",\"ẩ\":\"a\",\"Ẫ\":\"A\",\"ẫ\":\"a\",\"Ậ\":\"A\",\"ậ\":\"a\",\"Ắ\":\"A\",\"ắ\":\"a\",\"Ằ\":\"A\",\"ằ\":\"a\",\"Ẳ\":\"A\",\"ẳ\":\"a\",\"Ẵ\":\"A\",\"ẵ\":\"a\",\"Ặ\":\"A\",\"ặ\":\"a\",\"Ẹ\":\"E\",\"ẹ\":\"e\",\"Ẻ\":\"E\",\"ẻ\":\"e\",\"Ẽ\":\"E\",\"ẽ\":\"e\",\"Ế\":\"E\",\"ế\":\"e\",\"Ề\":\"E\",\"ề\":\"e\",\"Ể\":\"E\",\"ể\":\"e\",\"Ễ\":\"E\",\"ễ\":\"e\",\"Ệ\":\"E\",\"ệ\":\"e\",\"Ỉ\":\"I\",\"ỉ\":\"i\",\"Ị\":\"I\",\"ị\":\"i\",\"Ọ\":\"O\",\"ọ\":\"o\",\"Ỏ\":\"O\",\"ỏ\":\"o\",\"Ố\":\"O\",\"ố\":\"o\",\"Ồ\":\"O\",\"ồ\":\"o\",\"Ổ\":\"O\",\"ổ\":\"o\",\"Ỗ\":\"O\",\"ỗ\":\"o\",\"Ộ\":\"O\",\"ộ\":\"o\",\"Ớ\":\"O\",\"ớ\":\"o\",\"Ờ\":\"O\",\"ờ\":\"o\",\"Ở\":\"O\",\"ở\":\"o\",\"Ỡ\":\"O\",\"ỡ\":\"o\",\"Ợ\":\"O\",\"ợ\":\"o\",\"Ụ\":\"U\",\"ụ\":\"u\",\"Ủ\":\"U\",\"ủ\":\"u\",\"Ứ\":\"U\",\"ứ\":\"u\",\"Ừ\":\"U\",\"ừ\":\"u\",\"Ử\":\"U\",\"ử\":\"u\",\"Ữ\":\"U\",\"ữ\":\"u\",\"Ự\":\"U\",\"ự\":\"u\",\"Ỳ\":\"Y\",\"ỳ\":\"y\",\"Ỵ\":\"Y\",\"ỵ\":\"y\",\"Ỷ\":\"Y\",\"ỷ\":\"y\",\"Ỹ\":\"Y\",\"ỹ\":\"y\",\"–\":\"-\",\"‘\":\"\\'\",\"’\":\"\\'\",\"“\":\"\\\\\\\"\",\"”\":\"\\\\\\\"\",\"„\":\"\\\\\\\"\",\"†\":\"+\",\"•\":\"*\",\"…\":\"...\",\"₠\":\"ecu\",\"₢\":\"cruzeiro\",\"₣\":\"french franc\",\"₤\":\"lira\",\"₥\":\"mill\",\"₦\":\"naira\",\"₧\":\"peseta\",\"₨\":\"rupee\",\"₩\":\"won\",\"₪\":\"new shequel\",\"₫\":\"dong\",\"€\":\"euro\",\"₭\":\"kip\",\"₮\":\"tugrik\",\"₯\":\"drachma\",\"₰\":\"penny\",\"₱\":\"peso\",\"₲\":\"guarani\",\"₳\":\"austral\",\"₴\":\"hryvnia\",\"₵\":\"cedi\",\"₸\":\"kazakhstani tenge\",\"₹\":\"indian rupee\",\"₺\":\"turkish lira\",\"₽\":\"russian ruble\",\"₿\":\"bitcoin\",\"℠\":\"sm\",\"™\":\"tm\",\"∂\":\"d\",\"∆\":\"delta\",\"∑\":\"sum\",\"∞\":\"infinity\",\"♥\":\"love\",\"元\":\"yuan\",\"円\":\"yen\",\"﷼\":\"rial\",\"ﻵ\":\"laa\",\"ﻷ\":\"laa\",\"ﻹ\":\"lai\",\"ﻻ\":\"la\"}')\n  var locales = JSON.parse('{\"bg\":{\"Й\":\"Y\",\"Ц\":\"Ts\",\"Щ\":\"Sht\",\"Ъ\":\"A\",\"Ь\":\"Y\",\"й\":\"y\",\"ц\":\"ts\",\"щ\":\"sht\",\"ъ\":\"a\",\"ь\":\"y\"},\"de\":{\"Ä\":\"AE\",\"ä\":\"ae\",\"Ö\":\"OE\",\"ö\":\"oe\",\"Ü\":\"UE\",\"ü\":\"ue\",\"ß\":\"ss\",\"%\":\"prozent\",\"&\":\"und\",\"|\":\"oder\",\"∑\":\"summe\",\"∞\":\"unendlich\",\"♥\":\"liebe\"},\"es\":{\"%\":\"por ciento\",\"&\":\"y\",\"<\":\"menor que\",\">\":\"mayor que\",\"|\":\"o\",\"¢\":\"centavos\",\"£\":\"libras\",\"¤\":\"moneda\",\"₣\":\"francos\",\"∑\":\"suma\",\"∞\":\"infinito\",\"♥\":\"amor\"},\"fr\":{\"%\":\"pourcent\",\"&\":\"et\",\"<\":\"plus petit\",\">\":\"plus grand\",\"|\":\"ou\",\"¢\":\"centime\",\"£\":\"livre\",\"¤\":\"devise\",\"₣\":\"franc\",\"∑\":\"somme\",\"∞\":\"infini\",\"♥\":\"amour\"},\"pt\":{\"%\":\"porcento\",\"&\":\"e\",\"<\":\"menor\",\">\":\"maior\",\"|\":\"ou\",\"¢\":\"centavo\",\"∑\":\"soma\",\"£\":\"libra\",\"∞\":\"infinito\",\"♥\":\"amor\"},\"uk\":{\"И\":\"Y\",\"и\":\"y\",\"Й\":\"Y\",\"й\":\"y\",\"Ц\":\"Ts\",\"ц\":\"ts\",\"Х\":\"Kh\",\"х\":\"kh\",\"Щ\":\"Shch\",\"щ\":\"shch\",\"Г\":\"H\",\"г\":\"h\"},\"vi\":{\"Đ\":\"D\",\"đ\":\"d\"},\"da\":{\"Ø\":\"OE\",\"ø\":\"oe\",\"Å\":\"AA\",\"å\":\"aa\",\"%\":\"procent\",\"&\":\"og\",\"|\":\"eller\",\"$\":\"dollar\",\"<\":\"mindre end\",\">\":\"større end\"},\"nb\":{\"&\":\"og\",\"Å\":\"AA\",\"Æ\":\"AE\",\"Ø\":\"OE\",\"å\":\"aa\",\"æ\":\"ae\",\"ø\":\"oe\"},\"it\":{\"&\":\"e\"},\"nl\":{\"&\":\"en\"},\"sv\":{\"&\":\"och\",\"Å\":\"AA\",\"Ä\":\"AE\",\"Ö\":\"OE\",\"å\":\"aa\",\"ä\":\"ae\",\"ö\":\"oe\"}}')\n\n  function replace (string, options) {\n    if (typeof string !== 'string') {\n      throw new Error('slugify: string argument expected')\n    }\n\n    options = (typeof options === 'string')\n      ? {replacement: options}\n      : options || {}\n\n    var locale = locales[options.locale] || {}\n\n    var replacement = options.replacement === undefined ? '-' : options.replacement\n\n    var trim = options.trim === undefined ? true : options.trim\n\n    var slug = string.normalize().split('')\n      // replace characters based on charMap\n      .reduce(function (result, ch) {\n        var appendChar = locale[ch];\n        if (appendChar === undefined) appendChar = charMap[ch];\n        if (appendChar === undefined) appendChar = ch;\n        if (appendChar === replacement) appendChar = ' ';\n        return result + appendChar\n          // remove not allowed characters\n          .replace(options.remove || /[^\\w\\s$*_+~.()'\"!\\-:@]+/g, '')\n      }, '');\n\n    if (options.strict) {\n      slug = slug.replace(/[^A-Za-z0-9\\s]/g, '');\n    }\n\n    if (trim) {\n      slug = slug.trim()\n    }\n\n    // Replace spaces with replacement character, treating multiple consecutive\n    // spaces as a single space.\n    slug = slug.replace(/\\s+/g, replacement);\n\n    if (options.lower) {\n      slug = slug.toLowerCase()\n    }\n\n    return slug\n  }\n\n  replace.extend = function (customMap) {\n    Object.assign(charMap, customMap)\n  }\n\n  return replace\n}))\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","'use client'\n\n// src/ChevronRight.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nvar ChevronRightIcon = createIcon({\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\",\n  displayName: \"ChevronRightIcon\"\n});\n\nexport {\n  ChevronRightIcon\n};\n//# sourceMappingURL=chunk-6RTX462E.mjs.map","'use client'\n\n// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n//# sourceMappingURL=chunk-2OOHT3W5.mjs.map","'use client'\n\n// src/list.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [ListStylesProvider, useListStyles] = createContext({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `\n});\nvar List = forwardRef(function List2(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props);\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props);\n  const validChildren = getValidChildren(children);\n  const selector = \"& > *:not(style) ~ *:not(style)\";\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {};\n  return /* @__PURE__ */ jsx(ListStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n    chakra.ul,\n    {\n      ref,\n      listStyleType: styleType,\n      listStylePosition: stylePosition,\n      role: \"list\",\n      __css: { ...styles.container, ...spacingStyle },\n      ...rest,\n      children: validChildren\n    }\n  ) });\n});\nList.displayName = \"List\";\nvar OrderedList = forwardRef((props, ref) => {\n  const { as, ...rest } = props;\n  return /* @__PURE__ */ jsx(List, { ref, as: \"ol\", styleType: \"decimal\", marginStart: \"1em\", ...rest });\n});\nOrderedList.displayName = \"OrderedList\";\nvar UnorderedList = forwardRef(function UnorderedList2(props, ref) {\n  const { as, ...rest } = props;\n  return /* @__PURE__ */ jsx(List, { ref, as: \"ul\", styleType: \"initial\", marginStart: \"1em\", ...rest });\n});\nUnorderedList.displayName = \"UnorderedList\";\nvar ListItem = forwardRef(function ListItem2(props, ref) {\n  const styles = useListStyles();\n  return /* @__PURE__ */ jsx(chakra.li, { ref, ...props, __css: styles.item });\n});\nListItem.displayName = \"ListItem\";\nvar ListIcon = forwardRef(function ListIcon2(props, ref) {\n  const styles = useListStyles();\n  return /* @__PURE__ */ jsx(Icon, { ref, role: \"presentation\", ...props, __css: styles.icon });\n});\nListIcon.displayName = \"ListIcon\";\n\nexport {\n  useListStyles,\n  List,\n  OrderedList,\n  UnorderedList,\n  ListItem,\n  ListIcon\n};\n//# sourceMappingURL=chunk-46CXQZ4E.mjs.map","'use client'\n\n// src/wrap.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { Children, useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Wrap = forwardRef(function Wrap2(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const _children = useMemo(\n    () => shouldWrapChildren ? Children.map(children, (child, index) => /* @__PURE__ */ jsx(WrapItem, { children: child }, index)) : children,\n    [children, shouldWrapChildren]\n  );\n  return /* @__PURE__ */ jsx(chakra.div, { ref, className: cx(\"chakra-wrap\", className), ...rest, children: /* @__PURE__ */ jsx(\n    chakra.ul,\n    {\n      className: \"chakra-wrap__list\",\n      __css: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: justify,\n        alignItems: align,\n        flexDirection: direction,\n        listStyleType: \"none\",\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        padding: \"0\"\n      },\n      children: _children\n    }\n  ) });\n});\nWrap.displayName = \"Wrap\";\nvar WrapItem = forwardRef(function WrapItem2(props, ref) {\n  const { className, ...rest } = props;\n  return /* @__PURE__ */ jsx(\n    chakra.li,\n    {\n      ref,\n      __css: { display: \"flex\", alignItems: \"flex-start\" },\n      className: cx(\"chakra-wrap__listitem\", className),\n      ...rest\n    }\n  );\n});\nWrapItem.displayName = \"WrapItem\";\n\nexport {\n  Wrap,\n  WrapItem\n};\n//# sourceMappingURL=chunk-7ELO524Q.mjs.map","'use client'\n\n// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n//# sourceMappingURL=chunk-7OLJDQMT.mjs.map","'use client'\n\n// src/stack/stack-item.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StackItem = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__item\",\n    ...props,\n    __css: {\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"]\n    }\n  }\n);\nStackItem.displayName = \"StackItem\";\n\nexport {\n  StackItem\n};\n//# sourceMappingURL=chunk-ZFQCCYWD.mjs.map","'use client'\nimport {\n  StackItem\n} from \"./chunk-ZFQCCYWD.mjs\";\nimport {\n  getDividerStyles\n} from \"./chunk-5VJV6UNA.mjs\";\n\n// src/stack/stack.tsx\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction]\n  );\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */ jsx(StackItem, { children: child }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider)\n        return _child;\n      const clonedDivider = cloneElement(\n        divider,\n        {\n          __css: dividerStyle\n        }\n      );\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */ jsxs(Fragment, { children: [\n        _child,\n        _divider\n      ] }, key);\n    });\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children\n  ]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      display: \"flex\",\n      alignItems: align,\n      justifyContent: justify,\n      flexDirection: direction,\n      flexWrap: wrap,\n      gap: hasDivider ? void 0 : spacing,\n      className: _className,\n      ...rest,\n      children: clones\n    }\n  );\n});\nStack.displayName = \"Stack\";\n\nexport {\n  Stack\n};\n//# sourceMappingURL=chunk-ZHMYA64R.mjs.map","'use client'\n\n// src/stack/stack.utils.tsx\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nfunction getDividerStyles(options) {\n  const { spacing, direction } = options;\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    }\n  };\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value) => dividerStyles[value]\n    )\n  };\n}\n\nexport {\n  getDividerStyles\n};\n//# sourceMappingURL=chunk-5VJV6UNA.mjs.map","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","'use client'\n\n// src/tag.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [TagStylesProvider, useTagStyles] = createContext({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `\n});\nvar Tag = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props);\n  const ownProps = omitThemingProps(props);\n  const containerStyles = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container\n  };\n  return /* @__PURE__ */ jsx(TagStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(chakra.span, { ref, ...ownProps, __css: containerStyles }) });\n});\nTag.displayName = \"Tag\";\nvar TagLabel = forwardRef((props, ref) => {\n  const styles = useTagStyles();\n  return /* @__PURE__ */ jsx(chakra.span, { ref, noOfLines: 1, ...props, __css: styles.label });\n});\nTagLabel.displayName = \"TagLabel\";\nvar TagLeftIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginEnd: \"0.5rem\", ...props }));\nTagLeftIcon.displayName = \"TagLeftIcon\";\nvar TagRightIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginStart: \"0.5rem\", ...props }));\nTagRightIcon.displayName = \"TagRightIcon\";\nvar TagCloseIcon = (props) => /* @__PURE__ */ jsx(Icon, { verticalAlign: \"inherit\", viewBox: \"0 0 512 512\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  }\n) });\nTagCloseIcon.displayName = \"TagCloseIcon\";\nvar TagCloseButton = forwardRef(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props;\n    const styles = useTagStyles();\n    const btnStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton\n    };\n    return /* @__PURE__ */ jsx(\n      chakra.button,\n      {\n        ref,\n        \"aria-label\": \"close\",\n        ...rest,\n        type: \"button\",\n        disabled: isDisabled,\n        __css: btnStyles,\n        children: children || /* @__PURE__ */ jsx(TagCloseIcon, {})\n      }\n    );\n  }\n);\nTagCloseButton.displayName = \"TagCloseButton\";\n\nexport {\n  useTagStyles,\n  Tag,\n  TagLabel,\n  TagLeftIcon,\n  TagRightIcon,\n  TagCloseButton\n};\n//# sourceMappingURL=chunk-RPO2WXNL.mjs.map"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","_ref","project","title","techStack","duration","role","repoLink","liveLink","frontmatter","MotionBox","motion","Box","React","assign","p","m","initial","opacity","translateY","animate","exit","transition","Heading","as","size","mb","my","Text","Wrap","map","skill","WrapItem","Tag","variant","colorScheme","borderRadius","HStack","spacing","Link","href","isExternal","nameRe","nameReJsx","emptyOptions","jsx","test","re","empty","replace","Schema","property","normal","space","this","merge","definitions","index","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","prop","properties","info","transform","attributes","includes","xlink","_","slice","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","start","step","style","tabIndex","translate","type","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","charAt","toUpperCase","hastToReact","point","pointStart","node","position","line","column","undefined","pos","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","ancestors","cause","message","ruleId","source","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","TypeError","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","push","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","trim","styleObject","replacer","error","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","splice","remove","items","parameters","chunkStart","unshift","subtokenize","events","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","combineExtensions","extensions","all","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","document","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","match","endPosition","TextDecoder","lastIndex","exec","Math","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","concat","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","lines","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","createState","footnoteById","handlers","nodes","trimMarkdownSpaceStart","handle","passThrough","shallow","unknownHandler","defaultUnknownHandler","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","toHast","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","middlewareIndex","callback","output","middleware","wrapped","fnExpectsCallback","done","Promise","then","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","formatHeadingAsSetext","literalWithBreak","setext","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImpl","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","js","replaceLineEnding","replaceSpace","remarkImages","imageExtensions","defaultImageExtensions","imageExtensionRegex","preserveLineEndings","dropOrReplace","trimFactory","collapseWhiteSpace","startsWith","interactive","markdown","renderers","h1","_ref2","slugify","lower","Element","mt","h2","_ref3","h3","_ref4","h4","_ref5","h5","_ref6","h6","_ref7","_ref8","_ref9","ul","_ref10","List","li","ListItem","ListIcon","ChevronRightIcon","whileInView","viewport","once","maxHeight","overflowY","sx","backgroundColor","maxW","ReactMarkdown","TableOfContents","headings","borderLeft","ml","_hover","bg","paddingLeft","level","marginTop","ScrollLink","containerId","activeStyle","spy","smooth","markdownRemark","setHeadings","headingRegex","rawHeading","extractHeadingsFromMarkdown","rawMarkdownBody","Events","scrollEvent","register","scrollSpy","update","Layout","Grid","templateColumns","sm","md","gap","styles","GridItem","flexDirection","placeItems","top","mx","ProjectMetadata","ProjectDetail","onHeadingsExtracted","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","comments","c","val","ret","decl","decls","declarations","__importDefault","mod","__esModule","inline_style_parser_1","hasIterator","forEach","protocolAndDomainRE","everythingAfterProtocol","localhostDomainRE","nonLocalhostDomainRE","charMap","locales","locale","slug","reduce","ch","appendChar","customMap","breakpoints","mapResponsive","mapper","arrayToObjectNotation","bps","displayName","ref","decoration","casing","aliasedProps","textAlign","textTransform","__css","ListStylesProvider","useListStyles","errorMessage","styleType","stylePosition","validChildren","spacingStyle","listStyleType","listStylePosition","container","marginStart","UnorderedList","spacingX","spacingY","justify","shouldWrapChildren","_children","useMemo","Children","div","flexWrap","justifyContent","alignItems","columnGap","rowGap","StackItem","flex","minWidth","Stack","isInline","directionProp","divider","dividerStyle","dividerStyles","borderLeftWidth","borderBottomWidth","getDividerStyles","hasDivider","shouldUseChildren","clones","isLast","_child","clonedDivider","cloneElement","_divider","_className","getValidChildren","toArray","isValidElement","TagStylesProvider","useTagStyles","ownProps","containerStyles","verticalAlign","maxWidth","noOfLines","marginEnd","TagCloseIcon","isDisabled","btnStyles","outline","closeButton","button"],"sourceRoot":""}