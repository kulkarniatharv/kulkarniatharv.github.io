{"version":3,"file":"component---src-pages-projects-js-a9f7209046fdb582a7a5.js","mappings":"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","sources":["webpack://atharv-kulkarni/./src/components/ProjectCard.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/icons/dist/chunk-XEKRR764.mjs","webpack://atharv-kulkarni/./src/components/ProjectsSection.js","webpack://atharv-kulkarni/./src/components/TableOfContents.js","webpack://atharv-kulkarni/./src/components/Projects.js","webpack://atharv-kulkarni/./src/pages/projects.js","webpack://atharv-kulkarni/./node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-7OLJDQMT.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-JARCRF6W.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-NEK3OOAM.mjs","webpack://atharv-kulkarni/./node_modules/@chakra-ui/layout/dist/chunk-Z6RXEUPO.mjs"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport { Box, Text, Badge } from '@chakra-ui/react'\nimport { motion } from 'framer-motion'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport * as projectsStyles from '../styles/projects.module.scss'\n\nconst MotionBox = motion(Box)\n\nconst ProjectCard = ({ project }) => {\n  const image = getImage(project.imageurl)\n\n  return (\n    <Link to={`/projects/${project.slug}`}>\n      <MotionBox\n        whileHover={{ scale: 1.05, boxShadow: 'lg' }}\n        m={4}\n        maxW=\"sm\"\n        borderWidth={1}\n        borderRadius=\"lg\"\n        overflow=\"hidden\"\n        _hover={{ textDecoration: 'none' }}\n        backgroundColor=\"blackAlpha.200\"\n      >\n        <GatsbyImage\n          imgStyle={{ objectFit: 'cover' }}\n          image={image}\n          alt={project.title}\n        />\n        <Box p=\"6\">\n          <Box display=\"flex\" alignItems=\"baseline\">\n            <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"orange\">\n              New\n            </Badge>\n          </Box>\n\n          <Box\n            mt=\"1\"\n            mb={2}\n            fontWeight=\"bold\"\n            as=\"h2\"\n            fontSize=\"xl\"\n            lineHeight=\"tight\"\n            noOfLines={1}\n          >\n            {project.title}\n          </Box>\n\n          {/* <Text fontWeight=\"bold\"  fontSize=\"xl\" mb={2}>\n            {project.title}\n          </Text> */}\n          <Text>{project.description}</Text>\n        </Box>\n      </MotionBox>\n    </Link>\n  )\n}\n\nexport default ProjectCard\n","'use client'\n\n// src/ArrowForward.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nvar ArrowForwardIcon = createIcon({\n  d: \"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\",\n  displayName: \"ArrowForwardIcon\"\n});\n\nexport {\n  ArrowForwardIcon\n};\n//# sourceMappingURL=chunk-XEKRR764.mjs.map","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport { Box, Button, Heading, SimpleGrid, IconButton } from '@chakra-ui/react'\nimport { ArrowForwardIcon } from '@chakra-ui/icons'\nimport ProjectCard from './ProjectCard'\n\nimport * as projectsStyles from '../styles/projects.module.scss'\n\nconst ProjectsSection = ({ section, projects }) => (\n  <Box\n    my={8}\n    display=\"flex\"\n    flexDirection=\"column\"\n    justifyContent=\"center\"\n    id={section}\n    borderWidth=\"1px\"\n    borderRadius=\"lg\"\n    boxShadow=\"md\"\n    p={6}\n    mx={4}\n  >\n    <Heading\n      as=\"h2\"\n      size=\"xl\"\n      mb={4}\n      mx={4}\n      textAlign=\"center\"\n      alignSelf=\"flex-start\"\n    >\n      {section}\n    </Heading>\n    <SimpleGrid columns={{ base: 1, md: 2 }} gap={4} justifyContent=\"center\">\n      {projects.slice(0, 2).map(project => (\n        <ProjectCard key={project.slug} project={project} />\n      ))}\n    </SimpleGrid>\n    {projects.length > 2 && (\n      <Box textAlign=\"center\" mt={4}>\n        <Link to={`/sections/${section}`}>\n          {/* <Button variant=\"outline\">See all</Button> */}\n          <IconButton\n            size=\"md\"\n            fontSize=\"lg\"\n            variant=\"outline\"\n            colorScheme=\"red\"\n            isRound\n            icon={<ArrowForwardIcon />}\n            aria-label=\"Explore more projects\"\n          />\n        </Link>\n      </Box>\n    )}\n  </Box>\n)\n\nexport default ProjectsSection\n","/* eslint-disable react/prop-types */\n// TableOfContents.js\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport { Box, SimpleGrid, Button, Heading } from '@chakra-ui/react'\n\nconst TableOfContents = ({ sectionGroups }) => (\n  <Box p={5} mx={4} rounded=\"md\" marginBottom={5} textAlign=\"center\">\n    <Box maxW=\"600px\" margin=\"auto\">\n      <SimpleGrid columns={{ base: 2 }} spacing={5}>\n        {Object.keys(sectionGroups).map(section => (\n          <Link key={section} to={`#${section}`}>\n            <Button variant=\"outline\" colorScheme=\"red\" w=\"100%\">\n              {section}\n            </Button>\n          </Link>\n        ))}\n      </SimpleGrid>\n    </Box>\n  </Box>\n)\n\nexport default TableOfContents\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { Box, Heading } from '@chakra-ui/react'\nimport * as projectsStyles from '../styles/projects.module.scss'\nimport ProjectsSection from './ProjectsSection'\nimport TableOfContents from './TableOfContents'\n\nconst Projects = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/projects/\" } }) {\n        nodes {\n          frontmatter {\n            title\n            description\n            sections\n            slug\n            imageurl {\n              childImageSharp {\n                gatsbyImageData(layout: CONSTRAINED)\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const allProjects = data.allMarkdownRemark.nodes.map(node => ({\n    ...node.frontmatter,\n    slug: node.frontmatter.slug,\n  }))\n\n  const sectionGroups = allProjects.reduce((groups, project) => {\n    project.sections.forEach(section => {\n      groups[section] = groups[section] || []\n      groups[section].push(project)\n    })\n    return groups\n  }, {})\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n      <Heading as=\"h1\" size=\"3xl\" my={40} textAlign=\"center\">\n        My Projects\n      </Heading>\n      <TableOfContents sectionGroups={sectionGroups} />\n      {Object.entries(sectionGroups).map(([section, projects]) => (\n        <ProjectsSection key={section} section={section} projects={projects} />\n      ))}\n    </Box>\n  )\n}\n\nexport default Projects\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Projects from '../components/Projects'\n\nexport default function ProjectsPage({ data }) {\n  return (\n    <Layout>\n      <Projects projects={data.projects.nodes} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  {\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          slug\n          sections\n        }\n      }\n    }\n  }\n`\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","'use client'\n\n// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n//# sourceMappingURL=chunk-7OLJDQMT.mjs.map","'use client'\n\n// src/grid.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport {\n  Grid\n};\n//# sourceMappingURL=chunk-JARCRF6W.mjs.map","'use client'\nimport {\n  Grid\n} from \"./chunk-JARCRF6W.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n//# sourceMappingURL=chunk-NEK3OOAM.mjs.map","'use client'\n\n// src/badge.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Badge = forwardRef(function Badge2(props, ref) {\n  const styles = useStyleConfig(\"Badge\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      ref,\n      className: cx(\"chakra-badge\", props.className),\n      ...rest,\n      __css: {\n        display: \"inline-block\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        ...styles\n      }\n    }\n  );\n});\nBadge.displayName = \"Badge\";\n\nexport {\n  Badge\n};\n//# sourceMappingURL=chunk-Z6RXEUPO.mjs.map"],"names":["MotionBox","motion","Box","_ref","project","image","getImage","imageurl","React","Link","to","slug","whileHover","scale","boxShadow","m","maxW","borderWidth","borderRadius","overflow","_hover","textDecoration","backgroundColor","GatsbyImage","imgStyle","objectFit","alt","title","p","display","alignItems","Badge","px","colorScheme","mt","mb","fontWeight","as","fontSize","lineHeight","noOfLines","Text","description","ArrowForwardIcon","d","displayName","section","projects","my","flexDirection","justifyContent","id","mx","Heading","size","textAlign","alignSelf","SimpleGrid","columns","base","md","gap","slice","map","ProjectCard","key","length","IconButton","variant","isRound","icon","sectionGroups","rounded","marginBottom","margin","spacing","Object","keys","Button","w","Projects","useStaticQuery","allMarkdownRemark","nodes","node","frontmatter","reduce","groups","sections","forEach","push","TableOfContents","entries","ProjectsSection","ProjectsPage","data","Layout","freeze","mapResponsive","prop","mapper","Array","isArray","item","result","props","ref","styles","className","rest","jsx","h2","cx","__css","Grid","templateAreas","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","div","spacingX","spacingY","minChildWidth","theme","width","value","_value","n","widthToColumns","count","span","whiteSpace","verticalAlign"],"sourceRoot":""}